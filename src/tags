!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/45968eff/
A00	sqlite/shell.c	/^# define A00 /;"	d	file:
A01	sqlite/shell.c	/^# define A01 /;"	d	file:
A02	sqlite/shell.c	/^# define A02 /;"	d	file:
A03	sqlite/shell.c	/^# define A03 /;"	d	file:
A04	sqlite/shell.c	/^# define A04 /;"	d	file:
A10	sqlite/shell.c	/^# define A10 /;"	d	file:
A11	sqlite/shell.c	/^# define A11 /;"	d	file:
A12	sqlite/shell.c	/^# define A12 /;"	d	file:
A13	sqlite/shell.c	/^# define A13 /;"	d	file:
A14	sqlite/shell.c	/^# define A14 /;"	d	file:
A20	sqlite/shell.c	/^# define A20 /;"	d	file:
A21	sqlite/shell.c	/^# define A21 /;"	d	file:
A22	sqlite/shell.c	/^# define A22 /;"	d	file:
A23	sqlite/shell.c	/^# define A23 /;"	d	file:
A24	sqlite/shell.c	/^# define A24 /;"	d	file:
A30	sqlite/shell.c	/^# define A30 /;"	d	file:
A31	sqlite/shell.c	/^# define A31 /;"	d	file:
A32	sqlite/shell.c	/^# define A32 /;"	d	file:
A33	sqlite/shell.c	/^# define A33 /;"	d	file:
A34	sqlite/shell.c	/^# define A34 /;"	d	file:
A40	sqlite/shell.c	/^# define A40 /;"	d	file:
A41	sqlite/shell.c	/^# define A41 /;"	d	file:
A42	sqlite/shell.c	/^# define A42 /;"	d	file:
A43	sqlite/shell.c	/^# define A43 /;"	d	file:
A44	sqlite/shell.c	/^# define A44 /;"	d	file:
ABORT	include/logging/log_record.h	/^  ABORT,$/;"	e	enum:cmudb::LogRecordType
ABORTED	include/concurrency/transaction.h	/^enum class TransactionState { GROWING, SHRINKING, COMMITTED, ABORTED };$/;"	e	enum:cmudb::TransactionState
ADDR	sqlite/sqlite3.c	/^#define ADDR(/;"	d	file:
AGGREGATE	sqlite/sqlite3.c	/^#define AGGREGATE(/;"	d	file:
AGGREGATE2	sqlite/sqlite3.c	/^#define AGGREGATE2(/;"	d	file:
ALLBITS	sqlite/sqlite3.c	/^#define ALLBITS /;"	d	file:
ALWAYS	sqlite/sqlite3.c	/^# define ALWAYS(/;"	d	file:
APPLYDELETE	include/logging/log_record.h	/^  APPLYDELETE,$/;"	e	enum:cmudb::LogRecordType
Abort	concurrency/transaction_manager.cpp	/^void TransactionManager::Abort(Transaction *txn) {$/;"	f	class:cmudb::TransactionManager	typeref:typename:void
Add	include/type/value.h	/^  inline Value Add(const Value &o) const {$/;"	f	class:cmudb::Value	typeref:typename:Value
Add	type/bigint_type.cpp	/^Value BigintType::Add(const Value &left, const Value &right) const {$/;"	f	class:cmudb::BigintType	typeref:typename:Value
Add	type/decimal_type.cpp	/^Value DecimalType::Add(const Value &left, const Value &right) const {$/;"	f	class:cmudb::DecimalType	typeref:typename:Value
Add	type/integer_type.cpp	/^Value IntegerType::Add(const Value &left, const Value &right) const {$/;"	f	class:cmudb::IntegerType	typeref:typename:Value
Add	type/smallint_type.cpp	/^Value SmallintType::Add(const Value &left, const Value &right) const {$/;"	f	class:cmudb::SmallintType	typeref:typename:Value
Add	type/tinyint_type.cpp	/^Value TinyintType::Add(const Value &left, const Value &right) const {$/;"	f	class:cmudb::TinyintType	typeref:typename:Value
Add	type/type.cpp	/^Value Type::Add(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::Type	typeref:typename:Value
AddIntoDeletedPageSet	include/concurrency/transaction.h	/^  inline void AddIntoDeletedPageSet(page_id_t page_id) {$/;"	f	class:cmudb::Transaction	typeref:typename:void
AddIntoPageSet	include/concurrency/transaction.h	/^  inline void AddIntoPageSet(Page *page) { page_set_->push_back(page); }$/;"	f	class:cmudb::Transaction	typeref:typename:void
AddValue	include/type/integer_parent_type.h	/^Value IntegerParentType::AddValue(const Value &left, const Value &right) const {$/;"	f	class:cmudb::IntegerParentType	typeref:typename:Value
AdjustRoot	index/b_plus_tree.cpp	/^bool BPLUSTREE_TYPE::AdjustRoot(BPlusTreePage *old_root_node) {$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS bool
AggInfo	sqlite/sqlite3.c	/^struct AggInfo {$/;"	s	file:
AggInfo	sqlite/sqlite3.c	/^typedef struct AggInfo AggInfo;$/;"	t	typeref:struct:AggInfo	file:
AggInfo_col	sqlite/sqlite3.c	/^  struct AggInfo_col {    \/* For each column used in source tables *\/$/;"	s	struct:AggInfo	file:
AggInfo_func	sqlite/sqlite3.c	/^  struct AggInfo_func {   \/* For each aggregate function *\/$/;"	s	struct:AggInfo	file:
AllocatePage	disk/disk_manager.cpp	/^page_id_t DiskManager::AllocatePage() { return next_page_id_++; }$/;"	f	class:cmudb::DiskManager	typeref:typename:page_id_t
AppendLogRecord	logging/log_manager.cpp	/^lsn_t LogManager::AppendLogRecord(LogRecord &log_record) {$/;"	f	class:cmudb::LogManager	typeref:typename:lsn_t
ApplyDelete	page/table_page.cpp	/^void TablePage::ApplyDelete(const RID &rid, Transaction *txn,$/;"	f	class:cmudb::TablePage	typeref:typename:void
ApplyDelete	table/table_heap.cpp	/^void TableHeap::ApplyDelete(const RID &rid, Transaction *txn) {$/;"	f	class:cmudb::TableHeap	typeref:typename:void
Argv0	sqlite/shell.c	/^static char *Argv0;$/;"	v	typeref:typename:char *	file:
ArraySize	sqlite/shell.c	/^#define ArraySize(/;"	d	file:
ArraySize	sqlite/sqlite3.c	/^#define ArraySize(/;"	d	file:
AuthContext	sqlite/sqlite3.c	/^struct AuthContext {$/;"	s	file:
AuthContext	sqlite/sqlite3.c	/^typedef struct AuthContext AuthContext;$/;"	t	typeref:struct:AuthContext	file:
AutoincInfo	sqlite/sqlite3.c	/^struct AutoincInfo {$/;"	s	file:
AutoincInfo	sqlite/sqlite3.c	/^typedef struct AutoincInfo AutoincInfo;$/;"	t	typeref:struct:AutoincInfo	file:
AuxData	sqlite/sqlite3.c	/^struct AuxData {$/;"	s	file:
AuxData	sqlite/sqlite3.c	/^typedef struct AuxData AuxData;$/;"	t	typeref:struct:AuxData	file:
BEGIN	include/logging/log_record.h	/^  BEGIN,$/;"	e	enum:cmudb::LogRecordType
BEGIN_TIMER	sqlite/shell.c	/^#define BEGIN_TIMER /;"	d	file:
BEGIN_TIMER	sqlite/shell.c	/^#define BEGIN_TIMER$/;"	d	file:
BIGINT	include/type/type_id.h	/^  BIGINT,$/;"	e	enum:cmudb::TypeId
BIGINT_COMPARE_FUNC	type/bigint_type.cpp	/^#define BIGINT_COMPARE_FUNC(/;"	d	file:
BIGINT_MODIFY_FUNC	type/bigint_type.cpp	/^#define BIGINT_MODIFY_FUNC(/;"	d	file:
BMS	sqlite/sqlite3.c	/^#define BMS /;"	d	file:
BOOLEAN	include/type/type_id.h	/^  BOOLEAN,$/;"	e	enum:cmudb::TypeId
BOOLEAN_COMPARE_FUNC	type/boolean_type.cpp	/^#define BOOLEAN_COMPARE_FUNC(/;"	d	file:
BPLUSTREE_INDEX_TYPE	include/index/b_plus_tree_index.h	/^#define BPLUSTREE_INDEX_TYPE /;"	d
BPLUSTREE_TYPE	include/index/b_plus_tree.h	/^#define BPLUSTREE_TYPE /;"	d
BPlusTree	include/index/b_plus_tree.h	/^class BPlusTree {$/;"	c	namespace:cmudb
BPlusTree	index/b_plus_tree.cpp	/^BPLUSTREE_TYPE::BPlusTree(const std::string &name,$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS
BPlusTreeIndex	include/index/b_plus_tree_index.h	/^class BPlusTreeIndex : public Index {$/;"	c	namespace:cmudb
BPlusTreeIndex	index/b_plus_tree_index.cpp	/^BPLUSTREE_INDEX_TYPE::BPlusTreeIndex(IndexMetadata *metadata,$/;"	f	class:cmudb::BPLUSTREE_INDEX_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS
BPlusTreeInternalPage	include/page/b_plus_tree_internal_page.h	/^class BPlusTreeInternalPage : public BPlusTreePage {$/;"	c	namespace:cmudb
BPlusTreeLeafPage	include/page/b_plus_tree_leaf_page.h	/^class BPlusTreeLeafPage : public BPlusTreePage {$/;"	c	namespace:cmudb
BPlusTreePage	include/page/b_plus_tree_page.h	/^class BPlusTreePage {$/;"	c	namespace:cmudb
BTREE_APPEND	sqlite/sqlite3.c	/^#define BTREE_APPEND /;"	d	file:
BTREE_APPLICATION_ID	sqlite/sqlite3.c	/^#define BTREE_APPLICATION_ID /;"	d	file:
BTREE_AUTOVACUUM_FULL	sqlite/sqlite3.c	/^#define BTREE_AUTOVACUUM_FULL /;"	d	file:
BTREE_AUTOVACUUM_INCR	sqlite/sqlite3.c	/^#define BTREE_AUTOVACUUM_INCR /;"	d	file:
BTREE_AUTOVACUUM_NONE	sqlite/sqlite3.c	/^#define BTREE_AUTOVACUUM_NONE /;"	d	file:
BTREE_AUXDELETE	sqlite/sqlite3.c	/^#define BTREE_AUXDELETE /;"	d	file:
BTREE_BLOBKEY	sqlite/sqlite3.c	/^#define BTREE_BLOBKEY /;"	d	file:
BTREE_BULKLOAD	sqlite/sqlite3.c	/^#define BTREE_BULKLOAD /;"	d	file:
BTREE_DATA_VERSION	sqlite/sqlite3.c	/^#define BTREE_DATA_VERSION /;"	d	file:
BTREE_DEFAULT_CACHE_SIZE	sqlite/sqlite3.c	/^#define BTREE_DEFAULT_CACHE_SIZE /;"	d	file:
BTREE_FILE_FORMAT	sqlite/sqlite3.c	/^#define BTREE_FILE_FORMAT /;"	d	file:
BTREE_FORDELETE	sqlite/sqlite3.c	/^#define BTREE_FORDELETE /;"	d	file:
BTREE_FREE_PAGE_COUNT	sqlite/sqlite3.c	/^#define BTREE_FREE_PAGE_COUNT /;"	d	file:
BTREE_HINT_RANGE	sqlite/sqlite3.c	/^#define BTREE_HINT_RANGE /;"	d	file:
BTREE_INCR_VACUUM	sqlite/sqlite3.c	/^#define BTREE_INCR_VACUUM /;"	d	file:
BTREE_INTKEY	sqlite/sqlite3.c	/^#define BTREE_INTKEY /;"	d	file:
BTREE_LARGEST_ROOT_PAGE	sqlite/sqlite3.c	/^#define BTREE_LARGEST_ROOT_PAGE /;"	d	file:
BTREE_MEMORY	sqlite/sqlite3.c	/^#define BTREE_MEMORY /;"	d	file:
BTREE_OMIT_JOURNAL	sqlite/sqlite3.c	/^#define BTREE_OMIT_JOURNAL /;"	d	file:
BTREE_SAVEPOSITION	sqlite/sqlite3.c	/^#define BTREE_SAVEPOSITION /;"	d	file:
BTREE_SCHEMA_VERSION	sqlite/sqlite3.c	/^#define BTREE_SCHEMA_VERSION /;"	d	file:
BTREE_SEEK_EQ	sqlite/sqlite3.c	/^#define BTREE_SEEK_EQ /;"	d	file:
BTREE_SINGLE	sqlite/sqlite3.c	/^#define BTREE_SINGLE /;"	d	file:
BTREE_TEXT_ENCODING	sqlite/sqlite3.c	/^#define BTREE_TEXT_ENCODING /;"	d	file:
BTREE_UNORDERED	sqlite/sqlite3.c	/^#define BTREE_UNORDERED /;"	d	file:
BTREE_USER_VERSION	sqlite/sqlite3.c	/^#define BTREE_USER_VERSION /;"	d	file:
BTREE_WRCSR	sqlite/sqlite3.c	/^#define BTREE_WRCSR /;"	d	file:
BUCKET_SIZE	include/common/config.h	/^#define BUCKET_SIZE /;"	d
BUFFER_POOL_SIZE	include/common/config.h	/^#define BUFFER_POOL_SIZE /;"	d
BUILD_ENABLE_DBSTAT_VTAB	CMakeLists.txt	/^option(BUILD_ENABLE_DBSTAT_VTAB "enables dbstat virtual table"                 OFF)$/;"	D
BUILD_ENABLE_FTS3	CMakeLists.txt	/^option(BUILD_ENABLE_FTS3        "enables full text searches version 3"         OFF)$/;"	D
BUILD_ENABLE_FTS5	CMakeLists.txt	/^option(BUILD_ENABLE_FTS5        "enables full text searches version 5"         OFF)$/;"	D
BUILD_ENABLE_ICU	CMakeLists.txt	/^option(BUILD_ENABLE_ICU         "enables international components fir unicode" OFF)$/;"	D
BUILD_ENABLE_JSON1	CMakeLists.txt	/^option(BUILD_ENABLE_JSON1       "enables JSON SQL functins"                    OFF)$/;"	D
BUILD_ENABLE_RBU	CMakeLists.txt	/^option(BUILD_ENABLE_RBU         "enables resumable bulk update extension"      OFF)$/;"	D
BUILD_ENABLE_RTREE	CMakeLists.txt	/^option(BUILD_ENABLE_RTREE       "enables R*TRee index extension"               OFF)$/;"	D
BUILD_MT_RELEASE	CMakeLists.txt	/^    option(BUILD_MT_RELEASE "static msvcrt build" ON)$/;"	D
BUILD_SHARED_LIBS	CMakeLists.txt	/^option(BUILD_SHARED_LIBS "build sqlite3 as a unix shared (so\/dylib) library" ON)$/;"	D
BUILD_SHELL	CMakeLists.txt	/^option(BUILD_SHELL       "build sqlite3 shell application"                   ON)$/;"	D
B_PLUS_TREE_INTERNAL_PAGE_TYPE	include/page/b_plus_tree_internal_page.h	/^#define B_PLUS_TREE_INTERNAL_PAGE_TYPE /;"	d
B_PLUS_TREE_LEAF_PAGE_TYPE	include/page/b_plus_tree_leaf_page.h	/^#define B_PLUS_TREE_LEAF_PAGE_TYPE /;"	d
Begin	concurrency/transaction_manager.cpp	/^Transaction *TransactionManager::Begin() {$/;"	f	class:cmudb::TransactionManager	typeref:typename:Transaction *
Begin	index/b_plus_tree.cpp	/^INDEXITERATOR_TYPE BPLUSTREE_TYPE::Begin() { return INDEXITERATOR_TYPE(); }$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS INDEXITERATOR_TYPE
Begin	index/b_plus_tree.cpp	/^INDEXITERATOR_TYPE BPLUSTREE_TYPE::Begin(const KeyType &key) {$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS INDEXITERATOR_TYPE
BenignMallocHooks	sqlite/sqlite3.c	/^static SQLITE_WSD struct BenignMallocHooks {$/;"	s	file:
BenignMallocHooks	sqlite/sqlite3.c	/^typedef struct BenignMallocHooks BenignMallocHooks;$/;"	t	typeref:struct:BenignMallocHooks	file:
BigintType	include/type/bigint_type.h	/^class BigintType : public IntegerParentType {$/;"	c	namespace:cmudb
BigintType	type/bigint_type.cpp	/^BigintType::BigintType() : IntegerParentType(BIGINT) {}$/;"	f	class:cmudb::BigintType
Bitmask	sqlite/sqlite3.c	/^  typedef SQLITE_BITMASK_TYPE Bitmask;$/;"	t	typeref:typename:SQLITE_BITMASK_TYPE	file:
Bitmask	sqlite/sqlite3.c	/^  typedef u64 Bitmask;$/;"	t	typeref:typename:u64	file:
Bitvec	sqlite/sqlite3.c	/^typedef struct Bitvec Bitvec;$/;"	t	typeref:struct:Bitvec	file:
Bool	sqlite/sqlite3.c	/^typedef unsigned Bool;$/;"	t	typeref:typename:unsigned	file:
BooleanType	include/type/boolean_type.h	/^class BooleanType : public Type {$/;"	c	namespace:cmudb
BooleanType	type/boolean_type.cpp	/^BooleanType::BooleanType() : Type(TypeId::BOOLEAN) {}$/;"	f	class:cmudb::BooleanType
BtCursor	sqlite/sqlite3.c	/^typedef struct BtCursor BtCursor;$/;"	t	typeref:struct:BtCursor	file:
BtShared	sqlite/sqlite3.c	/^typedef struct BtShared BtShared;$/;"	t	typeref:struct:BtShared	file:
Btree	sqlite/sqlite3.c	/^typedef struct Btree Btree;$/;"	t	typeref:struct:Btree	file:
BtreePayload	sqlite/sqlite3.c	/^struct BtreePayload {$/;"	s	file:
BtreePayload	sqlite/sqlite3.c	/^typedef struct BtreePayload BtreePayload;$/;"	t	typeref:struct:BtreePayload	file:
BufferPoolManager	buffer/buffer_pool_manager.cpp	/^BufferPoolManager::BufferPoolManager(size_t pool_size,$/;"	f	class:cmudb::BufferPoolManager
BufferPoolManager	include/buffer/buffer_pool_manager.h	/^class BufferPoolManager {$/;"	c	namespace:cmudb
BusyHandler	sqlite/sqlite3.c	/^struct BusyHandler {$/;"	s	file:
BusyHandler	sqlite/sqlite3.c	/^typedef struct BusyHandler BusyHandler;$/;"	t	typeref:struct:BusyHandler	file:
CACHE_STALE	sqlite/sqlite3.c	/^#define CACHE_STALE /;"	d	file:
CMAKE_C_FLAGS_DEBUG	CMakeLists.txt	/^    set(CMAKE_C_FLAGS_DEBUG   "${CMAKE_C_FLAGS_DEBUG} -MDd")$/;"	v
CMAKE_C_FLAGS_RELEASE	CMakeLists.txt	/^    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS} -O3 -g0 -Wall -Wextra -pedantic -Wcast-align -Wu/;"	v
CMAKE_C_FLAGS_RELEASE	CMakeLists.txt	/^    set(CMAKE_C_FLAGS_RELEASE "-nologo -Zc:wchar_t -FS -O2 -MD -Zc:strictStrings -W3")$/;"	v
CMAKE_SHARED_LINKER_FLAGS_RELEASE	CMakeLists.txt	/^    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE$/;"	v
CMAKE_SKIP_RPATH	CMakeLists.txt	/^    set(CMAKE_SKIP_RPATH 0) # make dynamic linking work for Mac$/;"	v
CMP_FALSE	include/type/type.h	/^enum CmpBool { CMP_FALSE = 0, CMP_TRUE = 1, CMP_NULL = 2 };$/;"	e	enum:cmudb::CmpBool
CMP_NULL	include/type/type.h	/^enum CmpBool { CMP_FALSE = 0, CMP_TRUE = 1, CMP_NULL = 2 };$/;"	e	enum:cmudb::CmpBool
CMP_TRUE	include/type/type.h	/^enum CmpBool { CMP_FALSE = 0, CMP_TRUE = 1, CMP_NULL = 2 };$/;"	e	enum:cmudb::CmpBool
COLFLAG_HASTYPE	sqlite/sqlite3.c	/^#define COLFLAG_HASTYPE /;"	d	file:
COLFLAG_HIDDEN	sqlite/sqlite3.c	/^#define COLFLAG_HIDDEN /;"	d	file:
COLFLAG_PRIMKEY	sqlite/sqlite3.c	/^#define COLFLAG_PRIMKEY /;"	d	file:
COLNAME_COLUMN	sqlite/sqlite3.c	/^#define COLNAME_COLUMN /;"	d	file:
COLNAME_DATABASE	sqlite/sqlite3.c	/^#define COLNAME_DATABASE /;"	d	file:
COLNAME_DECLTYPE	sqlite/sqlite3.c	/^#define COLNAME_DECLTYPE /;"	d	file:
COLNAME_N	sqlite/sqlite3.c	/^#   define COLNAME_N /;"	d	file:
COLNAME_N	sqlite/sqlite3.c	/^# define COLNAME_N /;"	d	file:
COLNAME_NAME	sqlite/sqlite3.c	/^#define COLNAME_NAME /;"	d	file:
COLNAME_TABLE	sqlite/sqlite3.c	/^#define COLNAME_TABLE /;"	d	file:
COMMIT	include/logging/log_record.h	/^  COMMIT,$/;"	e	enum:cmudb::LogRecordType
COMMITTED	include/concurrency/transaction.h	/^enum class TransactionState { GROWING, SHRINKING, COMMITTED, ABORTED };$/;"	e	enum:cmudb::TransactionState
CORRUPT_DB	sqlite/sqlite3.c	/^#define CORRUPT_DB /;"	d	file:
CTIMEOPT_VAL	sqlite/sqlite3.c	/^#define CTIMEOPT_VAL(/;"	d	file:
CTIMEOPT_VAL_	sqlite/sqlite3.c	/^#define CTIMEOPT_VAL_(/;"	d	file:
CTRL_FREE	sqlite/sqlite3.c	/^#define CTRL_FREE /;"	d	file:
CTRL_LOGSIZE	sqlite/sqlite3.c	/^#define CTRL_LOGSIZE /;"	d	file:
CURTYPE_BTREE	sqlite/sqlite3.c	/^#define CURTYPE_BTREE /;"	d	file:
CURTYPE_PSEUDO	sqlite/sqlite3.c	/^#define CURTYPE_PSEUDO /;"	d	file:
CURTYPE_SORTER	sqlite/sqlite3.c	/^#define CURTYPE_SORTER /;"	d	file:
CURTYPE_VTAB	sqlite/sqlite3.c	/^#define CURTYPE_VTAB /;"	d	file:
CastAs	include/type/value.h	/^  inline Value CastAs(const TypeId type_id) const {$/;"	f	class:cmudb::Value	typeref:typename:Value
CastAs	type/bigint_type.cpp	/^Value BigintType::CastAs(const Value &val, const TypeId type_id) const {$/;"	f	class:cmudb::BigintType	typeref:typename:Value
CastAs	type/boolean_type.cpp	/^Value BooleanType::CastAs(const Value &val, const TypeId type_id) const {$/;"	f	class:cmudb::BooleanType	typeref:typename:Value
CastAs	type/decimal_type.cpp	/^Value DecimalType::CastAs(const Value &val, const TypeId type_id) const {$/;"	f	class:cmudb::DecimalType	typeref:typename:Value
CastAs	type/integer_type.cpp	/^Value IntegerType::CastAs(const Value &val, const TypeId type_id) const {$/;"	f	class:cmudb::IntegerType	typeref:typename:Value
CastAs	type/smallint_type.cpp	/^Value SmallintType::CastAs(const Value &val, const TypeId type_id) const {$/;"	f	class:cmudb::SmallintType	typeref:typename:Value
CastAs	type/tinyint_type.cpp	/^Value TinyintType::CastAs(const Value &val, const TypeId type_id) const {$/;"	f	class:cmudb::TinyintType	typeref:typename:Value
CastAs	type/type.cpp	/^Value Type::CastAs(const Value &val __attribute__((unused)),$/;"	f	class:cmudb::Type	typeref:typename:Value
CastAs	type/varlen_type.cpp	/^Value VarlenType::CastAs(const Value &value, const TypeId type_id) const {$/;"	f	class:cmudb::VarlenType	typeref:typename:Value
CastException	include/common/exception.h	/^  CastException(const TypeId origType, const TypeId newType)$/;"	f	class:cmudb::CastException
CastException	include/common/exception.h	/^class CastException : public Exception {$/;"	c	namespace:cmudb
CatalogException	include/common/exception.h	/^  CatalogException(std::string msg) : Exception(EXCEPTION_TYPE_CATALOG, msg) {}$/;"	f	class:cmudb::CatalogException
CatalogException	include/common/exception.h	/^class CatalogException : public Exception {$/;"	c	namespace:cmudb
CheckComparable	type/value.cpp	/^bool Value::CheckComparable(const Value &o) const {$/;"	f	class:cmudb::Value	typeref:typename:bool
CheckInteger	type/value.cpp	/^bool Value::CheckInteger() const {$/;"	f	class:cmudb::Value	typeref:typename:bool
CmpBool	include/type/type.h	/^enum CmpBool { CMP_FALSE = 0, CMP_TRUE = 1, CMP_NULL = 2 };$/;"	g	namespace:cmudb
Coalesce	index/b_plus_tree.cpp	/^bool BPLUSTREE_TYPE::Coalesce($/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS bool
CoalesceOrRedistribute	index/b_plus_tree.cpp	/^bool BPLUSTREE_TYPE::CoalesceOrRedistribute(N *node, Transaction *transaction) {$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS bool
CollSeq	sqlite/sqlite3.c	/^struct CollSeq {$/;"	s	file:
CollSeq	sqlite/sqlite3.c	/^typedef struct CollSeq CollSeq;$/;"	t	typeref:struct:CollSeq	file:
Column	include/catalog/column.h	/^  Column() : column_type(TypeId::INVALID), fixed_length(-1) {$/;"	f	class:cmudb::Column
Column	include/catalog/column.h	/^  Column(TypeId value_type, int32_t column_length, std::string column_name)$/;"	f	class:cmudb::Column
Column	include/catalog/column.h	/^class Column {$/;"	c	namespace:cmudb
Column	sqlite/sqlite3.c	/^struct Column {$/;"	s	file:
Column	sqlite/sqlite3.c	/^typedef struct Column Column;$/;"	t	typeref:struct:Column	file:
Commit	concurrency/transaction_manager.cpp	/^void TransactionManager::Commit(Transaction *txn) {$/;"	f	class:cmudb::TransactionManager	typeref:typename:void
CompareEquals	include/type/value.h	/^  inline CmpBool CompareEquals(const Value &o) const {$/;"	f	class:cmudb::Value	typeref:typename:CmpBool
CompareEquals	type/bigint_type.cpp	/^CmpBool BigintType::CompareEquals(const Value &left, const Value &right) const {$/;"	f	class:cmudb::BigintType	typeref:typename:CmpBool
CompareEquals	type/boolean_type.cpp	/^CmpBool BooleanType::CompareEquals(const Value &left,$/;"	f	class:cmudb::BooleanType	typeref:typename:CmpBool
CompareEquals	type/decimal_type.cpp	/^CmpBool DecimalType::CompareEquals(const Value &left,$/;"	f	class:cmudb::DecimalType	typeref:typename:CmpBool
CompareEquals	type/integer_type.cpp	/^CmpBool IntegerType::CompareEquals(const Value &left,$/;"	f	class:cmudb::IntegerType	typeref:typename:CmpBool
CompareEquals	type/smallint_type.cpp	/^CmpBool SmallintType::CompareEquals(const Value &left,$/;"	f	class:cmudb::SmallintType	typeref:typename:CmpBool
CompareEquals	type/tinyint_type.cpp	/^CmpBool TinyintType::CompareEquals(const Value &left,$/;"	f	class:cmudb::TinyintType	typeref:typename:CmpBool
CompareEquals	type/type.cpp	/^CmpBool Type::CompareEquals(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::Type	typeref:typename:CmpBool
CompareEquals	type/varlen_type.cpp	/^CmpBool VarlenType::CompareEquals(const Value &left, const Value &right) const {$/;"	f	class:cmudb::VarlenType	typeref:typename:CmpBool
CompareGreaterThan	include/type/value.h	/^  inline CmpBool CompareGreaterThan(const Value &o) const {$/;"	f	class:cmudb::Value	typeref:typename:CmpBool
CompareGreaterThan	type/bigint_type.cpp	/^CmpBool BigintType::CompareGreaterThan(const Value &left,$/;"	f	class:cmudb::BigintType	typeref:typename:CmpBool
CompareGreaterThan	type/boolean_type.cpp	/^CmpBool BooleanType::CompareGreaterThan(const Value &left,$/;"	f	class:cmudb::BooleanType	typeref:typename:CmpBool
CompareGreaterThan	type/decimal_type.cpp	/^CmpBool DecimalType::CompareGreaterThan(const Value &left,$/;"	f	class:cmudb::DecimalType	typeref:typename:CmpBool
CompareGreaterThan	type/integer_type.cpp	/^CmpBool IntegerType::CompareGreaterThan(const Value &left,$/;"	f	class:cmudb::IntegerType	typeref:typename:CmpBool
CompareGreaterThan	type/smallint_type.cpp	/^CmpBool SmallintType::CompareGreaterThan(const Value &left,$/;"	f	class:cmudb::SmallintType	typeref:typename:CmpBool
CompareGreaterThan	type/tinyint_type.cpp	/^CmpBool TinyintType::CompareGreaterThan(const Value &left,$/;"	f	class:cmudb::TinyintType	typeref:typename:CmpBool
CompareGreaterThan	type/type.cpp	/^CmpBool Type::CompareGreaterThan(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::Type	typeref:typename:CmpBool
CompareGreaterThan	type/varlen_type.cpp	/^CmpBool VarlenType::CompareGreaterThan(const Value &left,$/;"	f	class:cmudb::VarlenType	typeref:typename:CmpBool
CompareGreaterThanEquals	include/type/value.h	/^  inline CmpBool CompareGreaterThanEquals(const Value &o) const {$/;"	f	class:cmudb::Value	typeref:typename:CmpBool
CompareGreaterThanEquals	type/bigint_type.cpp	/^CmpBool BigintType::CompareGreaterThanEquals(const Value &left,$/;"	f	class:cmudb::BigintType	typeref:typename:CmpBool
CompareGreaterThanEquals	type/boolean_type.cpp	/^CmpBool BooleanType::CompareGreaterThanEquals(const Value &left,$/;"	f	class:cmudb::BooleanType	typeref:typename:CmpBool
CompareGreaterThanEquals	type/decimal_type.cpp	/^CmpBool DecimalType::CompareGreaterThanEquals(const Value &left,$/;"	f	class:cmudb::DecimalType	typeref:typename:CmpBool
CompareGreaterThanEquals	type/integer_type.cpp	/^CmpBool IntegerType::CompareGreaterThanEquals(const Value &left,$/;"	f	class:cmudb::IntegerType	typeref:typename:CmpBool
CompareGreaterThanEquals	type/smallint_type.cpp	/^CmpBool SmallintType::CompareGreaterThanEquals(const Value &left,$/;"	f	class:cmudb::SmallintType	typeref:typename:CmpBool
CompareGreaterThanEquals	type/tinyint_type.cpp	/^CmpBool TinyintType::CompareGreaterThanEquals(const Value &left,$/;"	f	class:cmudb::TinyintType	typeref:typename:CmpBool
CompareGreaterThanEquals	type/type.cpp	/^CmpBool Type::CompareGreaterThanEquals(const Value &left$/;"	f	class:cmudb::Type	typeref:typename:CmpBool
CompareGreaterThanEquals	type/varlen_type.cpp	/^CmpBool VarlenType::CompareGreaterThanEquals(const Value &left,$/;"	f	class:cmudb::VarlenType	typeref:typename:CmpBool
CompareLessThan	include/type/value.h	/^  inline CmpBool CompareLessThan(const Value &o) const {$/;"	f	class:cmudb::Value	typeref:typename:CmpBool
CompareLessThan	type/bigint_type.cpp	/^CmpBool BigintType::CompareLessThan(const Value &left,$/;"	f	class:cmudb::BigintType	typeref:typename:CmpBool
CompareLessThan	type/boolean_type.cpp	/^CmpBool BooleanType::CompareLessThan(const Value &left,$/;"	f	class:cmudb::BooleanType	typeref:typename:CmpBool
CompareLessThan	type/decimal_type.cpp	/^CmpBool DecimalType::CompareLessThan(const Value &left,$/;"	f	class:cmudb::DecimalType	typeref:typename:CmpBool
CompareLessThan	type/integer_type.cpp	/^CmpBool IntegerType::CompareLessThan(const Value &left,$/;"	f	class:cmudb::IntegerType	typeref:typename:CmpBool
CompareLessThan	type/smallint_type.cpp	/^CmpBool SmallintType::CompareLessThan(const Value &left,$/;"	f	class:cmudb::SmallintType	typeref:typename:CmpBool
CompareLessThan	type/tinyint_type.cpp	/^CmpBool TinyintType::CompareLessThan(const Value &left,$/;"	f	class:cmudb::TinyintType	typeref:typename:CmpBool
CompareLessThan	type/type.cpp	/^CmpBool Type::CompareLessThan(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::Type	typeref:typename:CmpBool
CompareLessThan	type/varlen_type.cpp	/^CmpBool VarlenType::CompareLessThan(const Value &left,$/;"	f	class:cmudb::VarlenType	typeref:typename:CmpBool
CompareLessThanEquals	include/type/value.h	/^  inline CmpBool CompareLessThanEquals(const Value &o) const {$/;"	f	class:cmudb::Value	typeref:typename:CmpBool
CompareLessThanEquals	type/bigint_type.cpp	/^CmpBool BigintType::CompareLessThanEquals(const Value &left,$/;"	f	class:cmudb::BigintType	typeref:typename:CmpBool
CompareLessThanEquals	type/boolean_type.cpp	/^CmpBool BooleanType::CompareLessThanEquals(const Value &left,$/;"	f	class:cmudb::BooleanType	typeref:typename:CmpBool
CompareLessThanEquals	type/decimal_type.cpp	/^CmpBool DecimalType::CompareLessThanEquals(const Value &left,$/;"	f	class:cmudb::DecimalType	typeref:typename:CmpBool
CompareLessThanEquals	type/integer_type.cpp	/^CmpBool IntegerType::CompareLessThanEquals(const Value &left,$/;"	f	class:cmudb::IntegerType	typeref:typename:CmpBool
CompareLessThanEquals	type/smallint_type.cpp	/^CmpBool SmallintType::CompareLessThanEquals(const Value &left,$/;"	f	class:cmudb::SmallintType	typeref:typename:CmpBool
CompareLessThanEquals	type/tinyint_type.cpp	/^CmpBool TinyintType::CompareLessThanEquals(const Value &left,$/;"	f	class:cmudb::TinyintType	typeref:typename:CmpBool
CompareLessThanEquals	type/type.cpp	/^CmpBool Type::CompareLessThanEquals(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::Type	typeref:typename:CmpBool
CompareLessThanEquals	type/varlen_type.cpp	/^CmpBool VarlenType::CompareLessThanEquals(const Value &left,$/;"	f	class:cmudb::VarlenType	typeref:typename:CmpBool
CompareNotEquals	include/type/value.h	/^  inline CmpBool CompareNotEquals(const Value &o) const {$/;"	f	class:cmudb::Value	typeref:typename:CmpBool
CompareNotEquals	type/bigint_type.cpp	/^CmpBool BigintType::CompareNotEquals(const Value &left,$/;"	f	class:cmudb::BigintType	typeref:typename:CmpBool
CompareNotEquals	type/boolean_type.cpp	/^CmpBool BooleanType::CompareNotEquals(const Value &left,$/;"	f	class:cmudb::BooleanType	typeref:typename:CmpBool
CompareNotEquals	type/decimal_type.cpp	/^CmpBool DecimalType::CompareNotEquals(const Value &left,$/;"	f	class:cmudb::DecimalType	typeref:typename:CmpBool
CompareNotEquals	type/integer_type.cpp	/^CmpBool IntegerType::CompareNotEquals(const Value &left,$/;"	f	class:cmudb::IntegerType	typeref:typename:CmpBool
CompareNotEquals	type/smallint_type.cpp	/^CmpBool SmallintType::CompareNotEquals(const Value &left,$/;"	f	class:cmudb::SmallintType	typeref:typename:CmpBool
CompareNotEquals	type/tinyint_type.cpp	/^CmpBool TinyintType::CompareNotEquals(const Value &left,$/;"	f	class:cmudb::TinyintType	typeref:typename:CmpBool
CompareNotEquals	type/type.cpp	/^CmpBool Type::CompareNotEquals(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::Type	typeref:typename:CmpBool
CompareNotEquals	type/varlen_type.cpp	/^CmpBool VarlenType::CompareNotEquals(const Value &left,$/;"	f	class:cmudb::VarlenType	typeref:typename:CmpBool
CompareStrings	include/type/type_util.h	/^  static inline int CompareStrings(const char *str1, int len1, const char *str2,$/;"	f	class:cmudb::TypeUtil	typeref:typename:int
ConnectionException	include/common/exception.h	/^  ConnectionException(std::string msg)$/;"	f	class:cmudb::ConnectionException
ConnectionException	include/common/exception.h	/^class ConnectionException : public Exception {$/;"	c	namespace:cmudb
ConstFactorOk	sqlite/sqlite3.c	/^#define ConstFactorOk(/;"	d	file:
ConstraintException	include/common/exception.h	/^  ConstraintException(std::string msg)$/;"	f	class:cmudb::ConstraintException
ConstraintException	include/common/exception.h	/^class ConstraintException : public Exception {$/;"	c	namespace:cmudb
ConstructIndex	vtable/virtual_table.cpp	/^Index *ConstructIndex(IndexMetadata *metadata,$/;"	f	namespace:cmudb	typeref:typename:Index *
ConstructTuple	vtable/virtual_table.cpp	/^Tuple ConstructTuple(Schema *schema, sqlite3_value **argv) {$/;"	f	namespace:cmudb	typeref:typename:Tuple
ConversionException	include/common/exception.h	/^  ConversionException(std::string msg)$/;"	f	class:cmudb::ConversionException
ConversionException	include/common/exception.h	/^class ConversionException : public Exception {$/;"	c	namespace:cmudb
Copy	include/type/value.h	/^  inline Value Copy() const { return Type::GetInstance(type_id_)->Copy(*this); }$/;"	f	class:cmudb::Value	typeref:typename:Value
Copy	type/bigint_type.cpp	/^Value BigintType::Copy(const Value &val) const {$/;"	f	class:cmudb::BigintType	typeref:typename:Value
Copy	type/boolean_type.cpp	/^Value BooleanType::Copy(const Value &val) const {$/;"	f	class:cmudb::BooleanType	typeref:typename:Value
Copy	type/decimal_type.cpp	/^Value DecimalType::Copy(const Value &val) const {$/;"	f	class:cmudb::DecimalType	typeref:typename:Value
Copy	type/integer_type.cpp	/^Value IntegerType::Copy(const Value &val) const {$/;"	f	class:cmudb::IntegerType	typeref:typename:Value
Copy	type/smallint_type.cpp	/^Value SmallintType::Copy(const Value &val) const {$/;"	f	class:cmudb::SmallintType	typeref:typename:Value
Copy	type/tinyint_type.cpp	/^Value TinyintType::Copy(const Value &val) const {$/;"	f	class:cmudb::TinyintType	typeref:typename:Value
Copy	type/type.cpp	/^Value Type::Copy(const Value &val __attribute__((unused))) const {$/;"	f	class:cmudb::Type	typeref:typename:Value
Copy	type/varlen_type.cpp	/^Value VarlenType::Copy(const Value &val) const { return Value(val); }$/;"	f	class:cmudb::VarlenType	typeref:typename:Value
CopyAllFrom	page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::CopyAllFrom($/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
CopyAllFrom	page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::CopyAllFrom(MappingType *items, int size) {}$/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
CopyFirstFrom	page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::CopyFirstFrom($/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
CopyFirstFrom	page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::CopyFirstFrom($/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
CopyHalfFrom	page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::CopyHalfFrom($/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
CopyHalfFrom	page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::CopyHalfFrom(MappingType *items, int size) {}$/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
CopyLastFrom	page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::CopyLastFrom($/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
CopyLastFrom	page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::CopyLastFrom(const MappingType &item) {}$/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
CopySchema	catalog/schema.cpp	/^Schema *Schema::CopySchema(const Schema *schema, const std::vector<int> &ids) {$/;"	f	class:cmudb::Schema	typeref:typename:Schema *
Cte	sqlite/sqlite3.c	/^  struct Cte {                    \/* For each CTE in the WITH clause.... *\/$/;"	s	struct:With	file:
Cursor	include/vtable/virtual_table.h	/^  Cursor(VirtualTable *virtual_table)$/;"	f	class:cmudb::Cursor
Cursor	include/vtable/virtual_table.h	/^class Cursor {$/;"	c	namespace:cmudb
D	sqlite/sqlite3.c	/^  int Y, M, D;        \/* Year, month, and day *\/$/;"	m	struct:DateTime	typeref:typename:int	file:
DBL_LOWEST	include/type/limits.h	/^static const double DBL_LOWEST = std::numeric_limits<double>::lowest();$/;"	v	namespace:cmudb	typeref:typename:const double
DB_Empty	sqlite/sqlite3.c	/^#define DB_Empty /;"	d	file:
DB_SchemaLoaded	sqlite/sqlite3.c	/^#define DB_SchemaLoaded /;"	d	file:
DB_UnresetViews	sqlite/sqlite3.c	/^#define DB_UnresetViews /;"	d	file:
DECIMAL	include/type/type_id.h	/^  DECIMAL,$/;"	e	enum:cmudb::TypeId
DECIMAL_COMPARE_FUNC	type/decimal_type.cpp	/^#define DECIMAL_COMPARE_FUNC(/;"	d	file:
DECIMAL_MODIFY_FUNC	type/decimal_type.cpp	/^#define DECIMAL_MODIFY_FUNC(/;"	d	file:
DELETE	include/concurrency/transaction.h	/^enum class WType { INSERT = 0, DELETE, UPDATE };$/;"	e	enum:cmudb::WType
DFUNCTION	sqlite/sqlite3.c	/^#define DFUNCTION(/;"	d	file:
DO_OS_MALLOC_TEST	sqlite/sqlite3.c	/^  #define DO_OS_MALLOC_TEST(/;"	d	file:
DateTime	sqlite/sqlite3.c	/^struct DateTime {$/;"	s	file:
DateTime	sqlite/sqlite3.c	/^typedef struct DateTime DateTime;$/;"	t	typeref:struct:DateTime	file:
Db	sqlite/sqlite3.c	/^struct Db {$/;"	s	file:
Db	sqlite/sqlite3.c	/^typedef struct Db Db;$/;"	t	typeref:struct:Db	file:
DbClearProperty	sqlite/sqlite3.c	/^#define DbClearProperty(/;"	d	file:
DbFixer	sqlite/sqlite3.c	/^struct DbFixer {$/;"	s	file:
DbFixer	sqlite/sqlite3.c	/^typedef struct DbFixer DbFixer;$/;"	t	typeref:struct:DbFixer	file:
DbHasAnyProperty	sqlite/sqlite3.c	/^#define DbHasAnyProperty(/;"	d	file:
DbHasProperty	sqlite/sqlite3.c	/^#define DbHasProperty(/;"	d	file:
DbMaskAllZero	sqlite/sqlite3.c	/^# define DbMaskAllZero(/;"	d	file:
DbMaskNonZero	sqlite/sqlite3.c	/^# define DbMaskNonZero(/;"	d	file:
DbMaskSet	sqlite/sqlite3.c	/^# define DbMaskSet(/;"	d	file:
DbMaskTest	sqlite/sqlite3.c	/^# define DbMaskTest(/;"	d	file:
DbMaskZero	sqlite/sqlite3.c	/^# define DbMaskZero(/;"	d	file:
DbPage	sqlite/sqlite3.c	/^typedef struct PgHdr DbPage;$/;"	t	typeref:struct:PgHdr	file:
DbSetProperty	sqlite/sqlite3.c	/^#define DbSetProperty(/;"	d	file:
DeallocatePage	disk/disk_manager.cpp	/^void DiskManager::DeallocatePage(__attribute__((unused)) page_id_t page_id) {$/;"	f	class:cmudb::DiskManager	typeref:typename:void
DecimalException	include/common/exception.h	/^  DecimalException(std::string msg) : Exception(EXCEPTION_TYPE_DECIMAL, msg) {}$/;"	f	class:cmudb::DecimalException
DecimalException	include/common/exception.h	/^class DecimalException : public Exception {$/;"	c	namespace:cmudb
DecimalType	include/type/decimal_type.h	/^class DecimalType : public NumericType {$/;"	c	namespace:cmudb
DecimalType	type/decimal_type.cpp	/^DecimalType::DecimalType() : NumericType(TypeId::DECIMAL) {}$/;"	f	class:cmudb::DecimalType
DeleteEntry	include/vtable/virtual_table.h	/^  inline void DeleteEntry(const RID &rid) {$/;"	f	class:cmudb::VirtualTable	typeref:typename:void
DeleteEntry	index/b_plus_tree_index.cpp	/^void BPLUSTREE_INDEX_TYPE::DeleteEntry(const Tuple &key,$/;"	f	class:cmudb::BPLUSTREE_INDEX_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
DeletePage	buffer/buffer_pool_manager.cpp	/^bool BufferPoolManager::DeletePage(page_id_t page_id) { return false; }$/;"	f	class:cmudb::BufferPoolManager	typeref:typename:bool
DeleteRecord	page/header_page.cpp	/^bool HeaderPage::DeleteRecord(const std::string &name) {$/;"	f	class:cmudb::HeaderPage	typeref:typename:bool
DeleteTableHeap	table/table_heap.cpp	/^bool TableHeap::DeleteTableHeap() {$/;"	f	class:cmudb::TableHeap	typeref:typename:bool
DeleteTuple	include/vtable/virtual_table.h	/^  inline bool DeleteTuple(const RID &rid) {$/;"	f	class:cmudb::VirtualTable	typeref:typename:bool
DeserializeFrom	include/type/value.h	/^  inline static Value DeserializeFrom(const char *storage,$/;"	f	class:cmudb::Value	typeref:typename:Value
DeserializeFrom	table/tuple.cpp	/^void Tuple::DeserializeFrom(const char *storage) {$/;"	f	class:cmudb::Tuple	typeref:typename:void
DeserializeFrom	type/bigint_type.cpp	/^Value BigintType::DeserializeFrom(const char *storage) const {$/;"	f	class:cmudb::BigintType	typeref:typename:Value
DeserializeFrom	type/boolean_type.cpp	/^Value BooleanType::DeserializeFrom(const char *storage) const {$/;"	f	class:cmudb::BooleanType	typeref:typename:Value
DeserializeFrom	type/decimal_type.cpp	/^Value DecimalType::DeserializeFrom(const char *storage) const {$/;"	f	class:cmudb::DecimalType	typeref:typename:Value
DeserializeFrom	type/integer_type.cpp	/^Value IntegerType::DeserializeFrom(const char *storage) const {$/;"	f	class:cmudb::IntegerType	typeref:typename:Value
DeserializeFrom	type/smallint_type.cpp	/^Value SmallintType::DeserializeFrom(const char *storage) const {$/;"	f	class:cmudb::SmallintType	typeref:typename:Value
DeserializeFrom	type/tinyint_type.cpp	/^Value TinyintType::DeserializeFrom(const char *storage) const {$/;"	f	class:cmudb::TinyintType	typeref:typename:Value
DeserializeFrom	type/type.cpp	/^Value Type::DeserializeFrom(const char *storage __attribute__((unused))) const {$/;"	f	class:cmudb::Type	typeref:typename:Value
DeserializeFrom	type/varlen_type.cpp	/^Value VarlenType::DeserializeFrom(const char *storage) const {$/;"	f	class:cmudb::VarlenType	typeref:typename:Value
DeserializeLogRecord	logging/log_recovery.cpp	/^bool LogRecovery::DeserializeLogRecord(const char *data,$/;"	f	class:cmudb::LogRecovery	typeref:typename:bool
DiskManager	disk/disk_manager.cpp	/^DiskManager::DiskManager(const std::string &db_file)$/;"	f	class:cmudb::DiskManager
DiskManager	include/disk/disk_manager.h	/^class DiskManager {$/;"	c	namespace:cmudb
Divide	include/type/value.h	/^  inline Value Divide(const Value &o) const {$/;"	f	class:cmudb::Value	typeref:typename:Value
Divide	type/bigint_type.cpp	/^Value BigintType::Divide(const Value &left, const Value &right) const {$/;"	f	class:cmudb::BigintType	typeref:typename:Value
Divide	type/decimal_type.cpp	/^Value DecimalType::Divide(const Value &left, const Value &right) const {$/;"	f	class:cmudb::DecimalType	typeref:typename:Value
Divide	type/integer_type.cpp	/^Value IntegerType::Divide(const Value &left, const Value &right) const {$/;"	f	class:cmudb::IntegerType	typeref:typename:Value
Divide	type/smallint_type.cpp	/^Value SmallintType::Divide(const Value &left, const Value &right) const {$/;"	f	class:cmudb::SmallintType	typeref:typename:Value
Divide	type/tinyint_type.cpp	/^Value TinyintType::Divide(const Value &left, const Value &right) const {$/;"	f	class:cmudb::TinyintType	typeref:typename:Value
Divide	type/type.cpp	/^Value Type::Divide(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::Type	typeref:typename:Value
DivideByZeroException	include/common/exception.h	/^  DivideByZeroException(std::string msg)$/;"	f	class:cmudb::DivideByZeroException
DivideByZeroException	include/common/exception.h	/^class DivideByZeroException : public Exception {$/;"	c	namespace:cmudb
DivideValue	include/type/integer_parent_type.h	/^Value IntegerParentType::DivideValue(const Value &left,$/;"	f	class:cmudb::IntegerParentType	typeref:typename:Value
EIGHT_BYTE_ALIGNMENT	sqlite/sqlite3.c	/^# define EIGHT_BYTE_ALIGNMENT(/;"	d	file:
ENC	sqlite/sqlite3.c	/^#define ENC(/;"	d	file:
END_TIMER	sqlite/shell.c	/^#define END_TIMER /;"	d	file:
END_TIMER	sqlite/shell.c	/^#define END_TIMER$/;"	d	file:
EP_Agg	sqlite/sqlite3.c	/^#define EP_Agg /;"	d	file:
EP_Alias	sqlite/sqlite3.c	/^#define EP_Alias /;"	d	file:
EP_CanBeNull	sqlite/sqlite3.c	/^#define EP_CanBeNull /;"	d	file:
EP_Collate	sqlite/sqlite3.c	/^#define EP_Collate /;"	d	file:
EP_ConstFunc	sqlite/sqlite3.c	/^#define EP_ConstFunc /;"	d	file:
EP_DblQuoted	sqlite/sqlite3.c	/^#define EP_DblQuoted /;"	d	file:
EP_Distinct	sqlite/sqlite3.c	/^#define EP_Distinct /;"	d	file:
EP_FromJoin	sqlite/sqlite3.c	/^#define EP_FromJoin /;"	d	file:
EP_Generic	sqlite/sqlite3.c	/^#define EP_Generic /;"	d	file:
EP_InfixFunc	sqlite/sqlite3.c	/^#define EP_InfixFunc /;"	d	file:
EP_IntValue	sqlite/sqlite3.c	/^#define EP_IntValue /;"	d	file:
EP_Leaf	sqlite/sqlite3.c	/^#define EP_Leaf /;"	d	file:
EP_MemToken	sqlite/sqlite3.c	/^#define EP_MemToken /;"	d	file:
EP_NoReduce	sqlite/sqlite3.c	/^#define EP_NoReduce /;"	d	file:
EP_Propagate	sqlite/sqlite3.c	/^#define EP_Propagate /;"	d	file:
EP_Reduced	sqlite/sqlite3.c	/^#define EP_Reduced /;"	d	file:
EP_Resolved	sqlite/sqlite3.c	/^#define EP_Resolved /;"	d	file:
EP_Skip	sqlite/sqlite3.c	/^#define EP_Skip /;"	d	file:
EP_Static	sqlite/sqlite3.c	/^#define EP_Static /;"	d	file:
EP_Subquery	sqlite/sqlite3.c	/^#define EP_Subquery /;"	d	file:
EP_TokenOnly	sqlite/sqlite3.c	/^#define EP_TokenOnly /;"	d	file:
EP_Unlikely	sqlite/sqlite3.c	/^#define EP_Unlikely /;"	d	file:
EP_VarSelect	sqlite/sqlite3.c	/^#define EP_VarSelect /;"	d	file:
EP_xIsSelect	sqlite/sqlite3.c	/^#define EP_xIsSelect /;"	d	file:
EXCEPTION_TYPE_CATALOG	include/common/exception.h	/^  EXCEPTION_TYPE_CATALOG = 13,          \/\/ catalog related$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_CONNECTION	include/common/exception.h	/^  EXCEPTION_TYPE_CONNECTION = 21,       \/\/ connection related$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_CONSTRAINT	include/common/exception.h	/^  EXCEPTION_TYPE_CONSTRAINT = 18,       \/\/ constraint related$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_CONVERSION	include/common/exception.h	/^  EXCEPTION_TYPE_CONVERSION = 2,        \/\/ conversion\/casting error$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_DECIMAL	include/common/exception.h	/^  EXCEPTION_TYPE_DECIMAL = 4,           \/\/ decimal related$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_DIVIDE_BY_ZERO	include/common/exception.h	/^  EXCEPTION_TYPE_DIVIDE_BY_ZERO = 6,    \/\/ divide by 0$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_EXECUTOR	include/common/exception.h	/^  EXCEPTION_TYPE_EXECUTOR = 17,         \/\/ executor related$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_EXPRESSION	include/common/exception.h	/^  EXCEPTION_TYPE_EXPRESSION = 12,       \/\/ expression parsing$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_INCOMPATIBLE_TYPE	include/common/exception.h	/^  EXCEPTION_TYPE_INCOMPATIBLE_TYPE = 8, \/\/ incompatible for operation$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_INDEX	include/common/exception.h	/^  EXCEPTION_TYPE_INDEX = 19,            \/\/ index related$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_INVALID	include/common/exception.h	/^  EXCEPTION_TYPE_INVALID = 0,           \/\/ invalid type$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_MISMATCH_TYPE	include/common/exception.h	/^  EXCEPTION_TYPE_MISMATCH_TYPE = 5,     \/\/ type mismatch$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_NOT_IMPLEMENTED	include/common/exception.h	/^  EXCEPTION_TYPE_NOT_IMPLEMENTED = 11,  \/\/ method not implemented$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_OBJECT_SIZE	include/common/exception.h	/^  EXCEPTION_TYPE_OBJECT_SIZE = 7,       \/\/ object size exceeded$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_OUT_OF_RANGE	include/common/exception.h	/^  EXCEPTION_TYPE_OUT_OF_RANGE = 1,      \/\/ value out of range error$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_PARSER	include/common/exception.h	/^  EXCEPTION_TYPE_PARSER = 14,           \/\/ parser related$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_PLANNER	include/common/exception.h	/^  EXCEPTION_TYPE_PLANNER = 15,          \/\/ planner related$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_SCHEDULER	include/common/exception.h	/^  EXCEPTION_TYPE_SCHEDULER = 16,        \/\/ scheduler related$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_SERIALIZATION	include/common/exception.h	/^  EXCEPTION_TYPE_SERIALIZATION = 9,     \/\/ serialization$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_STAT	include/common/exception.h	/^  EXCEPTION_TYPE_STAT = 20,             \/\/ stat related$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_SYNTAX	include/common/exception.h	/^  EXCEPTION_TYPE_SYNTAX = 22,           \/\/ syntax related$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_TRANSACTION	include/common/exception.h	/^  EXCEPTION_TYPE_TRANSACTION = 10,      \/\/ transaction management$/;"	e	enum:cmudb::ExceptionType
EXCEPTION_TYPE_UNKNOWN_TYPE	include/common/exception.h	/^  EXCEPTION_TYPE_UNKNOWN_TYPE = 3,      \/\/ unknown type$/;"	e	enum:cmudb::ExceptionType
EXCLUSIVE_LOCK	sqlite/sqlite3.c	/^#define EXCLUSIVE_LOCK /;"	d	file:
EXPRDUP_REDUCE	sqlite/sqlite3.c	/^#define EXPRDUP_REDUCE /;"	d	file:
EXPR_FULLSIZE	sqlite/sqlite3.c	/^#define EXPR_FULLSIZE /;"	d	file:
EXPR_REDUCEDSIZE	sqlite/sqlite3.c	/^#define EXPR_REDUCEDSIZE /;"	d	file:
EXPR_TOKENONLYSIZE	sqlite/sqlite3.c	/^#define EXPR_TOKENONLYSIZE /;"	d	file:
Erase	buffer/lru_replacer.cpp	/^template <typename T> bool LRUReplacer<T>::Erase(const T &value) {$/;"	f	class:cmudb::LRUReplacer	typeref:typename:bool
Exception	include/common/exception.h	/^  Exception(ExceptionType exception_type, std::string message)$/;"	f	class:cmudb::Exception
Exception	include/common/exception.h	/^  Exception(std::string message)$/;"	f	class:cmudb::Exception
Exception	include/common/exception.h	/^class Exception : public std::runtime_error {$/;"	c	namespace:cmudb
ExceptionType	include/common/exception.h	/^enum ExceptionType {$/;"	g	namespace:cmudb
ExecutorException	include/common/exception.h	/^  ExecutorException(std::string msg)$/;"	f	class:cmudb::ExecutorException
ExecutorException	include/common/exception.h	/^class ExecutorException : public Exception {$/;"	c	namespace:cmudb
ExpandBlob	sqlite/sqlite3.c	/^  #define ExpandBlob(/;"	d	file:
ExpectionTypeToString	include/common/exception.h	/^  std::string ExpectionTypeToString(ExceptionType type) {$/;"	f	class:cmudb::Exception	typeref:typename:std::string
Expr	sqlite/sqlite3.c	/^struct Expr {$/;"	s	file:
Expr	sqlite/sqlite3.c	/^typedef struct Expr Expr;$/;"	t	typeref:struct:Expr	file:
ExprClearProperty	sqlite/sqlite3.c	/^#define ExprClearProperty(/;"	d	file:
ExprHasAllProperty	sqlite/sqlite3.c	/^#define ExprHasAllProperty(/;"	d	file:
ExprHasProperty	sqlite/sqlite3.c	/^#define ExprHasProperty(/;"	d	file:
ExprList	sqlite/sqlite3.c	/^struct ExprList {$/;"	s	file:
ExprList	sqlite/sqlite3.c	/^typedef struct ExprList ExprList;$/;"	t	typeref:struct:ExprList	file:
ExprList_item	sqlite/sqlite3.c	/^  struct ExprList_item { \/* For each expression in the list *\/$/;"	s	struct:ExprList	file:
ExprSetProperty	sqlite/sqlite3.c	/^#define ExprSetProperty(/;"	d	file:
ExprSetVVAProperty	sqlite/sqlite3.c	/^# define ExprSetVVAProperty(/;"	d	file:
ExprSpan	sqlite/sqlite3.c	/^struct ExprSpan {$/;"	s	file:
ExprSpan	sqlite/sqlite3.c	/^typedef struct ExprSpan ExprSpan;$/;"	t	typeref:struct:ExprSpan	file:
ExpressionException	include/common/exception.h	/^  ExpressionException(std::string msg)$/;"	f	class:cmudb::ExpressionException
ExpressionException	include/common/exception.h	/^class ExpressionException : public Exception {$/;"	c	namespace:cmudb
ExtendibleHash	hash/extendible_hash.cpp	/^ExtendibleHash<K, V>::ExtendibleHash(size_t size)$/;"	f	class:cmudb::ExtendibleHash
ExtendibleHash	hash/extendible_hash.cpp	/^template class ExtendibleHash<Page *, std::list<Page *>::iterator>;$/;"	v	namespace:cmudb	typeref:typename:class
ExtendibleHash	hash/extendible_hash.cpp	/^template class ExtendibleHash<int, int>;$/;"	v	namespace:cmudb	typeref:typename:class
ExtendibleHash	hash/extendible_hash.cpp	/^template class ExtendibleHash<int, std::list<int>::iterator>;$/;"	v	namespace:cmudb	typeref:typename:class
ExtendibleHash	hash/extendible_hash.cpp	/^template class ExtendibleHash<int, std::string>;$/;"	v	namespace:cmudb	typeref:typename:class
ExtendibleHash	hash/extendible_hash.cpp	/^template class ExtendibleHash<page_id_t, Page *>;$/;"	v	namespace:cmudb	typeref:typename:class
ExtendibleHash	include/hash/extendible_hash.h	/^class ExtendibleHash : public HashTable<K, V> {$/;"	c	namespace:cmudb
FKey	sqlite/sqlite3.c	/^struct FKey {$/;"	s	file:
FKey	sqlite/sqlite3.c	/^typedef struct FKey FKey;$/;"	t	typeref:struct:FKey	file:
FLT_LOWEST	include/type/limits.h	/^static const double FLT_LOWEST = std::numeric_limits<float>::lowest();$/;"	v	namespace:cmudb	typeref:typename:const double
FOREGUARD	sqlite/sqlite3.c	/^#define FOREGUARD /;"	d	file:
FTS5_TOKENIZE_AUX	include/sqlite/sqlite3.h	/^#define FTS5_TOKENIZE_AUX /;"	d
FTS5_TOKENIZE_AUX	sqlite/sqlite3.c	/^#define FTS5_TOKENIZE_AUX /;"	d	file:
FTS5_TOKENIZE_DOCUMENT	include/sqlite/sqlite3.h	/^#define FTS5_TOKENIZE_DOCUMENT /;"	d
FTS5_TOKENIZE_DOCUMENT	sqlite/sqlite3.c	/^#define FTS5_TOKENIZE_DOCUMENT /;"	d	file:
FTS5_TOKENIZE_PREFIX	include/sqlite/sqlite3.h	/^#define FTS5_TOKENIZE_PREFIX /;"	d
FTS5_TOKENIZE_PREFIX	sqlite/sqlite3.c	/^#define FTS5_TOKENIZE_PREFIX /;"	d	file:
FTS5_TOKENIZE_QUERY	include/sqlite/sqlite3.h	/^#define FTS5_TOKENIZE_QUERY /;"	d
FTS5_TOKENIZE_QUERY	sqlite/sqlite3.c	/^#define FTS5_TOKENIZE_QUERY /;"	d	file:
FTS5_TOKEN_COLOCATED	include/sqlite/sqlite3.h	/^#define FTS5_TOKEN_COLOCATED /;"	d
FTS5_TOKEN_COLOCATED	sqlite/sqlite3.c	/^#define FTS5_TOKEN_COLOCATED /;"	d	file:
FULLY_WITHIN	include/sqlite/sqlite3.h	/^#define FULLY_WITHIN /;"	d
FULLY_WITHIN	sqlite/sqlite3.c	/^#define FULLY_WITHIN /;"	d	file:
FUNCTION	sqlite/sqlite3.c	/^#define FUNCTION(/;"	d	file:
FUNCTION2	sqlite/sqlite3.c	/^#define FUNCTION2(/;"	d	file:
FetchPage	buffer/buffer_pool_manager.cpp	/^Page *BufferPoolManager::FetchPage(page_id_t page_id) { return nullptr; }$/;"	f	class:cmudb::BufferPoolManager	typeref:typename:Page *
FindLeafPage	index/b_plus_tree.cpp	/^B_PLUS_TREE_LEAF_PAGE_TYPE *BPLUSTREE_TYPE::FindLeafPage(const KeyType &key,$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS B_PLUS_TREE_LEAF_PAGE_TYPE *
FindRecord	page/header_page.cpp	/^int HeaderPage::FindRecord(const std::string &name) {$/;"	f	class:cmudb::HeaderPage	typeref:typename:int
FlushPage	buffer/buffer_pool_manager.cpp	/^bool BufferPoolManager::FlushPage(page_id_t page_id) { return false; }$/;"	f	class:cmudb::BufferPoolManager	typeref:typename:bool
Fts5Context	include/sqlite/sqlite3.h	/^typedef struct Fts5Context Fts5Context;$/;"	t	typeref:struct:Fts5Context
Fts5Context	sqlite/sqlite3.c	/^typedef struct Fts5Context Fts5Context;$/;"	t	typeref:struct:Fts5Context	file:
Fts5ExtensionApi	include/sqlite/sqlite3.h	/^struct Fts5ExtensionApi {$/;"	s
Fts5ExtensionApi	include/sqlite/sqlite3.h	/^typedef struct Fts5ExtensionApi Fts5ExtensionApi;$/;"	t	typeref:struct:Fts5ExtensionApi
Fts5ExtensionApi	sqlite/sqlite3.c	/^struct Fts5ExtensionApi {$/;"	s	file:
Fts5ExtensionApi	sqlite/sqlite3.c	/^typedef struct Fts5ExtensionApi Fts5ExtensionApi;$/;"	t	typeref:struct:Fts5ExtensionApi	file:
Fts5PhraseIter	include/sqlite/sqlite3.h	/^struct Fts5PhraseIter {$/;"	s
Fts5PhraseIter	include/sqlite/sqlite3.h	/^typedef struct Fts5PhraseIter Fts5PhraseIter;$/;"	t	typeref:struct:Fts5PhraseIter
Fts5PhraseIter	sqlite/sqlite3.c	/^struct Fts5PhraseIter {$/;"	s	file:
Fts5PhraseIter	sqlite/sqlite3.c	/^typedef struct Fts5PhraseIter Fts5PhraseIter;$/;"	t	typeref:struct:Fts5PhraseIter	file:
Fts5Tokenizer	include/sqlite/sqlite3.h	/^typedef struct Fts5Tokenizer Fts5Tokenizer;$/;"	t	typeref:struct:Fts5Tokenizer
Fts5Tokenizer	sqlite/sqlite3.c	/^typedef struct Fts5Tokenizer Fts5Tokenizer;$/;"	t	typeref:struct:Fts5Tokenizer	file:
FuncDef	sqlite/sqlite3.c	/^struct FuncDef {$/;"	s	file:
FuncDef	sqlite/sqlite3.c	/^typedef struct FuncDef FuncDef;$/;"	t	typeref:struct:FuncDef	file:
FuncDefHash	sqlite/sqlite3.c	/^struct FuncDefHash {$/;"	s	file:
FuncDefHash	sqlite/sqlite3.c	/^typedef struct FuncDefHash FuncDefHash;$/;"	t	typeref:struct:FuncDefHash	file:
FuncDestructor	sqlite/sqlite3.c	/^struct FuncDestructor {$/;"	s	file:
FuncDestructor	sqlite/sqlite3.c	/^typedef struct FuncDestructor FuncDestructor;$/;"	t	typeref:struct:FuncDestructor	file:
GCC_VERSION	sqlite/sqlite3.c	/^# define GCC_VERSION /;"	d	file:
GETPROCTIMES	sqlite/shell.c	/^typedef BOOL (WINAPI *GETPROCTIMES)(HANDLE, LPFILETIME, LPFILETIME,$/;"	t	typeref:typename:BOOL (WINAPI *)(HANDLE,LPFILETIME,LPFILETIME,LPFILETIME,LPFILETIME)	file:
GLOBAL	sqlite/sqlite3.c	/^  #define GLOBAL(/;"	d	file:
GROWING	include/concurrency/transaction.h	/^enum class TransactionState { GROWING, SHRINKING, COMMITTED, ABORTED };$/;"	e	enum:cmudb::TransactionState
GenericComparator	include/index/generic_key.h	/^  GenericComparator(Schema *key_schema) : key_schema_(key_schema) {}$/;"	f	class:cmudb::GenericComparator
GenericComparator	include/index/generic_key.h	/^  GenericComparator(const GenericComparator &other) {$/;"	f	class:cmudb::GenericComparator
GenericComparator	include/index/generic_key.h	/^template <size_t KeySize> class GenericComparator {$/;"	c	namespace:cmudb
GenericKey	include/index/generic_key.h	/^template <size_t KeySize> class GenericKey {$/;"	c	namespace:cmudb
Get	include/common/rid.h	/^  inline int64_t Get() const { return ((int64_t)page_id_) << 32 | slot_num_; }$/;"	f	class:cmudb::RID	typeref:typename:int64_t
GetAppropriateLength	include/catalog/schema.h	/^  inline int32_t GetAppropriateLength(const int column_id) const {$/;"	f	class:cmudb::Schema	typeref:typename:int32_t
GetAs	include/type/value.h	/^  template <class T> inline T GetAs() const {$/;"	f	class:cmudb::Value	typeref:typename:T
GetCmpBool	include/type/value.h	/^inline CmpBool GetCmpBool(bool boolean) {$/;"	f	namespace:cmudb	typeref:typename:CmpBool
GetColumn	include/catalog/schema.h	/^  inline const Column GetColumn(const int column_id) const {$/;"	f	class:cmudb::Schema	typeref:typename:const Column
GetColumnCount	include/catalog/schema.h	/^  inline int GetColumnCount() const { return static_cast<int>(columns.size()); }$/;"	f	class:cmudb::Schema	typeref:typename:int
GetColumnID	include/catalog/schema.h	/^  inline int GetColumnID(std::string col_name) const {$/;"	f	class:cmudb::Schema	typeref:typename:int
GetColumns	include/catalog/schema.h	/^  inline const std::vector<Column> &GetColumns() const { return columns; }$/;"	f	class:cmudb::Schema	typeref:typename:const std::vector<Column> &
GetCurrentRid	include/vtable/virtual_table.h	/^  inline int64_t GetCurrentRid() {$/;"	f	class:cmudb::Cursor	typeref:typename:int64_t
GetCurrentValue	include/vtable/virtual_table.h	/^  inline Value GetCurrentValue(Schema *schema, int column) {$/;"	f	class:cmudb::Cursor	typeref:typename:Value
GetData	include/page/page.h	/^  inline char *GetData() { return data_; }$/;"	f	class:cmudb::Page	typeref:typename:char *
GetData	include/table/tuple.h	/^  inline char *GetData() const { return data_; }$/;"	f	class:cmudb::Tuple	typeref:typename:char *
GetData	include/type/value.h	/^  inline const char *GetData() const {$/;"	f	class:cmudb::Value	typeref:typename:const char *
GetData	type/type.cpp	/^char *Type::GetData(char *storage __attribute__((unused))) {$/;"	f	class:cmudb::Type	typeref:typename:char *
GetData	type/type.cpp	/^const char *Type::GetData(const Value &val __attribute__((unused))) const {$/;"	f	class:cmudb::Type	typeref:typename:const char *
GetData	type/varlen_type.cpp	/^const char *VarlenType::GetData(const Value &val) const {$/;"	f	class:cmudb::VarlenType	typeref:typename:const char *
GetDataPtr	table/tuple.cpp	/^const char *Tuple::GetDataPtr(Schema *schema, const int column_id) const {$/;"	f	class:cmudb::Tuple	typeref:typename:const char *
GetDeleteRID	include/logging/log_record.h	/^  inline RID &GetDeleteRID() { return delete_rid_; }$/;"	f	class:cmudb::LogRecord	typeref:typename:RID &
GetDeletedPageSet	include/concurrency/transaction.h	/^  inline std::shared_ptr<std::unordered_set<page_id_t>> GetDeletedPageSet() {$/;"	f	class:cmudb::Transaction	typeref:typename:std::shared_ptr<std::unordered_set<page_id_t>>
GetExclusiveLockSet	include/concurrency/transaction.h	/^  inline std::shared_ptr<std::unordered_set<RID>> GetExclusiveLockSet() {$/;"	f	class:cmudb::Transaction	typeref:typename:std::shared_ptr<std::unordered_set<RID>>
GetFileSize	disk/disk_manager.cpp	/^int DiskManager::GetFileSize(const std::string &file_name) {$/;"	f	class:cmudb::DiskManager	typeref:typename:int
GetFirstPageId	include/table/table_heap.h	/^  inline page_id_t GetFirstPageId() const { return first_page_id_; }$/;"	f	class:cmudb::TableHeap	typeref:typename:page_id_t
GetFirstPageId	include/vtable/virtual_table.h	/^  inline page_id_t GetFirstPageId() { return table_heap_->GetFirstPageId(); }$/;"	f	class:cmudb::VirtualTable	typeref:typename:page_id_t
GetFirstTupleRid	page/table_page.cpp	/^bool TablePage::GetFirstTupleRid(RID &first_rid) {$/;"	f	class:cmudb::TablePage	typeref:typename:bool
GetFixedLength	include/catalog/column.h	/^  int32_t GetFixedLength() const { return fixed_length; }$/;"	f	class:cmudb::Column	typeref:typename:int32_t
GetFlushState	disk/disk_manager.cpp	/^bool DiskManager::GetFlushState() const { return flush_log_; }$/;"	f	class:cmudb::DiskManager	typeref:typename:bool
GetFreeSpacePointer	page/table_page.cpp	/^int32_t TablePage::GetFreeSpacePointer() {$/;"	f	class:cmudb::TablePage	typeref:typename:int32_t
GetFreeSpaceSize	page/table_page.cpp	/^int32_t TablePage::GetFreeSpaceSize() {$/;"	f	class:cmudb::TablePage	typeref:typename:int32_t
GetGlobalDepth	hash/extendible_hash.cpp	/^int ExtendibleHash<K, V>::GetGlobalDepth() const {$/;"	f	class:cmudb::ExtendibleHash	typeref:typename:int
GetIndex	include/vtable/virtual_table.h	/^  inline Index *GetIndex() { return index_; }$/;"	f	class:cmudb::VirtualTable	typeref:typename:Index *
GetIndexColumnCount	include/index/index.h	/^  int GetIndexColumnCount() const { return (int)key_attrs_.size(); }$/;"	f	class:cmudb::IndexMetadata	typeref:typename:int
GetIndexColumnCount	include/index/index.h	/^  int GetIndexColumnCount() const { return metadata_->GetIndexColumnCount(); }$/;"	f	class:cmudb::Index	typeref:typename:int
GetInsertRID	include/logging/log_record.h	/^  inline RID &GetInsertRID() { return insert_rid_; }$/;"	f	class:cmudb::LogRecord	typeref:typename:RID &
GetInserteTuple	include/logging/log_record.h	/^  inline Tuple &GetInserteTuple() { return insert_tuple_; }$/;"	f	class:cmudb::LogRecord	typeref:typename:Tuple &
GetInstance	include/type/type.h	/^  inline static Type *GetInstance(TypeId type_id) { return kTypes[type_id]; }$/;"	f	class:cmudb::Type	typeref:typename:Type *
GetItem	page/b_plus_tree_leaf_page.cpp	/^const MappingType &B_PLUS_TREE_LEAF_PAGE_TYPE::GetItem(int index) {$/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS const MappingType &
GetKeyAttrs	include/index/index.h	/^  const std::vector<int> &GetKeyAttrs() const {$/;"	f	class:cmudb::Index	typeref:typename:const std::vector<int> &
GetKeyAttrs	include/index/index.h	/^  inline const std::vector<int> &GetKeyAttrs() const { return key_attrs_; }$/;"	f	class:cmudb::IndexMetadata	typeref:typename:const std::vector<int> &
GetKeySchema	include/index/index.h	/^  Schema *GetKeySchema() const { return metadata_->GetKeySchema(); }$/;"	f	class:cmudb::Index	typeref:typename:Schema *
GetKeySchema	include/index/index.h	/^  inline Schema *GetKeySchema() const { return key_schema_; }$/;"	f	class:cmudb::IndexMetadata	typeref:typename:Schema *
GetKeySchema	include/vtable/virtual_table.h	/^  inline Schema *GetKeySchema() {$/;"	f	class:cmudb::Cursor	typeref:typename:Schema *
GetLSN	include/logging/log_record.h	/^  inline lsn_t GetLSN() { return lsn_; }$/;"	f	class:cmudb::LogRecord	typeref:typename:lsn_t
GetLSN	include/page/page.h	/^  inline lsn_t GetLSN() { return *reinterpret_cast<lsn_t *>(GetData() + 4); }$/;"	f	class:cmudb::Page	typeref:typename:lsn_t
GetLength	include/catalog/column.h	/^  int32_t GetLength() const {$/;"	f	class:cmudb::Column	typeref:typename:int32_t
GetLength	include/catalog/schema.h	/^  inline int32_t GetLength() const { return length; }$/;"	f	class:cmudb::Schema	typeref:typename:int32_t
GetLength	include/catalog/schema.h	/^  inline int32_t GetLength(const int column_id) const {$/;"	f	class:cmudb::Schema	typeref:typename:int32_t
GetLength	include/table/tuple.h	/^  inline int32_t GetLength() const { return size_; }$/;"	f	class:cmudb::Tuple	typeref:typename:int32_t
GetLength	include/type/value.h	/^  inline uint32_t GetLength() const {$/;"	f	class:cmudb::Value	typeref:typename:uint32_t
GetLength	type/type.cpp	/^uint32_t Type::GetLength(const Value &val __attribute__((unused))) const {$/;"	f	class:cmudb::Type	typeref:typename:uint32_t
GetLength	type/varlen_type.cpp	/^uint32_t VarlenType::GetLength(const Value &val) const { return val.size_.len; }$/;"	f	class:cmudb::VarlenType	typeref:typename:uint32_t
GetLocalDepth	hash/extendible_hash.cpp	/^int ExtendibleHash<K, V>::GetLocalDepth(int bucket_id) const {$/;"	f	class:cmudb::ExtendibleHash	typeref:typename:int
GetLogBuffer	include/logging/log_manager.h	/^  inline char *GetLogBuffer() { return log_buffer_; }$/;"	f	class:cmudb::LogManager	typeref:typename:char *
GetLogRecordType	include/logging/log_record.h	/^  inline LogRecordType &GetLogRecordType() { return log_record_type_; }$/;"	f	class:cmudb::LogRecord	typeref:typename:LogRecordType &
GetMaxSize	page/b_plus_tree_page.cpp	/^int BPlusTreePage::GetMaxSize() const { return 0; }$/;"	f	class:cmudb::BPlusTreePage	typeref:typename:int
GetMaxValue	type/type.cpp	/^Value Type::GetMaxValue(TypeId type_id) {$/;"	f	class:cmudb::Type	typeref:typename:Value
GetMetadata	include/index/index.h	/^  IndexMetadata *GetMetadata() const { return metadata_; }$/;"	f	class:cmudb::Index	typeref:typename:IndexMetadata *
GetMinSize	page/b_plus_tree_page.cpp	/^int BPlusTreePage::GetMinSize() const { return 0; }$/;"	f	class:cmudb::BPlusTreePage	typeref:typename:int
GetMinValue	type/type.cpp	/^Value Type::GetMinValue(TypeId type_id) {$/;"	f	class:cmudb::Type	typeref:typename:Value
GetName	include/catalog/column.h	/^  std::string GetName() const { return column_name; }$/;"	f	class:cmudb::Column	typeref:typename:std::string
GetName	include/index/index.h	/^  const std::string &GetName() const { return metadata_->GetName(); }$/;"	f	class:cmudb::Index	typeref:typename:const std::string &
GetName	include/index/index.h	/^  inline const std::string &GetName() const { return name_; }$/;"	f	class:cmudb::IndexMetadata	typeref:typename:const std::string &
GetNewPageRecord	include/logging/log_record.h	/^  inline page_id_t GetNewPageRecord() { return prev_page_id_; }$/;"	f	class:cmudb::LogRecord	typeref:typename:page_id_t
GetNextPageId	page/b_plus_tree_leaf_page.cpp	/^page_id_t B_PLUS_TREE_LEAF_PAGE_TYPE::GetNextPageId() const {$/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS page_id_t
GetNextPageId	page/table_page.cpp	/^page_id_t TablePage::GetNextPageId() {$/;"	f	class:cmudb::TablePage	typeref:typename:page_id_t
GetNextTupleRid	page/table_page.cpp	/^bool TablePage::GetNextTupleRid(const RID &cur_rid, RID &next_rid) {$/;"	f	class:cmudb::TablePage	typeref:typename:bool
GetNumBuckets	hash/extendible_hash.cpp	/^int ExtendibleHash<K, V>::GetNumBuckets() const {$/;"	f	class:cmudb::ExtendibleHash	typeref:typename:int
GetNumFlushes	disk/disk_manager.cpp	/^int DiskManager::GetNumFlushes() const { return num_flushes_; }$/;"	f	class:cmudb::DiskManager	typeref:typename:int
GetOffset	include/catalog/column.h	/^  int32_t GetOffset() const { return column_offset; }$/;"	f	class:cmudb::Column	typeref:typename:int32_t
GetOffset	include/catalog/schema.h	/^  inline int32_t GetOffset(const int column_id) const {$/;"	f	class:cmudb::Schema	typeref:typename:int32_t
GetPageId	include/common/rid.h	/^  inline page_id_t GetPageId() const { return page_id_; }$/;"	f	class:cmudb::RID	typeref:typename:page_id_t
GetPageId	include/page/page.h	/^  inline page_id_t GetPageId() { return page_id_; }$/;"	f	class:cmudb::Page	typeref:typename:page_id_t
GetPageId	page/b_plus_tree_page.cpp	/^page_id_t BPlusTreePage::GetPageId() const { return 0; }$/;"	f	class:cmudb::BPlusTreePage	typeref:typename:page_id_t
GetPageId	page/table_page.cpp	/^page_id_t TablePage::GetPageId() {$/;"	f	class:cmudb::TablePage	typeref:typename:page_id_t
GetPageSet	include/concurrency/transaction.h	/^  inline std::shared_ptr<std::deque<Page *>> GetPageSet() { return page_set_; }$/;"	f	class:cmudb::Transaction	typeref:typename:std::shared_ptr<std::deque<Page * >>
GetParentPageId	page/b_plus_tree_page.cpp	/^page_id_t BPlusTreePage::GetParentPageId() const { return 0; }$/;"	f	class:cmudb::BPlusTreePage	typeref:typename:page_id_t
GetPersistentLSN	include/logging/log_manager.h	/^  inline lsn_t GetPersistentLSN() { return persistent_lsn_; }$/;"	f	class:cmudb::LogManager	typeref:typename:lsn_t
GetPinCount	include/page/page.h	/^  inline int GetPinCount() { return pin_count_; }$/;"	f	class:cmudb::Page	typeref:typename:int
GetPrevLSN	include/concurrency/transaction.h	/^  inline lsn_t GetPrevLSN() { return prev_lsn_; }$/;"	f	class:cmudb::Transaction	typeref:typename:lsn_t
GetPrevLSN	include/logging/log_record.h	/^  inline lsn_t GetPrevLSN() { return prev_lsn_; }$/;"	f	class:cmudb::LogRecord	typeref:typename:lsn_t
GetPrevPageId	page/table_page.cpp	/^page_id_t TablePage::GetPrevPageId() {$/;"	f	class:cmudb::TablePage	typeref:typename:page_id_t
GetRecordCount	page/header_page.cpp	/^int HeaderPage::GetRecordCount() { return *reinterpret_cast<int *>(GetData()); }$/;"	f	class:cmudb::HeaderPage	typeref:typename:int
GetRid	include/table/tuple.h	/^  inline RID GetRid() const { return rid_; }$/;"	f	class:cmudb::Tuple	typeref:typename:RID
GetRootId	page/header_page.cpp	/^bool HeaderPage::GetRootId(const std::string &name, page_id_t &root_id) {$/;"	f	class:cmudb::HeaderPage	typeref:typename:bool
GetSchema	include/vtable/virtual_table.h	/^  inline Schema *GetSchema() { return schema_; }$/;"	f	class:cmudb::VirtualTable	typeref:typename:Schema *
GetSharedLockSet	include/concurrency/transaction.h	/^  inline std::shared_ptr<std::unordered_set<RID>> GetSharedLockSet() {$/;"	f	class:cmudb::Transaction	typeref:typename:std::shared_ptr<std::unordered_set<RID>>
GetSize	include/logging/log_record.h	/^  inline int32_t GetSize() { return size_; }$/;"	f	class:cmudb::LogRecord	typeref:typename:int32_t
GetSize	page/b_plus_tree_page.cpp	/^int BPlusTreePage::GetSize() const { return 0; }$/;"	f	class:cmudb::BPlusTreePage	typeref:typename:int
GetSlotNum	include/common/rid.h	/^  inline int GetSlotNum() const { return slot_num_; }$/;"	f	class:cmudb::RID	typeref:typename:int
GetState	include/concurrency/transaction.h	/^  inline TransactionState GetState() { return state_; }$/;"	f	class:cmudb::Transaction	typeref:typename:TransactionState
GetTableHeap	include/vtable/virtual_table.h	/^  inline TableHeap *GetTableHeap() { return table_heap_; }$/;"	f	class:cmudb::VirtualTable	typeref:typename:TableHeap *
GetTableName	include/index/index.h	/^  inline const std::string &GetTableName() { return table_name_; }$/;"	f	class:cmudb::IndexMetadata	typeref:typename:const std::string &
GetThreadId	include/concurrency/transaction.h	/^  inline std::thread::id GetThreadId() const { return thread_id_; }$/;"	f	class:cmudb::Transaction	typeref:typename:std::thread::id
GetTransaction	vtable/virtual_table.cpp	/^Transaction *GetTransaction() { return global_transaction_; }$/;"	f	namespace:cmudb	typeref:typename:Transaction *
GetTransactionId	include/concurrency/transaction.h	/^  inline txn_id_t GetTransactionId() const { return txn_id_; }$/;"	f	class:cmudb::Transaction	typeref:typename:txn_id_t
GetTuple	page/table_page.cpp	/^bool TablePage::GetTuple(const RID &rid, Tuple &tuple, Transaction *txn,$/;"	f	class:cmudb::TablePage	typeref:typename:bool
GetTuple	table/table_heap.cpp	/^bool TableHeap::GetTuple(const RID &rid, Tuple &tuple, Transaction *txn) {$/;"	f	class:cmudb::TableHeap	typeref:typename:bool
GetTupleCount	page/table_page.cpp	/^int32_t TablePage::GetTupleCount() {$/;"	f	class:cmudb::TablePage	typeref:typename:int32_t
GetTupleOffset	page/table_page.cpp	/^int32_t TablePage::GetTupleOffset(int slot_num) {$/;"	f	class:cmudb::TablePage	typeref:typename:int32_t
GetTupleSize	page/table_page.cpp	/^int32_t TablePage::GetTupleSize(int slot_num) {$/;"	f	class:cmudb::TablePage	typeref:typename:int32_t
GetTxnId	include/logging/log_record.h	/^  inline txn_id_t GetTxnId() { return txn_id_; }$/;"	f	class:cmudb::LogRecord	typeref:typename:txn_id_t
GetType	include/catalog/column.h	/^  inline TypeId GetType() const { return column_type; }$/;"	f	class:cmudb::Column	typeref:typename:TypeId
GetType	include/catalog/schema.h	/^  inline TypeId GetType(const int column_id) const {$/;"	f	class:cmudb::Schema	typeref:typename:TypeId
GetTypeId	include/type/type.h	/^  inline TypeId GetTypeId() const { return type_id_; }$/;"	f	class:cmudb::Type	typeref:typename:TypeId
GetTypeId	include/type/value.h	/^  inline TypeId GetTypeId() const { return type_id_; }$/;"	f	class:cmudb::Value	typeref:typename:TypeId
GetTypeSize	type/type.cpp	/^uint64_t Type::GetTypeSize(const TypeId type_id) {$/;"	f	class:cmudb::Type	typeref:typename:uint64_t
GetUnlinedColumnCount	include/catalog/schema.h	/^  inline int GetUnlinedColumnCount() const {$/;"	f	class:cmudb::Schema	typeref:typename:int
GetUnlinedColumns	include/catalog/schema.h	/^  inline const std::vector<int> &GetUnlinedColumns() const {$/;"	f	class:cmudb::Schema	typeref:typename:const std::vector<int> &
GetValue	index/b_plus_tree.cpp	/^bool BPLUSTREE_TYPE::GetValue(const KeyType &key,$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS bool
GetValue	table/tuple.cpp	/^Value Tuple::GetValue(Schema *schema, const int column_id) const {$/;"	f	class:cmudb::Tuple	typeref:typename:Value
GetVariableLength	include/catalog/column.h	/^  int32_t GetVariableLength() const { return variable_length; }$/;"	f	class:cmudb::Column	typeref:typename:int32_t
GetVariableLength	include/catalog/schema.h	/^  inline int32_t GetVariableLength(const int column_id) const {$/;"	f	class:cmudb::Schema	typeref:typename:int32_t
GetVirtualTable	include/vtable/virtual_table.h	/^  inline VirtualTable *GetVirtualTable() { return virtual_table_; }$/;"	f	class:cmudb::Cursor	typeref:typename:VirtualTable *
GetWriteSet	include/concurrency/transaction.h	/^  inline std::shared_ptr<std::deque<WriteRecord>> GetWriteSet() {$/;"	f	class:cmudb::Transaction	typeref:typename:std::shared_ptr<std::deque<WriteRecord>>
HAS_TIMER	sqlite/shell.c	/^#define HAS_TIMER /;"	d	file:
HAVE_FCHOWN	sqlite/sqlite3.c	/^#define HAVE_FCHOWN /;"	d	file:
HAVE_LOCALTIME_S	sqlite/sqlite3.c	/^#define HAVE_LOCALTIME_S /;"	d	file:
HAVE_LSTAT	sqlite/sqlite3.c	/^#define HAVE_LSTAT /;"	d	file:
HAVE_READLINK	sqlite/sqlite3.c	/^#define HAVE_READLINK /;"	d	file:
HAVE_UTIME	sqlite/sqlite3.c	/^#define HAVE_UTIME /;"	d	file:
HEADER_PAGE_ID	include/common/config.h	/^#define HEADER_PAGE_ID /;"	d
HEADER_SIZE	include/logging/log_record.h	/^  const static int HEADER_SIZE = 20;$/;"	m	class:cmudb::LogRecord	typeref:typename:const int
HSTOREDEBUGLOG_H	include/common/logger.h	/^#define HSTOREDEBUGLOG_H$/;"	d
HasFlushLogFuture	include/disk/disk_manager.h	/^  inline bool HasFlushLogFuture() { return flush_log_f_ != nullptr; }$/;"	f	class:cmudb::DiskManager	typeref:typename:bool
HasRowid	sqlite/sqlite3.c	/^#define HasRowid(/;"	d	file:
Hash	sqlite/sqlite3.c	/^struct Hash {$/;"	s	file:
Hash	sqlite/sqlite3.c	/^typedef struct Hash Hash;$/;"	t	typeref:struct:Hash	file:
HashElem	sqlite/sqlite3.c	/^struct HashElem {$/;"	s	file:
HashElem	sqlite/sqlite3.c	/^typedef struct HashElem HashElem;$/;"	t	typeref:struct:HashElem	file:
HashKey	hash/extendible_hash.cpp	/^size_t ExtendibleHash<K, V>::HashKey(const K &key) {$/;"	f	class:cmudb::ExtendibleHash	typeref:typename:size_t
HashTable	include/hash/hash_table.h	/^  HashTable() {}$/;"	f	class:cmudb::HashTable
HashTable	include/hash/hash_table.h	/^template <typename K, typename V> class HashTable {$/;"	c	namespace:cmudb
HeaderPage	include/page/header_page.h	/^class HeaderPage : public Page {$/;"	c	namespace:cmudb
INDEXITERATOR_TYPE	include/index/index_iterator.h	/^#define INDEXITERATOR_TYPE /;"	d
INDEX_TEMPLATE_ARGUMENTS	include/page/b_plus_tree_page.h	/^#define INDEX_TEMPLATE_ARGUMENTS /;"	d
INSERT	include/concurrency/transaction.h	/^enum class WType { INSERT = 0, DELETE, UPDATE };$/;"	e	enum:cmudb::WType
INSERT	include/logging/log_record.h	/^  INSERT,$/;"	e	enum:cmudb::LogRecordType
INT16_TYPE	sqlite/sqlite3.c	/^#  define INT16_TYPE /;"	d	file:
INT8_TYPE	sqlite/sqlite3.c	/^#  define INT8_TYPE /;"	d	file:
INTEGER	include/type/type_id.h	/^  INTEGER,$/;"	e	enum:cmudb::TypeId
INTERNAL_PAGE	include/page/b_plus_tree_page.h	/^enum class IndexPageType { INVALID_INDEX_PAGE = 0, LEAF_PAGE, INTERNAL_PAGE };$/;"	e	enum:cmudb::IndexPageType
INT_464269060799999	sqlite/sqlite3.c	/^#define INT_464269060799999 /;"	d	file:
INT_COMPARE_FUNC	type/integer_type.cpp	/^#define INT_COMPARE_FUNC(/;"	d	file:
INT_MODIFY_FUNC	type/integer_type.cpp	/^#define INT_MODIFY_FUNC(/;"	d	file:
INVALID	include/logging/log_record.h	/^  INVALID = 0,$/;"	e	enum:cmudb::LogRecordType
INVALID	include/type/type_id.h	/^  INVALID = 0,$/;"	e	enum:cmudb::TypeId
INVALID_INDEX_PAGE	include/page/b_plus_tree_page.h	/^enum class IndexPageType { INVALID_INDEX_PAGE = 0, LEAF_PAGE, INTERNAL_PAGE };$/;"	e	enum:cmudb::IndexPageType
INVALID_LSN	include/common/config.h	/^#define INVALID_LSN /;"	d
INVALID_PAGE_ID	include/common/config.h	/^#define INVALID_PAGE_ID /;"	d
INVALID_TXN_ID	include/common/config.h	/^#define INVALID_TXN_ID /;"	d
IN_DECLARE_VTAB	sqlite/sqlite3.c	/^  #define IN_DECLARE_VTAB /;"	d	file:
IN_INDEX_EPH	sqlite/sqlite3.c	/^#define IN_INDEX_EPH /;"	d	file:
IN_INDEX_INDEX_ASC	sqlite/sqlite3.c	/^#define IN_INDEX_INDEX_ASC /;"	d	file:
IN_INDEX_INDEX_DESC	sqlite/sqlite3.c	/^#define IN_INDEX_INDEX_DESC /;"	d	file:
IN_INDEX_LOOP	sqlite/sqlite3.c	/^#define IN_INDEX_LOOP /;"	d	file:
IN_INDEX_MEMBERSHIP	sqlite/sqlite3.c	/^#define IN_INDEX_MEMBERSHIP /;"	d	file:
IN_INDEX_NOOP	sqlite/sqlite3.c	/^#define IN_INDEX_NOOP /;"	d	file:
IN_INDEX_NOOP_OK	sqlite/sqlite3.c	/^#define IN_INDEX_NOOP_OK /;"	d	file:
IN_INDEX_ROWID	sqlite/sqlite3.c	/^#define IN_INDEX_ROWID /;"	d	file:
IOTRACE	sqlite/sqlite3.c	/^# define IOTRACE(/;"	d	file:
IS_BIG_INT	sqlite/sqlite3.c	/^#define IS_BIG_INT(/;"	d	file:
IdList	sqlite/sqlite3.c	/^struct IdList {$/;"	s	file:
IdList	sqlite/sqlite3.c	/^typedef struct IdList IdList;$/;"	t	typeref:struct:IdList	file:
IdList_item	sqlite/sqlite3.c	/^  struct IdList_item {$/;"	s	struct:IdList	file:
IgnorableOrderby	sqlite/sqlite3.c	/^#define IgnorableOrderby(/;"	d	file:
ImportCtx	sqlite/shell.c	/^struct ImportCtx {$/;"	s	file:
ImportCtx	sqlite/shell.c	/^typedef struct ImportCtx ImportCtx;$/;"	t	typeref:struct:ImportCtx	file:
IncompatibleTypeException	include/common/exception.h	/^  IncompatibleTypeException(int type, std::string msg)$/;"	f	class:cmudb::IncompatibleTypeException
IncompatibleTypeException	include/common/exception.h	/^class IncompatibleTypeException : public Exception {$/;"	c	namespace:cmudb
IncreaseSize	page/b_plus_tree_page.cpp	/^void BPlusTreePage::IncreaseSize(int amount) {}$/;"	f	class:cmudb::BPlusTreePage	typeref:typename:void
Index	include/index/index.h	/^  Index(IndexMetadata *metadata) : metadata_(metadata) {}$/;"	f	class:cmudb::Index
Index	include/index/index.h	/^class Index {$/;"	c	namespace:cmudb
Index	sqlite/sqlite3.c	/^struct Index {$/;"	s	file:
Index	sqlite/sqlite3.c	/^typedef struct Index Index;$/;"	t	typeref:struct:Index	file:
IndexException	include/common/exception.h	/^  IndexException(std::string msg) : Exception(EXCEPTION_TYPE_INDEX, msg) {}$/;"	f	class:cmudb::IndexException
IndexException	include/common/exception.h	/^class IndexException : public Exception {$/;"	c	namespace:cmudb
IndexIterator	include/index/index_iterator.h	/^class IndexIterator {$/;"	c	namespace:cmudb
IndexIterator	index/index_iterator.cpp	/^INDEXITERATOR_TYPE::IndexIterator() {}$/;"	f	class:cmudb::INDEXITERATOR_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS
IndexMetadata	include/index/index.h	/^  IndexMetadata(std::string index_name, std::string table_name,$/;"	f	class:cmudb::IndexMetadata
IndexMetadata	include/index/index.h	/^class IndexMetadata {$/;"	c	namespace:cmudb
IndexPageType	include/page/b_plus_tree_page.h	/^enum class IndexPageType { INVALID_INDEX_PAGE = 0, LEAF_PAGE, INTERNAL_PAGE };$/;"	g	namespace:cmudb
IndexSample	sqlite/sqlite3.c	/^struct IndexSample {$/;"	s	file:
IndexSample	sqlite/sqlite3.c	/^typedef struct IndexSample IndexSample;$/;"	t	typeref:struct:IndexSample	file:
Init	include/page/header_page.h	/^  void Init() { SetRecordCount(0); }$/;"	f	class:cmudb::HeaderPage	typeref:typename:void
Init	page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::Init(page_id_t page_id,$/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
Init	page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::Init(page_id_t page_id, page_id_t parent_id) {}$/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
Init	page/table_page.cpp	/^void TablePage::Init(page_id_t page_id, size_t page_size,$/;"	f	class:cmudb::TablePage	typeref:typename:void
InitData	sqlite/sqlite3.c	/^} InitData;$/;"	t	typeref:struct:__anon76f104fc1908	file:
Insert	buffer/lru_replacer.cpp	/^template <typename T> void LRUReplacer<T>::Insert(const T &value) {$/;"	f	class:cmudb::LRUReplacer	typeref:typename:void
Insert	hash/extendible_hash.cpp	/^void ExtendibleHash<K, V>::Insert(const K &key, const V &value) {$/;"	f	class:cmudb::ExtendibleHash	typeref:typename:void
Insert	index/b_plus_tree.cpp	/^bool BPLUSTREE_TYPE::Insert(const KeyType &key, const ValueType &value,$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS bool
Insert	page/b_plus_tree_leaf_page.cpp	/^int B_PLUS_TREE_LEAF_PAGE_TYPE::Insert(const KeyType &key,$/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS int
InsertEntry	include/vtable/virtual_table.h	/^  inline void InsertEntry(const Tuple &tuple, const RID &rid) {$/;"	f	class:cmudb::VirtualTable	typeref:typename:void
InsertEntry	index/b_plus_tree_index.cpp	/^void BPLUSTREE_INDEX_TYPE::InsertEntry(const Tuple &key, RID rid,$/;"	f	class:cmudb::BPLUSTREE_INDEX_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
InsertFromFile	index/b_plus_tree.cpp	/^void BPLUSTREE_TYPE::InsertFromFile(const std::string &file_name,$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
InsertIntoLeaf	index/b_plus_tree.cpp	/^bool BPLUSTREE_TYPE::InsertIntoLeaf(const KeyType &key, const ValueType &value,$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS bool
InsertIntoParent	index/b_plus_tree.cpp	/^void BPLUSTREE_TYPE::InsertIntoParent(BPlusTreePage *old_node,$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
InsertNodeAfter	page/b_plus_tree_internal_page.cpp	/^int B_PLUS_TREE_INTERNAL_PAGE_TYPE::InsertNodeAfter($/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS int
InsertRecord	page/header_page.cpp	/^bool HeaderPage::InsertRecord(const std::string &name,$/;"	f	class:cmudb::HeaderPage	typeref:typename:bool
InsertTuple	include/vtable/virtual_table.h	/^  inline bool InsertTuple(const Tuple &tuple, RID &rid) {$/;"	f	class:cmudb::VirtualTable	typeref:typename:bool
InsertTuple	page/table_page.cpp	/^bool TablePage::InsertTuple(const Tuple &tuple, RID &rid, Transaction *txn,$/;"	f	class:cmudb::TablePage	typeref:typename:bool
InsertTuple	table/table_heap.cpp	/^bool TableHeap::InsertTuple(const Tuple &tuple, RID &rid, Transaction *txn) {$/;"	f	class:cmudb::TableHeap	typeref:typename:bool
IntegerParentType	include/type/integer_parent_type.h	/^class IntegerParentType : public NumericType {$/;"	c	namespace:cmudb
IntegerParentType	type/integer_parent_type.cpp	/^IntegerParentType::IntegerParentType(TypeId type) : NumericType(type) {}$/;"	f	class:cmudb::IntegerParentType
IntegerType	include/type/integer_type.h	/^class IntegerType : public IntegerParentType {$/;"	c	namespace:cmudb
IntegerType	type/integer_type.cpp	/^IntegerType::IntegerType(TypeId type) : IntegerParentType(type) {}$/;"	f	class:cmudb::IntegerType
IsAllocated	include/table/tuple.h	/^  inline bool IsAllocated() { return allocated_; }$/;"	f	class:cmudb::Tuple	typeref:typename:bool
IsCoercableFrom	type/type.cpp	/^bool Type::IsCoercableFrom(const TypeId type_id) const {$/;"	f	class:cmudb::Type	typeref:typename:bool
IsDigit	sqlite/shell.c	/^#define IsDigit(/;"	d	file:
IsEmpty	index/b_plus_tree.cpp	/^bool BPLUSTREE_TYPE::IsEmpty() const { return true; }$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS bool
IsHiddenColumn	sqlite/sqlite3.c	/^#  define IsHiddenColumn(/;"	d	file:
IsIndexScan	include/vtable/virtual_table.h	/^  inline bool IsIndexScan() { return is_index_scan_; }$/;"	f	class:cmudb::Cursor	typeref:typename:bool
IsInlined	include/catalog/column.h	/^  inline bool IsInlined() const { return is_inlined; }$/;"	f	class:cmudb::Column	typeref:typename:bool
IsInlined	include/catalog/schema.h	/^  inline bool IsInlined() const { return tuple_is_inlined; }$/;"	f	class:cmudb::Schema	typeref:typename:bool
IsInlined	include/catalog/schema.h	/^  inline bool IsInlined(const int column_id) const {$/;"	f	class:cmudb::Schema	typeref:typename:bool
IsInlined	include/type/boolean_type.h	/^  bool IsInlined(const Value &) const override { return true; }$/;"	f	class:cmudb::BooleanType	typeref:typename:bool
IsInlined	include/type/decimal_type.h	/^  bool IsInlined(const Value &) const override { return true; }$/;"	f	class:cmudb::DecimalType	typeref:typename:bool
IsInlined	include/type/integer_parent_type.h	/^  bool IsInlined(const Value &) const override { return true; }$/;"	f	class:cmudb::IntegerParentType	typeref:typename:bool
IsInlined	include/type/varlen_type.h	/^  bool IsInlined(const Value &) const override { return false; }$/;"	f	class:cmudb::VarlenType	typeref:typename:bool
IsInlined	type/type.cpp	/^bool Type::IsInlined(const Value &val __attribute__((unused))) const {$/;"	f	class:cmudb::Type	typeref:typename:bool
IsLeafPage	page/b_plus_tree_page.cpp	/^bool BPlusTreePage::IsLeafPage() const { return false; }$/;"	f	class:cmudb::BPlusTreePage	typeref:typename:bool
IsNull	include/table/tuple.h	/^  inline bool IsNull(Schema *schema, const int column_id) const {$/;"	f	class:cmudb::Tuple	typeref:typename:bool
IsNull	include/type/value.h	/^  inline bool IsNull() const { return size_.len == PELOTON_VALUE_NULL; }$/;"	f	class:cmudb::Value	typeref:typename:bool
IsOrdinaryHiddenColumn	sqlite/sqlite3.c	/^#  define IsOrdinaryHiddenColumn(/;"	d	file:
IsPowerOfTwo	sqlite/sqlite3.c	/^#define IsPowerOfTwo(/;"	d	file:
IsPrimaryKeyIndex	sqlite/sqlite3.c	/^#define IsPrimaryKeyIndex(/;"	d	file:
IsRootPage	page/b_plus_tree_page.cpp	/^bool BPlusTreePage::IsRootPage() const { return false; }$/;"	f	class:cmudb::BPlusTreePage	typeref:typename:bool
IsSpace	sqlite/shell.c	/^#define IsSpace(/;"	d	file:
IsUniqueIndex	sqlite/sqlite3.c	/^#define IsUniqueIndex(/;"	d	file:
IsVirtual	sqlite/sqlite3.c	/^#  define IsVirtual(/;"	d	file:
IsZero	include/type/value.h	/^  inline bool IsZero() const {$/;"	f	class:cmudb::Value	typeref:typename:bool
IsZero	type/bigint_type.cpp	/^bool BigintType::IsZero(const Value &val) const {$/;"	f	class:cmudb::BigintType	typeref:typename:bool
IsZero	type/decimal_type.cpp	/^bool DecimalType::IsZero(const Value &val) const {$/;"	f	class:cmudb::DecimalType	typeref:typename:bool
IsZero	type/integer_type.cpp	/^bool IntegerType::IsZero(const Value &val) const {$/;"	f	class:cmudb::IntegerType	typeref:typename:bool
IsZero	type/smallint_type.cpp	/^bool SmallintType::IsZero(const Value &val) const {$/;"	f	class:cmudb::SmallintType	typeref:typename:bool
IsZero	type/tinyint_type.cpp	/^bool TinyintType::IsZero(const Value &val) const {$/;"	f	class:cmudb::TinyintType	typeref:typename:bool
IsZero	type/type.cpp	/^bool Type::IsZero(const Value &val __attribute__((unused))) const {$/;"	f	class:cmudb::Type	typeref:typename:bool
JT_CROSS	sqlite/sqlite3.c	/^#define JT_CROSS /;"	d	file:
JT_ERROR	sqlite/sqlite3.c	/^#define JT_ERROR /;"	d	file:
JT_INNER	sqlite/sqlite3.c	/^#define JT_INNER /;"	d	file:
JT_LEFT	sqlite/sqlite3.c	/^#define JT_LEFT /;"	d	file:
JT_NATURAL	sqlite/sqlite3.c	/^#define JT_NATURAL /;"	d	file:
JT_OUTER	sqlite/sqlite3.c	/^#define JT_OUTER /;"	d	file:
JT_RIGHT	sqlite/sqlite3.c	/^#define JT_RIGHT /;"	d	file:
KeccakF1600Step	sqlite/shell.c	/^static void KeccakF1600Step(SHA3Context *p){$/;"	f	typeref:typename:void	file:
KeyAt	page/b_plus_tree_internal_page.cpp	/^KeyType B_PLUS_TREE_INTERNAL_PAGE_TYPE::KeyAt(int index) const {$/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS KeyType
KeyAt	page/b_plus_tree_leaf_page.cpp	/^KeyType B_PLUS_TREE_LEAF_PAGE_TYPE::KeyAt(int index) const {$/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS KeyType
KeyClass	sqlite/sqlite3.c	/^typedef struct KeyClass KeyClass;$/;"	t	typeref:struct:KeyClass	file:
KeyIndex	page/b_plus_tree_leaf_page.cpp	/^int B_PLUS_TREE_LEAF_PAGE_TYPE::KeyIndex($/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS int
KeyInfo	sqlite/sqlite3.c	/^struct KeyInfo {$/;"	s	file:
KeyInfo	sqlite/sqlite3.c	/^typedef struct KeyInfo KeyInfo;$/;"	t	typeref:struct:KeyInfo	file:
LARGEST_INT64	sqlite/sqlite3.c	/^#define LARGEST_INT64 /;"	d	file:
LEAF_PAGE	include/page/b_plus_tree_page.h	/^enum class IndexPageType { INVALID_INDEX_PAGE = 0, LEAF_PAGE, INTERNAL_PAGE };$/;"	e	enum:cmudb::IndexPageType
LIKEFUNC	sqlite/sqlite3.c	/^#define LIKEFUNC(/;"	d	file:
LOCATE_NOERR	sqlite/sqlite3.c	/^#define LOCATE_NOERR /;"	d	file:
LOCATE_VIEW	sqlite/sqlite3.c	/^#define LOCATE_VIEW /;"	d	file:
LOGMAX	sqlite/sqlite3.c	/^#define LOGMAX /;"	d	file:
LOG_BUFFER_SIZE	include/common/config.h	/^#define LOG_BUFFER_SIZE /;"	d
LOG_DEBUG	include/common/logger.h	/^#define LOG_DEBUG(/;"	d
LOG_DEBUG_ENABLED	include/common/logger.h	/^#define LOG_DEBUG_ENABLED$/;"	d
LOG_ERROR	include/common/logger.h	/^#define LOG_ERROR(/;"	d
LOG_ERROR_ENABLED	include/common/logger.h	/^#define LOG_ERROR_ENABLED$/;"	d
LOG_INFO	include/common/logger.h	/^#define LOG_INFO(/;"	d
LOG_INFO_ENABLED	include/common/logger.h	/^#define LOG_INFO_ENABLED$/;"	d
LOG_LEVEL	include/common/logger.h	/^#define LOG_LEVEL /;"	d
LOG_LEVEL_ALL	include/common/logger.h	/^#define LOG_LEVEL_ALL /;"	d
LOG_LEVEL_DEBUG	include/common/logger.h	/^#define LOG_LEVEL_DEBUG /;"	d
LOG_LEVEL_ERROR	include/common/logger.h	/^#define LOG_LEVEL_ERROR /;"	d
LOG_LEVEL_INFO	include/common/logger.h	/^#define LOG_LEVEL_INFO /;"	d
LOG_LEVEL_OFF	include/common/logger.h	/^#define LOG_LEVEL_OFF /;"	d
LOG_LEVEL_TRACE	include/common/logger.h	/^#define LOG_LEVEL_TRACE /;"	d
LOG_LEVEL_WARN	include/common/logger.h	/^#define LOG_LEVEL_WARN /;"	d
LOG_LOG_TIME_FORMAT	include/common/logger.h	/^#define LOG_LOG_TIME_FORMAT /;"	d
LOG_OUTPUT_STREAM	include/common/logger.h	/^#define LOG_OUTPUT_STREAM /;"	d
LOG_TIMEOUT	common/config.cpp	/^  std::chrono::duration<long long int> LOG_TIMEOUT =$/;"	v	namespace:cmudb	typeref:typename:std::chrono::duration<long long int>
LOG_TRACE	include/common/logger.h	/^#define LOG_TRACE(/;"	d
LOG_TRACE_ENABLED	include/common/logger.h	/^#define LOG_TRACE_ENABLED$/;"	d
LOG_WARN	include/common/logger.h	/^#define LOG_WARN(/;"	d
LOG_WARN_ENABLED	include/common/logger.h	/^#define LOG_WARN_ENABLED$/;"	d
LONGDOUBLE_TYPE	sqlite/sqlite3.c	/^# define LONGDOUBLE_TYPE /;"	d	file:
LRUReplacer	buffer/lru_replacer.cpp	/^  template <typename T> LRUReplacer<T>::LRUReplacer() {$/;"	f	class:cmudb::LRUReplacer
LRUReplacer	buffer/lru_replacer.cpp	/^template class LRUReplacer<Page *>;$/;"	v	namespace:cmudb	typeref:typename:class
LRUReplacer	buffer/lru_replacer.cpp	/^template class LRUReplacer<int>;$/;"	v	namespace:cmudb	typeref:typename:class
LRUReplacer	include/buffer/lru_replacer.h	/^template <typename T> class LRUReplacer : public Replacer<T> {$/;"	c	namespace:cmudb
LTrim	include/common/string_utility.h	/^  static inline void LTrim(std::string &s) {$/;"	f	class:cmudb::StringUtility	typeref:typename:void
LockExclusive	concurrency/lock_manager.cpp	/^bool LockManager::LockExclusive(Transaction *txn, const RID &rid) {$/;"	f	class:cmudb::LockManager	typeref:typename:bool
LockManager	include/concurrency/lock_manager.h	/^  LockManager(bool strict_2PL) : strict_2PL_(strict_2PL){};$/;"	f	class:cmudb::LockManager
LockManager	include/concurrency/lock_manager.h	/^class LockManager {$/;"	c	namespace:cmudb
LockShared	concurrency/lock_manager.cpp	/^bool LockManager::LockShared(Transaction *txn, const RID &rid) {$/;"	f	class:cmudb::LockManager	typeref:typename:bool
LockUpgrade	concurrency/lock_manager.cpp	/^bool LockManager::LockUpgrade(Transaction *txn, const RID &rid) {$/;"	f	class:cmudb::LockManager	typeref:typename:bool
LogEst	sqlite/sqlite3.c	/^typedef INT16_TYPE LogEst;$/;"	t	typeref:typename:INT16_TYPE	file:
LogManager	include/logging/log_manager.h	/^  LogManager(DiskManager *disk_manager)$/;"	f	class:cmudb::LogManager
LogManager	include/logging/log_manager.h	/^class LogManager {$/;"	c	namespace:cmudb
LogRecord	include/logging/log_record.h	/^  LogRecord()$/;"	f	class:cmudb::LogRecord
LogRecord	include/logging/log_record.h	/^  LogRecord(txn_id_t txn_id, lsn_t prev_lsn, LogRecordType log_record_type)$/;"	f	class:cmudb::LogRecord
LogRecord	include/logging/log_record.h	/^  LogRecord(txn_id_t txn_id, lsn_t prev_lsn, LogRecordType log_record_type,$/;"	f	class:cmudb::LogRecord
LogRecord	include/logging/log_record.h	/^class LogRecord {$/;"	c	namespace:cmudb
LogRecordType	include/logging/log_record.h	/^enum class LogRecordType {$/;"	g	namespace:cmudb
LogRecovery	include/logging/log_recovery.h	/^  LogRecovery(DiskManager *disk_manager,$/;"	f	class:cmudb::LogRecovery
LogRecovery	include/logging/log_recovery.h	/^class LogRecovery {$/;"	c	namespace:cmudb
Lookaside	sqlite/sqlite3.c	/^struct Lookaside {$/;"	s	file:
Lookaside	sqlite/sqlite3.c	/^typedef struct Lookaside Lookaside;$/;"	t	typeref:struct:Lookaside	file:
LookasideSlot	sqlite/sqlite3.c	/^struct LookasideSlot {$/;"	s	file:
LookasideSlot	sqlite/sqlite3.c	/^typedef struct LookasideSlot LookasideSlot;$/;"	t	typeref:struct:LookasideSlot	file:
Lookup	page/b_plus_tree_internal_page.cpp	/^B_PLUS_TREE_INTERNAL_PAGE_TYPE::Lookup(const KeyType &key,$/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS ValueType
Lookup	page/b_plus_tree_leaf_page.cpp	/^bool B_PLUS_TREE_LEAF_PAGE_TYPE::Lookup(const KeyType &key, ValueType &value,$/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS bool
M	sqlite/sqlite3.c	/^  int Y, M, D;        \/* Year, month, and day *\/$/;"	m	struct:DateTime	typeref:typename:int	file:
MARKDELETE	include/logging/log_record.h	/^  MARKDELETE,$/;"	e	enum:cmudb::LogRecordType
MASKBIT	sqlite/sqlite3.c	/^#define MASKBIT(/;"	d	file:
MASKBIT32	sqlite/sqlite3.c	/^#define MASKBIT32(/;"	d	file:
MASTER_NAME	sqlite/sqlite3.c	/^#define MASTER_NAME /;"	d	file:
MASTER_ROOT	sqlite/sqlite3.c	/^#define MASTER_ROOT /;"	d	file:
MAX	sqlite/sqlite3.c	/^# define MAX(/;"	d	file:
MEM5LINK	sqlite/sqlite3.c	/^#define MEM5LINK(/;"	d	file:
MEMCELLSIZE	sqlite/sqlite3.c	/^#define MEMCELLSIZE /;"	d	file:
MEMTYPE_HEAP	sqlite/sqlite3.c	/^#define MEMTYPE_HEAP /;"	d	file:
MEMTYPE_LOOKASIDE	sqlite/sqlite3.c	/^#define MEMTYPE_LOOKASIDE /;"	d	file:
MEMTYPE_PCACHE	sqlite/sqlite3.c	/^#define MEMTYPE_PCACHE /;"	d	file:
MEMTYPE_SCRATCH	sqlite/sqlite3.c	/^#define MEMTYPE_SCRATCH /;"	d	file:
MEM_AffMask	sqlite/sqlite3.c	/^#define MEM_AffMask /;"	d	file:
MEM_Agg	sqlite/sqlite3.c	/^#define MEM_Agg /;"	d	file:
MEM_Blob	sqlite/sqlite3.c	/^#define MEM_Blob /;"	d	file:
MEM_Cleared	sqlite/sqlite3.c	/^#define MEM_Cleared /;"	d	file:
MEM_Dyn	sqlite/sqlite3.c	/^#define MEM_Dyn /;"	d	file:
MEM_Ephem	sqlite/sqlite3.c	/^#define MEM_Ephem /;"	d	file:
MEM_Frame	sqlite/sqlite3.c	/^#define MEM_Frame /;"	d	file:
MEM_Int	sqlite/sqlite3.c	/^#define MEM_Int /;"	d	file:
MEM_Null	sqlite/sqlite3.c	/^#define MEM_Null /;"	d	file:
MEM_Real	sqlite/sqlite3.c	/^#define MEM_Real /;"	d	file:
MEM_RowSet	sqlite/sqlite3.c	/^#define MEM_RowSet /;"	d	file:
MEM_Static	sqlite/sqlite3.c	/^#define MEM_Static /;"	d	file:
MEM_Str	sqlite/sqlite3.c	/^#define MEM_Str /;"	d	file:
MEM_Subtype	sqlite/sqlite3.c	/^#define MEM_Subtype /;"	d	file:
MEM_Term	sqlite/sqlite3.c	/^#define MEM_Term /;"	d	file:
MEM_TypeMask	sqlite/sqlite3.c	/^#define MEM_TypeMask /;"	d	file:
MEM_Undefined	sqlite/sqlite3.c	/^#define MEM_Undefined /;"	d	file:
MEM_Zero	sqlite/sqlite3.c	/^  #define MEM_Zero /;"	d	file:
MEM_Zero	sqlite/sqlite3.c	/^#define MEM_Zero /;"	d	file:
MIN	sqlite/sqlite3.c	/^# define MIN(/;"	d	file:
MODE_Ascii	sqlite/shell.c	/^#define MODE_Ascii /;"	d	file:
MODE_Column	sqlite/shell.c	/^#define MODE_Column /;"	d	file:
MODE_Csv	sqlite/shell.c	/^#define MODE_Csv /;"	d	file:
MODE_Explain	sqlite/shell.c	/^#define MODE_Explain /;"	d	file:
MODE_Html	sqlite/shell.c	/^#define MODE_Html /;"	d	file:
MODE_Insert	sqlite/shell.c	/^#define MODE_Insert /;"	d	file:
MODE_Line	sqlite/shell.c	/^#define MODE_Line /;"	d	file:
MODE_List	sqlite/shell.c	/^#define MODE_List /;"	d	file:
MODE_Pretty	sqlite/shell.c	/^#define MODE_Pretty /;"	d	file:
MODE_Quote	sqlite/shell.c	/^#define MODE_Quote /;"	d	file:
MODE_Semi	sqlite/shell.c	/^#define MODE_Semi /;"	d	file:
MODE_Tcl	sqlite/shell.c	/^#define MODE_Tcl /;"	d	file:
MSVC_VERSION	sqlite/sqlite3.c	/^# define MSVC_VERSION /;"	d	file:
MUTEX_LOGIC	sqlite/sqlite3.c	/^#define MUTEX_LOGIC(/;"	d	file:
MX_SMALL	sqlite/sqlite3.c	/^#define MX_SMALL /;"	d	file:
MappingType	include/page/b_plus_tree_page.h	/^#define MappingType /;"	d
MarkDelete	page/table_page.cpp	/^bool TablePage::MarkDelete(const RID &rid, Transaction *txn,$/;"	f	class:cmudb::TablePage	typeref:typename:bool
MarkDelete	table/table_heap.cpp	/^bool TableHeap::MarkDelete(const RID &rid, Transaction *txn) {$/;"	f	class:cmudb::TableHeap	typeref:typename:bool
Max	include/type/value.h	/^  inline Value Max(const Value &o) const {$/;"	f	class:cmudb::Value	typeref:typename:Value
Max	type/decimal_type.cpp	/^Value DecimalType::Max(const Value &left, const Value &right) const {$/;"	f	class:cmudb::DecimalType	typeref:typename:Value
Max	type/integer_parent_type.cpp	/^Value IntegerParentType::Max(const Value &left, const Value &right) const {$/;"	f	class:cmudb::IntegerParentType	typeref:typename:Value
Max	type/type.cpp	/^Value Type::Max(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::Type	typeref:typename:Value
Max	type/varlen_type.cpp	/^Value VarlenType::Max(const Value &left, const Value &right) const {$/;"	f	class:cmudb::VarlenType	typeref:typename:Value
Mem	sqlite/sqlite3.c	/^typedef struct sqlite3_value Mem;$/;"	t	typeref:struct:sqlite3_value	file:
Mem3Block	sqlite/sqlite3.c	/^struct Mem3Block {$/;"	s	file:
Mem3Block	sqlite/sqlite3.c	/^typedef struct Mem3Block Mem3Block;$/;"	t	typeref:struct:Mem3Block	file:
Mem3Global	sqlite/sqlite3.c	/^static SQLITE_WSD struct Mem3Global {$/;"	s	file:
Mem5Global	sqlite/sqlite3.c	/^static SQLITE_WSD struct Mem5Global {$/;"	s	file:
Mem5Link	sqlite/sqlite3.c	/^struct Mem5Link {$/;"	s	file:
Mem5Link	sqlite/sqlite3.c	/^typedef struct Mem5Link Mem5Link;$/;"	t	typeref:struct:Mem5Link	file:
MemBlockHdr	sqlite/sqlite3.c	/^struct MemBlockHdr {$/;"	s	file:
MemSetTypeFlag	sqlite/sqlite3.c	/^#define MemSetTypeFlag(/;"	d	file:
MemValue	sqlite/sqlite3.c	/^  union MemValue {$/;"	u	struct:sqlite3_value	file:
Min	include/type/value.h	/^  inline Value Min(const Value &o) const {$/;"	f	class:cmudb::Value	typeref:typename:Value
Min	type/decimal_type.cpp	/^Value DecimalType::Min(const Value &left, const Value &right) const {$/;"	f	class:cmudb::DecimalType	typeref:typename:Value
Min	type/integer_parent_type.cpp	/^Value IntegerParentType::Min(const Value &left, const Value &right) const {$/;"	f	class:cmudb::IntegerParentType	typeref:typename:Value
Min	type/type.cpp	/^Value Type::Min(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::Type	typeref:typename:Value
Min	type/varlen_type.cpp	/^Value VarlenType::Min(const Value &left, const Value &right) const {$/;"	f	class:cmudb::VarlenType	typeref:typename:Value
Module	sqlite/sqlite3.c	/^struct Module {$/;"	s	file:
Module	sqlite/sqlite3.c	/^typedef struct Module Module;$/;"	t	typeref:struct:Module	file:
Modulo	include/type/value.h	/^  inline Value Modulo(const Value &o) const {$/;"	f	class:cmudb::Value	typeref:typename:Value
Modulo	type/bigint_type.cpp	/^Value BigintType::Modulo(const Value &left, const Value &right) const {$/;"	f	class:cmudb::BigintType	typeref:typename:Value
Modulo	type/decimal_type.cpp	/^Value DecimalType::Modulo(const Value &left, const Value &right) const {$/;"	f	class:cmudb::DecimalType	typeref:typename:Value
Modulo	type/integer_type.cpp	/^Value IntegerType::Modulo(const Value &left, const Value &right) const {$/;"	f	class:cmudb::IntegerType	typeref:typename:Value
Modulo	type/smallint_type.cpp	/^Value SmallintType::Modulo(const Value &left, const Value &right) const {$/;"	f	class:cmudb::SmallintType	typeref:typename:Value
Modulo	type/tinyint_type.cpp	/^Value TinyintType::Modulo(const Value &left, const Value &right) const {$/;"	f	class:cmudb::TinyintType	typeref:typename:Value
Modulo	type/type.cpp	/^Value Type::Modulo(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::Type	typeref:typename:Value
ModuloValue	include/type/integer_parent_type.h	/^Value IntegerParentType::ModuloValue(const Value &left,$/;"	f	class:cmudb::IntegerParentType	typeref:typename:Value
MoveAllTo	page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::MoveAllTo($/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
MoveAllTo	page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::MoveAllTo(BPlusTreeLeafPage *recipient,$/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
MoveFirstToEndOf	page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::MoveFirstToEndOf($/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
MoveFirstToEndOf	page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::MoveFirstToEndOf($/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
MoveHalfTo	page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::MoveHalfTo($/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
MoveHalfTo	page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::MoveHalfTo($/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
MoveLastToFrontOf	page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::MoveLastToFrontOf($/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
MoveLastToFrontOf	page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::MoveLastToFrontOf($/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
Multiply	include/type/value.h	/^  inline Value Multiply(const Value &o) const {$/;"	f	class:cmudb::Value	typeref:typename:Value
Multiply	type/bigint_type.cpp	/^Value BigintType::Multiply(const Value &left, const Value &right) const {$/;"	f	class:cmudb::BigintType	typeref:typename:Value
Multiply	type/decimal_type.cpp	/^Value DecimalType::Multiply(const Value &left, const Value &right) const {$/;"	f	class:cmudb::DecimalType	typeref:typename:Value
Multiply	type/integer_type.cpp	/^Value IntegerType::Multiply(const Value &left, const Value &right) const {$/;"	f	class:cmudb::IntegerType	typeref:typename:Value
Multiply	type/smallint_type.cpp	/^Value SmallintType::Multiply(const Value &left, const Value &right) const {$/;"	f	class:cmudb::SmallintType	typeref:typename:Value
Multiply	type/tinyint_type.cpp	/^Value TinyintType::Multiply(const Value &left, const Value &right) const {$/;"	f	class:cmudb::TinyintType	typeref:typename:Value
Multiply	type/type.cpp	/^Value Type::Multiply(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::Type	typeref:typename:Value
MultiplyValue	include/type/integer_parent_type.h	/^Value IntegerParentType::MultiplyValue(const Value &left,$/;"	f	class:cmudb::IntegerParentType	typeref:typename:Value
NCSIZE	sqlite/sqlite3.c	/^#define NCSIZE /;"	d	file:
NC_AllowAgg	sqlite/sqlite3.c	/^#define NC_AllowAgg /;"	d	file:
NC_HasAgg	sqlite/sqlite3.c	/^#define NC_HasAgg /;"	d	file:
NC_IdxExpr	sqlite/sqlite3.c	/^#define NC_IdxExpr /;"	d	file:
NC_InAggFunc	sqlite/sqlite3.c	/^#define NC_InAggFunc /;"	d	file:
NC_IsCheck	sqlite/sqlite3.c	/^#define NC_IsCheck /;"	d	file:
NC_MinMaxAgg	sqlite/sqlite3.c	/^#define NC_MinMaxAgg /;"	d	file:
NC_PartIdx	sqlite/sqlite3.c	/^#define NC_PartIdx /;"	d	file:
NC_VarSelect	sqlite/sqlite3.c	/^#define NC_VarSelect /;"	d	file:
NDEBUG	sqlite/sqlite3.c	/^# define NDEBUG /;"	d	file:
NEVER	sqlite/sqlite3.c	/^# define NEVER(/;"	d	file:
NEWPAGE	include/logging/log_record.h	/^  NEWPAGE,$/;"	e	enum:cmudb::LogRecordType
NOT_WITHIN	include/sqlite/sqlite3.h	/^#define NOT_WITHIN /;"	d
NOT_WITHIN	sqlite/sqlite3.c	/^#define NOT_WITHIN /;"	d	file:
NO_LOCK	sqlite/sqlite3.c	/^#define NO_LOCK /;"	d	file:
N_HASH	sqlite/sqlite3.c	/^#define N_HASH /;"	d	file:
NameContext	sqlite/sqlite3.c	/^struct NameContext {$/;"	s	file:
NameContext	sqlite/sqlite3.c	/^typedef struct NameContext NameContext;$/;"	t	typeref:struct:NameContext	file:
NewPage	buffer/buffer_pool_manager.cpp	/^Page *BufferPoolManager::NewPage(page_id_t &page_id) { return nullptr; }$/;"	f	class:cmudb::BufferPoolManager	typeref:typename:Page *
Node	include/buffer/lru_replacer.h	/^    Node(const T &value) : value(value) {} $/;"	f	struct:cmudb::LRUReplacer::Node
Node	include/buffer/lru_replacer.h	/^  struct Node {$/;"	s	class:cmudb::LRUReplacer
NotImplementedException	include/common/exception.h	/^  NotImplementedException(std::string msg)$/;"	f	class:cmudb::NotImplementedException
NotImplementedException	include/common/exception.h	/^class NotImplementedException : public Exception {$/;"	c	namespace:cmudb
NumericType	include/type/numeric_type.h	/^  NumericType(TypeId type) : Type(type) {}$/;"	f	class:cmudb::NumericType
NumericType	include/type/numeric_type.h	/^class NumericType : public Type {$/;"	c	namespace:cmudb
NumericValueOutOfRangeException	include/common/exception.h	/^  NumericValueOutOfRangeException(std::string msg, int type)$/;"	f	class:cmudb::NumericValueOutOfRangeException
NumericValueOutOfRangeException	include/common/exception.h	/^class NumericValueOutOfRangeException : public Exception {$/;"	c	namespace:cmudb
OBJECTLENGTH_NULL	include/type/limits.h	/^#define OBJECTLENGTH_NULL /;"	d
OE_Abort	sqlite/sqlite3.c	/^#define OE_Abort /;"	d	file:
OE_Cascade	sqlite/sqlite3.c	/^#define OE_Cascade /;"	d	file:
OE_Default	sqlite/sqlite3.c	/^#define OE_Default /;"	d	file:
OE_Fail	sqlite/sqlite3.c	/^#define OE_Fail /;"	d	file:
OE_Ignore	sqlite/sqlite3.c	/^#define OE_Ignore /;"	d	file:
OE_None	sqlite/sqlite3.c	/^#define OE_None /;"	d	file:
OE_Replace	sqlite/sqlite3.c	/^#define OE_Replace /;"	d	file:
OE_Restrict	sqlite/sqlite3.c	/^#define OE_Restrict /;"	d	file:
OE_Rollback	sqlite/sqlite3.c	/^#define OE_Rollback /;"	d	file:
OE_SetDflt	sqlite/sqlite3.c	/^#define OE_SetDflt /;"	d	file:
OE_SetNull	sqlite/sqlite3.c	/^#define OE_SetNull /;"	d	file:
OMIT_TEMPDB	sqlite/sqlite3.c	/^#define OMIT_TEMPDB /;"	d	file:
ONEPASS_MULTI	sqlite/sqlite3.c	/^#define ONEPASS_MULTI /;"	d	file:
ONEPASS_OFF	sqlite/sqlite3.c	/^#define ONEPASS_OFF /;"	d	file:
ONEPASS_SINGLE	sqlite/sqlite3.c	/^#define ONEPASS_SINGLE /;"	d	file:
ONLY_IF_REALLOC_STRESS	sqlite/sqlite3.c	/^# define ONLY_IF_REALLOC_STRESS(/;"	d	file:
OPFLAG_APPEND	sqlite/sqlite3.c	/^#define OPFLAG_APPEND /;"	d	file:
OPFLAG_AUXDELETE	sqlite/sqlite3.c	/^#define OPFLAG_AUXDELETE /;"	d	file:
OPFLAG_BULKCSR	sqlite/sqlite3.c	/^#define OPFLAG_BULKCSR /;"	d	file:
OPFLAG_EPHEM	sqlite/sqlite3.c	/^#define OPFLAG_EPHEM /;"	d	file:
OPFLAG_FORDELETE	sqlite/sqlite3.c	/^#define OPFLAG_FORDELETE /;"	d	file:
OPFLAG_ISNOOP	sqlite/sqlite3.c	/^#define OPFLAG_ISNOOP /;"	d	file:
OPFLAG_ISUPDATE	sqlite/sqlite3.c	/^#define OPFLAG_ISUPDATE /;"	d	file:
OPFLAG_LASTROWID	sqlite/sqlite3.c	/^#define OPFLAG_LASTROWID /;"	d	file:
OPFLAG_LENGTHARG	sqlite/sqlite3.c	/^#define OPFLAG_LENGTHARG /;"	d	file:
OPFLAG_NCHANGE	sqlite/sqlite3.c	/^#define OPFLAG_NCHANGE /;"	d	file:
OPFLAG_P2ISREG	sqlite/sqlite3.c	/^#define OPFLAG_P2ISREG /;"	d	file:
OPFLAG_PERMUTE	sqlite/sqlite3.c	/^#define OPFLAG_PERMUTE /;"	d	file:
OPFLAG_SAVEPOSITION	sqlite/sqlite3.c	/^#define OPFLAG_SAVEPOSITION /;"	d	file:
OPFLAG_SEEKEQ	sqlite/sqlite3.c	/^#define OPFLAG_SEEKEQ /;"	d	file:
OPFLAG_TYPEOFARG	sqlite/sqlite3.c	/^#define OPFLAG_TYPEOFARG /;"	d	file:
OPFLAG_USESEEKRESULT	sqlite/sqlite3.c	/^#define OPFLAG_USESEEKRESULT /;"	d	file:
OPFLG_IN1	sqlite/sqlite3.c	/^#define OPFLG_IN1 /;"	d	file:
OPFLG_IN2	sqlite/sqlite3.c	/^#define OPFLG_IN2 /;"	d	file:
OPFLG_IN3	sqlite/sqlite3.c	/^#define OPFLG_IN3 /;"	d	file:
OPFLG_INITIALIZER	sqlite/sqlite3.c	/^#define OPFLG_INITIALIZER /;"	d	file:
OPFLG_JUMP	sqlite/sqlite3.c	/^#define OPFLG_JUMP /;"	d	file:
OPFLG_OUT2	sqlite/sqlite3.c	/^#define OPFLG_OUT2 /;"	d	file:
OPFLG_OUT3	sqlite/sqlite3.c	/^#define OPFLG_OUT3 /;"	d	file:
OP_Add	sqlite/sqlite3.c	/^#define OP_Add /;"	d	file:
OP_AddImm	sqlite/sqlite3.c	/^#define OP_AddImm /;"	d	file:
OP_Affinity	sqlite/sqlite3.c	/^#define OP_Affinity /;"	d	file:
OP_AggFinal	sqlite/sqlite3.c	/^#define OP_AggFinal /;"	d	file:
OP_AggStep	sqlite/sqlite3.c	/^#define OP_AggStep /;"	d	file:
OP_AggStep0	sqlite/sqlite3.c	/^#define OP_AggStep0 /;"	d	file:
OP_And	sqlite/sqlite3.c	/^#define OP_And /;"	d	file:
OP_AutoCommit	sqlite/sqlite3.c	/^#define OP_AutoCommit /;"	d	file:
OP_BitAnd	sqlite/sqlite3.c	/^#define OP_BitAnd /;"	d	file:
OP_BitNot	sqlite/sqlite3.c	/^#define OP_BitNot /;"	d	file:
OP_BitOr	sqlite/sqlite3.c	/^#define OP_BitOr /;"	d	file:
OP_Blob	sqlite/sqlite3.c	/^#define OP_Blob /;"	d	file:
OP_Cast	sqlite/sqlite3.c	/^#define OP_Cast /;"	d	file:
OP_Checkpoint	sqlite/sqlite3.c	/^#define OP_Checkpoint /;"	d	file:
OP_Clear	sqlite/sqlite3.c	/^#define OP_Clear /;"	d	file:
OP_Close	sqlite/sqlite3.c	/^#define OP_Close /;"	d	file:
OP_CollSeq	sqlite/sqlite3.c	/^#define OP_CollSeq /;"	d	file:
OP_Column	sqlite/sqlite3.c	/^#define OP_Column /;"	d	file:
OP_ColumnsUsed	sqlite/sqlite3.c	/^#define OP_ColumnsUsed /;"	d	file:
OP_Compare	sqlite/sqlite3.c	/^#define OP_Compare /;"	d	file:
OP_Concat	sqlite/sqlite3.c	/^#define OP_Concat /;"	d	file:
OP_Copy	sqlite/sqlite3.c	/^#define OP_Copy /;"	d	file:
OP_Count	sqlite/sqlite3.c	/^#define OP_Count /;"	d	file:
OP_CreateIndex	sqlite/sqlite3.c	/^#define OP_CreateIndex /;"	d	file:
OP_CreateTable	sqlite/sqlite3.c	/^#define OP_CreateTable /;"	d	file:
OP_CursorHint	sqlite/sqlite3.c	/^#define OP_CursorHint /;"	d	file:
OP_DecrJumpZero	sqlite/sqlite3.c	/^#define OP_DecrJumpZero /;"	d	file:
OP_DeferredSeek	sqlite/sqlite3.c	/^#define OP_DeferredSeek /;"	d	file:
OP_Delete	sqlite/sqlite3.c	/^#define OP_Delete /;"	d	file:
OP_Destroy	sqlite/sqlite3.c	/^#define OP_Destroy /;"	d	file:
OP_Divide	sqlite/sqlite3.c	/^#define OP_Divide /;"	d	file:
OP_DropIndex	sqlite/sqlite3.c	/^#define OP_DropIndex /;"	d	file:
OP_DropTable	sqlite/sqlite3.c	/^#define OP_DropTable /;"	d	file:
OP_DropTrigger	sqlite/sqlite3.c	/^#define OP_DropTrigger /;"	d	file:
OP_ElseNotEq	sqlite/sqlite3.c	/^#define OP_ElseNotEq /;"	d	file:
OP_EndCoroutine	sqlite/sqlite3.c	/^#define OP_EndCoroutine /;"	d	file:
OP_Eq	sqlite/sqlite3.c	/^#define OP_Eq /;"	d	file:
OP_Expire	sqlite/sqlite3.c	/^#define OP_Expire /;"	d	file:
OP_Explain	sqlite/sqlite3.c	/^#define OP_Explain /;"	d	file:
OP_FkCounter	sqlite/sqlite3.c	/^#define OP_FkCounter /;"	d	file:
OP_FkIfZero	sqlite/sqlite3.c	/^#define OP_FkIfZero /;"	d	file:
OP_Found	sqlite/sqlite3.c	/^#define OP_Found /;"	d	file:
OP_Function	sqlite/sqlite3.c	/^#define OP_Function /;"	d	file:
OP_Function0	sqlite/sqlite3.c	/^#define OP_Function0 /;"	d	file:
OP_Ge	sqlite/sqlite3.c	/^#define OP_Ge /;"	d	file:
OP_Gosub	sqlite/sqlite3.c	/^#define OP_Gosub /;"	d	file:
OP_Goto	sqlite/sqlite3.c	/^#define OP_Goto /;"	d	file:
OP_Gt	sqlite/sqlite3.c	/^#define OP_Gt /;"	d	file:
OP_Halt	sqlite/sqlite3.c	/^#define OP_Halt /;"	d	file:
OP_HaltIfNull	sqlite/sqlite3.c	/^#define OP_HaltIfNull /;"	d	file:
OP_IdxDelete	sqlite/sqlite3.c	/^#define OP_IdxDelete /;"	d	file:
OP_IdxGE	sqlite/sqlite3.c	/^#define OP_IdxGE /;"	d	file:
OP_IdxGT	sqlite/sqlite3.c	/^#define OP_IdxGT /;"	d	file:
OP_IdxInsert	sqlite/sqlite3.c	/^#define OP_IdxInsert /;"	d	file:
OP_IdxLE	sqlite/sqlite3.c	/^#define OP_IdxLE /;"	d	file:
OP_IdxLT	sqlite/sqlite3.c	/^#define OP_IdxLT /;"	d	file:
OP_IdxRowid	sqlite/sqlite3.c	/^#define OP_IdxRowid /;"	d	file:
OP_If	sqlite/sqlite3.c	/^#define OP_If /;"	d	file:
OP_IfNot	sqlite/sqlite3.c	/^#define OP_IfNot /;"	d	file:
OP_IfNotZero	sqlite/sqlite3.c	/^#define OP_IfNotZero /;"	d	file:
OP_IfNullRow	sqlite/sqlite3.c	/^#define OP_IfNullRow /;"	d	file:
OP_IfPos	sqlite/sqlite3.c	/^#define OP_IfPos /;"	d	file:
OP_IfSmaller	sqlite/sqlite3.c	/^#define OP_IfSmaller /;"	d	file:
OP_IncrVacuum	sqlite/sqlite3.c	/^#define OP_IncrVacuum /;"	d	file:
OP_Init	sqlite/sqlite3.c	/^#define OP_Init /;"	d	file:
OP_InitCoroutine	sqlite/sqlite3.c	/^#define OP_InitCoroutine /;"	d	file:
OP_Insert	sqlite/sqlite3.c	/^#define OP_Insert /;"	d	file:
OP_InsertInt	sqlite/sqlite3.c	/^#define OP_InsertInt /;"	d	file:
OP_Int64	sqlite/sqlite3.c	/^#define OP_Int64 /;"	d	file:
OP_IntCopy	sqlite/sqlite3.c	/^#define OP_IntCopy /;"	d	file:
OP_Integer	sqlite/sqlite3.c	/^#define OP_Integer /;"	d	file:
OP_IntegrityCk	sqlite/sqlite3.c	/^#define OP_IntegrityCk /;"	d	file:
OP_IsNull	sqlite/sqlite3.c	/^#define OP_IsNull /;"	d	file:
OP_JournalMode	sqlite/sqlite3.c	/^#define OP_JournalMode /;"	d	file:
OP_Jump	sqlite/sqlite3.c	/^#define OP_Jump /;"	d	file:
OP_Last	sqlite/sqlite3.c	/^#define OP_Last /;"	d	file:
OP_Le	sqlite/sqlite3.c	/^#define OP_Le /;"	d	file:
OP_LoadAnalysis	sqlite/sqlite3.c	/^#define OP_LoadAnalysis /;"	d	file:
OP_Lt	sqlite/sqlite3.c	/^#define OP_Lt /;"	d	file:
OP_MakeRecord	sqlite/sqlite3.c	/^#define OP_MakeRecord /;"	d	file:
OP_MaxPgcnt	sqlite/sqlite3.c	/^#define OP_MaxPgcnt /;"	d	file:
OP_MemMax	sqlite/sqlite3.c	/^#define OP_MemMax /;"	d	file:
OP_Move	sqlite/sqlite3.c	/^#define OP_Move /;"	d	file:
OP_Multiply	sqlite/sqlite3.c	/^#define OP_Multiply /;"	d	file:
OP_MustBeInt	sqlite/sqlite3.c	/^#define OP_MustBeInt /;"	d	file:
OP_Ne	sqlite/sqlite3.c	/^#define OP_Ne /;"	d	file:
OP_NewRowid	sqlite/sqlite3.c	/^#define OP_NewRowid /;"	d	file:
OP_Next	sqlite/sqlite3.c	/^#define OP_Next /;"	d	file:
OP_NextIfOpen	sqlite/sqlite3.c	/^#define OP_NextIfOpen /;"	d	file:
OP_NoConflict	sqlite/sqlite3.c	/^#define OP_NoConflict /;"	d	file:
OP_Noop	sqlite/sqlite3.c	/^#define OP_Noop /;"	d	file:
OP_Not	sqlite/sqlite3.c	/^#define OP_Not /;"	d	file:
OP_NotExists	sqlite/sqlite3.c	/^#define OP_NotExists /;"	d	file:
OP_NotFound	sqlite/sqlite3.c	/^#define OP_NotFound /;"	d	file:
OP_NotNull	sqlite/sqlite3.c	/^#define OP_NotNull /;"	d	file:
OP_Null	sqlite/sqlite3.c	/^#define OP_Null /;"	d	file:
OP_NullRow	sqlite/sqlite3.c	/^#define OP_NullRow /;"	d	file:
OP_OffsetLimit	sqlite/sqlite3.c	/^#define OP_OffsetLimit /;"	d	file:
OP_Once	sqlite/sqlite3.c	/^#define OP_Once /;"	d	file:
OP_OpenAutoindex	sqlite/sqlite3.c	/^#define OP_OpenAutoindex /;"	d	file:
OP_OpenDup	sqlite/sqlite3.c	/^#define OP_OpenDup /;"	d	file:
OP_OpenEphemeral	sqlite/sqlite3.c	/^#define OP_OpenEphemeral /;"	d	file:
OP_OpenPseudo	sqlite/sqlite3.c	/^#define OP_OpenPseudo /;"	d	file:
OP_OpenRead	sqlite/sqlite3.c	/^#define OP_OpenRead /;"	d	file:
OP_OpenWrite	sqlite/sqlite3.c	/^#define OP_OpenWrite /;"	d	file:
OP_Or	sqlite/sqlite3.c	/^#define OP_Or /;"	d	file:
OP_Pagecount	sqlite/sqlite3.c	/^#define OP_Pagecount /;"	d	file:
OP_Param	sqlite/sqlite3.c	/^#define OP_Param /;"	d	file:
OP_ParseSchema	sqlite/sqlite3.c	/^#define OP_ParseSchema /;"	d	file:
OP_Permutation	sqlite/sqlite3.c	/^#define OP_Permutation /;"	d	file:
OP_Prev	sqlite/sqlite3.c	/^#define OP_Prev /;"	d	file:
OP_PrevIfOpen	sqlite/sqlite3.c	/^#define OP_PrevIfOpen /;"	d	file:
OP_Program	sqlite/sqlite3.c	/^#define OP_Program /;"	d	file:
OP_ReadCookie	sqlite/sqlite3.c	/^#define OP_ReadCookie /;"	d	file:
OP_Real	sqlite/sqlite3.c	/^#define OP_Real /;"	d	file:
OP_RealAffinity	sqlite/sqlite3.c	/^#define OP_RealAffinity /;"	d	file:
OP_Remainder	sqlite/sqlite3.c	/^#define OP_Remainder /;"	d	file:
OP_ReopenIdx	sqlite/sqlite3.c	/^#define OP_ReopenIdx /;"	d	file:
OP_ResetCount	sqlite/sqlite3.c	/^#define OP_ResetCount /;"	d	file:
OP_ResetSorter	sqlite/sqlite3.c	/^#define OP_ResetSorter /;"	d	file:
OP_ResultRow	sqlite/sqlite3.c	/^#define OP_ResultRow /;"	d	file:
OP_Return	sqlite/sqlite3.c	/^#define OP_Return /;"	d	file:
OP_Rewind	sqlite/sqlite3.c	/^#define OP_Rewind /;"	d	file:
OP_RowData	sqlite/sqlite3.c	/^#define OP_RowData /;"	d	file:
OP_RowSetAdd	sqlite/sqlite3.c	/^#define OP_RowSetAdd /;"	d	file:
OP_RowSetRead	sqlite/sqlite3.c	/^#define OP_RowSetRead /;"	d	file:
OP_RowSetTest	sqlite/sqlite3.c	/^#define OP_RowSetTest /;"	d	file:
OP_Rowid	sqlite/sqlite3.c	/^#define OP_Rowid /;"	d	file:
OP_SCopy	sqlite/sqlite3.c	/^#define OP_SCopy /;"	d	file:
OP_Savepoint	sqlite/sqlite3.c	/^#define OP_Savepoint /;"	d	file:
OP_SeekGE	sqlite/sqlite3.c	/^#define OP_SeekGE /;"	d	file:
OP_SeekGT	sqlite/sqlite3.c	/^#define OP_SeekGT /;"	d	file:
OP_SeekLE	sqlite/sqlite3.c	/^#define OP_SeekLE /;"	d	file:
OP_SeekLT	sqlite/sqlite3.c	/^#define OP_SeekLT /;"	d	file:
OP_SeekRowid	sqlite/sqlite3.c	/^#define OP_SeekRowid /;"	d	file:
OP_Sequence	sqlite/sqlite3.c	/^#define OP_Sequence /;"	d	file:
OP_SequenceTest	sqlite/sqlite3.c	/^#define OP_SequenceTest /;"	d	file:
OP_SetCookie	sqlite/sqlite3.c	/^#define OP_SetCookie /;"	d	file:
OP_ShiftLeft	sqlite/sqlite3.c	/^#define OP_ShiftLeft /;"	d	file:
OP_ShiftRight	sqlite/sqlite3.c	/^#define OP_ShiftRight /;"	d	file:
OP_SoftNull	sqlite/sqlite3.c	/^#define OP_SoftNull /;"	d	file:
OP_Sort	sqlite/sqlite3.c	/^#define OP_Sort /;"	d	file:
OP_SorterCompare	sqlite/sqlite3.c	/^#define OP_SorterCompare /;"	d	file:
OP_SorterData	sqlite/sqlite3.c	/^#define OP_SorterData /;"	d	file:
OP_SorterInsert	sqlite/sqlite3.c	/^#define OP_SorterInsert /;"	d	file:
OP_SorterNext	sqlite/sqlite3.c	/^#define OP_SorterNext /;"	d	file:
OP_SorterOpen	sqlite/sqlite3.c	/^#define OP_SorterOpen /;"	d	file:
OP_SorterSort	sqlite/sqlite3.c	/^#define OP_SorterSort /;"	d	file:
OP_SqlExec	sqlite/sqlite3.c	/^#define OP_SqlExec /;"	d	file:
OP_String	sqlite/sqlite3.c	/^#define OP_String /;"	d	file:
OP_String8	sqlite/sqlite3.c	/^#define OP_String8 /;"	d	file:
OP_Subtract	sqlite/sqlite3.c	/^#define OP_Subtract /;"	d	file:
OP_TableLock	sqlite/sqlite3.c	/^#define OP_TableLock /;"	d	file:
OP_Transaction	sqlite/sqlite3.c	/^#define OP_Transaction /;"	d	file:
OP_VBegin	sqlite/sqlite3.c	/^#define OP_VBegin /;"	d	file:
OP_VColumn	sqlite/sqlite3.c	/^#define OP_VColumn /;"	d	file:
OP_VCreate	sqlite/sqlite3.c	/^#define OP_VCreate /;"	d	file:
OP_VDestroy	sqlite/sqlite3.c	/^#define OP_VDestroy /;"	d	file:
OP_VFilter	sqlite/sqlite3.c	/^#define OP_VFilter /;"	d	file:
OP_VNext	sqlite/sqlite3.c	/^#define OP_VNext /;"	d	file:
OP_VOpen	sqlite/sqlite3.c	/^#define OP_VOpen /;"	d	file:
OP_VRename	sqlite/sqlite3.c	/^#define OP_VRename /;"	d	file:
OP_VUpdate	sqlite/sqlite3.c	/^#define OP_VUpdate /;"	d	file:
OP_Vacuum	sqlite/sqlite3.c	/^#define OP_Vacuum /;"	d	file:
OP_Variable	sqlite/sqlite3.c	/^#define OP_Variable /;"	d	file:
OP_Yield	sqlite/sqlite3.c	/^#define OP_Yield /;"	d	file:
OSTRACE	sqlite/sqlite3.c	/^# define OSTRACE(/;"	d	file:
OS_VXWORKS	sqlite/sqlite3.c	/^#define OS_VXWORKS /;"	d	file:
ObjectSizeException	include/common/exception.h	/^  ObjectSizeException(std::string msg)$/;"	f	class:cmudb::ObjectSizeException
ObjectSizeException	include/common/exception.h	/^class ObjectSizeException : public Exception {$/;"	c	namespace:cmudb
Op	sqlite/sqlite3.c	/^typedef struct VdbeOp Op;$/;"	t	typeref:struct:VdbeOp	file:
OpenSession	sqlite/shell.c	/^struct OpenSession {$/;"	s	file:
OpenSession	sqlite/shell.c	/^typedef struct OpenSession OpenSession;$/;"	t	typeref:struct:OpenSession	file:
OperateNull	include/type/value.h	/^  inline Value OperateNull(const Value &o) const {$/;"	f	class:cmudb::Value	typeref:typename:Value
OperateNull	type/bigint_type.cpp	/^Value BigintType::OperateNull(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::BigintType	typeref:typename:Value
OperateNull	type/decimal_type.cpp	/^Value DecimalType::OperateNull(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::DecimalType	typeref:typename:Value
OperateNull	type/integer_type.cpp	/^Value IntegerType::OperateNull(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::IntegerType	typeref:typename:Value
OperateNull	type/smallint_type.cpp	/^Value SmallintType::OperateNull(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::SmallintType	typeref:typename:Value
OperateNull	type/tinyint_type.cpp	/^Value TinyintType::OperateNull(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::TinyintType	typeref:typename:Value
OperateNull	type/type.cpp	/^Value Type::OperateNull(const Value &val __attribute__((unused)),$/;"	f	class:cmudb::Type	typeref:typename:Value
OptimizationDisabled	sqlite/sqlite3.c	/^#define OptimizationDisabled(/;"	d	file:
OptimizationEnabled	sqlite/sqlite3.c	/^#define OptimizationEnabled(/;"	d	file:
P4_ADVANCE	sqlite/sqlite3.c	/^#define P4_ADVANCE /;"	d	file:
P4_COLLSEQ	sqlite/sqlite3.c	/^#define P4_COLLSEQ /;"	d	file:
P4_DYNAMIC	sqlite/sqlite3.c	/^#define P4_DYNAMIC /;"	d	file:
P4_EXPR	sqlite/sqlite3.c	/^#define P4_EXPR /;"	d	file:
P4_FUNCCTX	sqlite/sqlite3.c	/^#define P4_FUNCCTX /;"	d	file:
P4_FUNCDEF	sqlite/sqlite3.c	/^#define P4_FUNCDEF /;"	d	file:
P4_INT32	sqlite/sqlite3.c	/^#define P4_INT32 /;"	d	file:
P4_INT64	sqlite/sqlite3.c	/^#define P4_INT64 /;"	d	file:
P4_INTARRAY	sqlite/sqlite3.c	/^#define P4_INTARRAY /;"	d	file:
P4_KEYINFO	sqlite/sqlite3.c	/^#define P4_KEYINFO /;"	d	file:
P4_MEM	sqlite/sqlite3.c	/^#define P4_MEM /;"	d	file:
P4_NOTUSED	sqlite/sqlite3.c	/^#define P4_NOTUSED /;"	d	file:
P4_REAL	sqlite/sqlite3.c	/^#define P4_REAL /;"	d	file:
P4_STATIC	sqlite/sqlite3.c	/^#define P4_STATIC /;"	d	file:
P4_SUBPROGRAM	sqlite/sqlite3.c	/^#define P4_SUBPROGRAM /;"	d	file:
P4_TABLE	sqlite/sqlite3.c	/^#define P4_TABLE /;"	d	file:
P4_TRANSIENT	sqlite/sqlite3.c	/^#define P4_TRANSIENT /;"	d	file:
P4_VTAB	sqlite/sqlite3.c	/^#define P4_VTAB /;"	d	file:
P5_ConstraintCheck	sqlite/sqlite3.c	/^#define P5_ConstraintCheck /;"	d	file:
P5_ConstraintFK	sqlite/sqlite3.c	/^#define P5_ConstraintFK /;"	d	file:
P5_ConstraintNotNull	sqlite/sqlite3.c	/^#define P5_ConstraintNotNull /;"	d	file:
P5_ConstraintUnique	sqlite/sqlite3.c	/^#define P5_ConstraintUnique /;"	d	file:
PAGER_CACHESPILL	sqlite/sqlite3.c	/^#define PAGER_CACHESPILL /;"	d	file:
PAGER_CKPT_FULLFSYNC	sqlite/sqlite3.c	/^#define PAGER_CKPT_FULLFSYNC /;"	d	file:
PAGER_FLAGS_MASK	sqlite/sqlite3.c	/^#define PAGER_FLAGS_MASK /;"	d	file:
PAGER_FULLFSYNC	sqlite/sqlite3.c	/^#define PAGER_FULLFSYNC /;"	d	file:
PAGER_GET_NOCONTENT	sqlite/sqlite3.c	/^#define PAGER_GET_NOCONTENT /;"	d	file:
PAGER_GET_READONLY	sqlite/sqlite3.c	/^#define PAGER_GET_READONLY /;"	d	file:
PAGER_JOURNALMODE_DELETE	sqlite/sqlite3.c	/^#define PAGER_JOURNALMODE_DELETE /;"	d	file:
PAGER_JOURNALMODE_MEMORY	sqlite/sqlite3.c	/^#define PAGER_JOURNALMODE_MEMORY /;"	d	file:
PAGER_JOURNALMODE_OFF	sqlite/sqlite3.c	/^#define PAGER_JOURNALMODE_OFF /;"	d	file:
PAGER_JOURNALMODE_PERSIST	sqlite/sqlite3.c	/^#define PAGER_JOURNALMODE_PERSIST /;"	d	file:
PAGER_JOURNALMODE_QUERY	sqlite/sqlite3.c	/^#define PAGER_JOURNALMODE_QUERY /;"	d	file:
PAGER_JOURNALMODE_TRUNCATE	sqlite/sqlite3.c	/^#define PAGER_JOURNALMODE_TRUNCATE /;"	d	file:
PAGER_JOURNALMODE_WAL	sqlite/sqlite3.c	/^#define PAGER_JOURNALMODE_WAL /;"	d	file:
PAGER_LOCKINGMODE_EXCLUSIVE	sqlite/sqlite3.c	/^#define PAGER_LOCKINGMODE_EXCLUSIVE /;"	d	file:
PAGER_LOCKINGMODE_NORMAL	sqlite/sqlite3.c	/^#define PAGER_LOCKINGMODE_NORMAL /;"	d	file:
PAGER_LOCKINGMODE_QUERY	sqlite/sqlite3.c	/^#define PAGER_LOCKINGMODE_QUERY /;"	d	file:
PAGER_MEMORY	sqlite/sqlite3.c	/^#define PAGER_MEMORY /;"	d	file:
PAGER_MJ_PGNO	sqlite/sqlite3.c	/^#define PAGER_MJ_PGNO(/;"	d	file:
PAGER_OMIT_JOURNAL	sqlite/sqlite3.c	/^#define PAGER_OMIT_JOURNAL /;"	d	file:
PAGER_SYNCHRONOUS_EXTRA	sqlite/sqlite3.c	/^#define PAGER_SYNCHRONOUS_EXTRA /;"	d	file:
PAGER_SYNCHRONOUS_FULL	sqlite/sqlite3.c	/^#define PAGER_SYNCHRONOUS_FULL /;"	d	file:
PAGER_SYNCHRONOUS_MASK	sqlite/sqlite3.c	/^#define PAGER_SYNCHRONOUS_MASK /;"	d	file:
PAGER_SYNCHRONOUS_NORMAL	sqlite/sqlite3.c	/^#define PAGER_SYNCHRONOUS_NORMAL /;"	d	file:
PAGER_SYNCHRONOUS_OFF	sqlite/sqlite3.c	/^#define PAGER_SYNCHRONOUS_OFF /;"	d	file:
PAGE_SIZE	include/common/config.h	/^#define PAGE_SIZE /;"	d
PARSE_HDR_SZ	sqlite/sqlite3.c	/^#define PARSE_HDR_SZ /;"	d	file:
PARSE_RECURSE_SZ	sqlite/sqlite3.c	/^#define PARSE_RECURSE_SZ /;"	d	file:
PARSE_TAIL	sqlite/sqlite3.c	/^#define PARSE_TAIL(/;"	d	file:
PARSE_TAIL_SZ	sqlite/sqlite3.c	/^#define PARSE_TAIL_SZ /;"	d	file:
PARTLY_WITHIN	include/sqlite/sqlite3.h	/^#define PARTLY_WITHIN /;"	d
PARTLY_WITHIN	sqlite/sqlite3.c	/^#define PARTLY_WITHIN /;"	d	file:
PCache	sqlite/sqlite3.c	/^typedef struct PCache PCache;$/;"	t	typeref:struct:PCache	file:
PELOTON_BOOLEAN_MAX	include/type/limits.h	/^static const int8_t PELOTON_BOOLEAN_MAX = 1;$/;"	v	namespace:cmudb	typeref:typename:const int8_t
PELOTON_BOOLEAN_MIN	include/type/limits.h	/^static const int8_t PELOTON_BOOLEAN_MIN = 0;$/;"	v	namespace:cmudb	typeref:typename:const int8_t
PELOTON_BOOLEAN_NULL	include/type/limits.h	/^static const int8_t PELOTON_BOOLEAN_NULL = SCHAR_MIN;$/;"	v	namespace:cmudb	typeref:typename:const int8_t
PELOTON_DATE_MAX	include/type/limits.h	/^static const uint64_t PELOTON_DATE_MAX = INT_MAX;$/;"	v	namespace:cmudb	typeref:typename:const uint64_t
PELOTON_DATE_MIN	include/type/limits.h	/^static const uint32_t PELOTON_DATE_MIN = 0;$/;"	v	namespace:cmudb	typeref:typename:const uint32_t
PELOTON_DATE_NULL	include/type/limits.h	/^static const uint64_t PELOTON_DATE_NULL = 0;$/;"	v	namespace:cmudb	typeref:typename:const uint64_t
PELOTON_DECIMAL_MAX	include/type/limits.h	/^static const double PELOTON_DECIMAL_MAX = DBL_MAX;$/;"	v	namespace:cmudb	typeref:typename:const double
PELOTON_DECIMAL_MIN	include/type/limits.h	/^static const double PELOTON_DECIMAL_MIN = FLT_LOWEST;$/;"	v	namespace:cmudb	typeref:typename:const double
PELOTON_DECIMAL_NULL	include/type/limits.h	/^static const double PELOTON_DECIMAL_NULL = DBL_LOWEST;$/;"	v	namespace:cmudb	typeref:typename:const double
PELOTON_INT16_MAX	include/type/limits.h	/^static const int16_t PELOTON_INT16_MAX = SHRT_MAX;$/;"	v	namespace:cmudb	typeref:typename:const int16_t
PELOTON_INT16_MIN	include/type/limits.h	/^static const int16_t PELOTON_INT16_MIN = (SHRT_MIN + 1);$/;"	v	namespace:cmudb	typeref:typename:const int16_t
PELOTON_INT16_NULL	include/type/limits.h	/^static const int16_t PELOTON_INT16_NULL = SHRT_MIN;$/;"	v	namespace:cmudb	typeref:typename:const int16_t
PELOTON_INT32_MAX	include/type/limits.h	/^static const int32_t PELOTON_INT32_MAX = INT_MAX;$/;"	v	namespace:cmudb	typeref:typename:const int32_t
PELOTON_INT32_MIN	include/type/limits.h	/^static const int32_t PELOTON_INT32_MIN = (INT_MIN + 1);$/;"	v	namespace:cmudb	typeref:typename:const int32_t
PELOTON_INT32_NULL	include/type/limits.h	/^static const int32_t PELOTON_INT32_NULL = INT_MIN;$/;"	v	namespace:cmudb	typeref:typename:const int32_t
PELOTON_INT64_MAX	include/type/limits.h	/^static const int64_t PELOTON_INT64_MAX = LLONG_MAX;$/;"	v	namespace:cmudb	typeref:typename:const int64_t
PELOTON_INT64_MIN	include/type/limits.h	/^static const int64_t PELOTON_INT64_MIN = (LLONG_MIN + 1);$/;"	v	namespace:cmudb	typeref:typename:const int64_t
PELOTON_INT64_NULL	include/type/limits.h	/^static const int64_t PELOTON_INT64_NULL = LLONG_MIN;$/;"	v	namespace:cmudb	typeref:typename:const int64_t
PELOTON_INT8_MAX	include/type/limits.h	/^static const int8_t PELOTON_INT8_MAX = SCHAR_MAX;$/;"	v	namespace:cmudb	typeref:typename:const int8_t
PELOTON_INT8_MIN	include/type/limits.h	/^static const int8_t PELOTON_INT8_MIN = (SCHAR_MIN + 1);$/;"	v	namespace:cmudb	typeref:typename:const int8_t
PELOTON_INT8_NULL	include/type/limits.h	/^static const int8_t PELOTON_INT8_NULL = SCHAR_MIN;$/;"	v	namespace:cmudb	typeref:typename:const int8_t
PELOTON_TEXT_MAX_LEN	include/type/limits.h	/^static const uint32_t PELOTON_TEXT_MAX_LEN = 1000000000;$/;"	v	namespace:cmudb	typeref:typename:const uint32_t
PELOTON_TIMESTAMP_MAX	include/type/limits.h	/^static const uint64_t PELOTON_TIMESTAMP_MAX = 11231999986399999999U;$/;"	v	namespace:cmudb	typeref:typename:const uint64_t
PELOTON_TIMESTAMP_MIN	include/type/limits.h	/^static const uint64_t PELOTON_TIMESTAMP_MIN = 0;$/;"	v	namespace:cmudb	typeref:typename:const uint64_t
PELOTON_TIMESTAMP_NULL	include/type/limits.h	/^static const uint64_t PELOTON_TIMESTAMP_NULL = ULLONG_MAX;$/;"	v	namespace:cmudb	typeref:typename:const uint64_t
PELOTON_UINT64_MAX	include/type/limits.h	/^static const uint64_t PELOTON_UINT64_MAX = ULLONG_MAX - 1;$/;"	v	namespace:cmudb	typeref:typename:const uint64_t
PELOTON_VALUE_NULL	include/type/limits.h	/^static const uint32_t PELOTON_VALUE_NULL = UINT_MAX;$/;"	v	namespace:cmudb	typeref:typename:const uint32_t
PELOTON_VARCHAR_MAX_LEN	include/type/limits.h	/^static const uint32_t PELOTON_VARCHAR_MAX_LEN = UINT_MAX;$/;"	v	namespace:cmudb	typeref:typename:const uint32_t
PENDING_BYTE	sqlite/sqlite3.c	/^# define PENDING_BYTE /;"	d	file:
PENDING_LOCK	sqlite/sqlite3.c	/^#define PENDING_LOCK /;"	d	file:
PGHDR_CLEAN	sqlite/sqlite3.c	/^#define PGHDR_CLEAN /;"	d	file:
PGHDR_DIRTY	sqlite/sqlite3.c	/^#define PGHDR_DIRTY /;"	d	file:
PGHDR_DONT_WRITE	sqlite/sqlite3.c	/^#define PGHDR_DONT_WRITE /;"	d	file:
PGHDR_MMAP	sqlite/sqlite3.c	/^#define PGHDR_MMAP /;"	d	file:
PGHDR_NEED_SYNC	sqlite/sqlite3.c	/^#define PGHDR_NEED_SYNC /;"	d	file:
PGHDR_WAL_APPEND	sqlite/sqlite3.c	/^#define PGHDR_WAL_APPEND /;"	d	file:
PGHDR_WRITEABLE	sqlite/sqlite3.c	/^#define PGHDR_WRITEABLE /;"	d	file:
Page	include/page/page.h	/^  Page() { ResetMemory(); }$/;"	f	class:cmudb::Page
Page	include/page/page.h	/^class Page {$/;"	c	namespace:cmudb
Pager	sqlite/sqlite3.c	/^typedef struct Pager Pager;$/;"	t	typeref:struct:Pager	file:
Parse	sqlite/sqlite3.c	/^struct Parse {$/;"	s	file:
Parse	sqlite/sqlite3.c	/^typedef struct Parse Parse;$/;"	t	typeref:struct:Parse	file:
ParseCreateStatement	vtable/virtual_table.cpp	/^Schema *ParseCreateStatement(const std::string &sql_base) {$/;"	f	namespace:cmudb	typeref:typename:Schema *
ParseIndexStatement	vtable/virtual_table.cpp	/^IndexMetadata *ParseIndexStatement(std::string &sql,$/;"	f	namespace:cmudb	typeref:typename:IndexMetadata *
ParserException	include/common/exception.h	/^  ParserException(std::string msg) : Exception(EXCEPTION_TYPE_PARSER, msg) {}$/;"	f	class:cmudb::ParserException
ParserException	include/common/exception.h	/^class ParserException : public Exception {$/;"	c	namespace:cmudb
PgHdr	sqlite/sqlite3.c	/^struct PgHdr {$/;"	s	file:
PgHdr	sqlite/sqlite3.c	/^typedef struct PgHdr PgHdr;$/;"	t	typeref:struct:PgHdr	file:
Pgno	sqlite/sqlite3.c	/^typedef u32 Pgno;$/;"	t	typeref:typename:u32	file:
PlannerException	include/common/exception.h	/^  PlannerException(std::string msg) : Exception(EXCEPTION_TYPE_PLANNER, msg) {}$/;"	f	class:cmudb::PlannerException
PlannerException	include/common/exception.h	/^class PlannerException : public Exception {$/;"	c	namespace:cmudb
PopulateNewRoot	page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::PopulateNewRoot($/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
PreUpdate	sqlite/sqlite3.c	/^struct PreUpdate {$/;"	s	file:
PreUpdate	sqlite/sqlite3.c	/^typedef struct PreUpdate PreUpdate;$/;"	t	typeref:struct:PreUpdate	file:
PrintfArguments	sqlite/sqlite3.c	/^struct PrintfArguments {$/;"	s	file:
PrintfArguments	sqlite/sqlite3.c	/^typedef struct PrintfArguments PrintfArguments;$/;"	t	typeref:struct:PrintfArguments	file:
QueueUpChildren	page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::QueueUpChildren($/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
REARGUARD	sqlite/sqlite3.c	/^#define REARGUARD /;"	d	file:
RESERVED_BYTE	sqlite/sqlite3.c	/^#define RESERVED_BYTE /;"	d	file:
RESERVED_LOCK	sqlite/sqlite3.c	/^#define RESERVED_LOCK /;"	d	file:
RID	include/common/rid.h	/^  RID() : page_id_(INVALID_PAGE_ID), slot_num_(-1){}; \/\/ invalid rid$/;"	f	class:cmudb::RID
RID	include/common/rid.h	/^  RID(int64_t rid) : page_id_(rid >> 32), slot_num_(rid){};$/;"	f	class:cmudb::RID
RID	include/common/rid.h	/^  RID(page_id_t page_id, int slot_num)$/;"	f	class:cmudb::RID
RID	include/common/rid.h	/^class RID {$/;"	c	namespace:cmudb
RLatch	include/page/page.h	/^  inline void RLatch() { rwlatch_.RLock(); }$/;"	f	class:cmudb::Page	typeref:typename:void
RLock	include/common/rwmutex.h	/^  void RLock() {$/;"	f	class:cmudb::RWMutex	typeref:typename:void
ROL64	sqlite/shell.c	/^# define ROL64(/;"	d	file:
ROLLBACKDELETE	include/logging/log_record.h	/^  ROLLBACKDELETE,$/;"	e	enum:cmudb::LogRecordType
ROUND8	sqlite/sqlite3.c	/^#define ROUND8(/;"	d	file:
ROUNDDOWN8	sqlite/sqlite3.c	/^#define ROUNDDOWN8(/;"	d	file:
RTrim	include/common/string_utility.h	/^  static inline void RTrim(std::string &s) {$/;"	f	class:cmudb::StringUtility	typeref:typename:void
RUnlatch	include/page/page.h	/^  inline void RUnlatch() { rwlatch_.RUnlock(); }$/;"	f	class:cmudb::Page	typeref:typename:void
RUnlock	include/common/rwmutex.h	/^  void RUnlock() {$/;"	f	class:cmudb::RWMutex	typeref:typename:void
RWMutex	include/common/rwmutex.h	/^  RWMutex() : reader_count_(0), writer_entered_(false) {}$/;"	f	class:cmudb::RWMutex
RWMutex	include/common/rwmutex.h	/^class RWMutex {$/;"	c	namespace:cmudb
ReadLog	disk/disk_manager.cpp	/^bool DiskManager::ReadLog(char *log_data, int size, int offset) {$/;"	f	class:cmudb::DiskManager	typeref:typename:bool
ReadPage	disk/disk_manager.cpp	/^void DiskManager::ReadPage(page_id_t page_id, char *page_data) {$/;"	f	class:cmudb::DiskManager	typeref:typename:void
RecordCompare	sqlite/sqlite3.c	/^typedef int (*RecordCompare)(int,const void*,UnpackedRecord*);$/;"	t	typeref:typename:int (*)(int,const void *,UnpackedRecord *)	file:
Redistribute	index/b_plus_tree.cpp	/^void BPLUSTREE_TYPE::Redistribute(N *neighbor_node, N *node, int index) {}$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
Redo	logging/log_recovery.cpp	/^void LogRecovery::Redo() {}$/;"	f	class:cmudb::LogRecovery	typeref:typename:void
Remove	hash/extendible_hash.cpp	/^bool ExtendibleHash<K, V>::Remove(const K &key) {$/;"	f	class:cmudb::ExtendibleHash	typeref:typename:bool
Remove	index/b_plus_tree.cpp	/^void BPLUSTREE_TYPE::Remove(const KeyType &key, Transaction *transaction) {}$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
Remove	page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::Remove(int index) {}$/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
RemoveAndDeleteRecord	page/b_plus_tree_leaf_page.cpp	/^int B_PLUS_TREE_LEAF_PAGE_TYPE::RemoveAndDeleteRecord($/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS int
RemoveAndReturnOnlyChild	page/b_plus_tree_internal_page.cpp	/^ValueType B_PLUS_TREE_INTERNAL_PAGE_TYPE::RemoveAndReturnOnlyChild() {$/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS ValueType
RemoveFromFile	index/b_plus_tree.cpp	/^void BPLUSTREE_TYPE::RemoveFromFile(const std::string &file_name,$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
Replacer	include/buffer/replacer.h	/^  Replacer() {}$/;"	f	class:cmudb::Replacer
Replacer	include/buffer/replacer.h	/^template <typename T> class Replacer {$/;"	c	namespace:cmudb
ResetMemory	include/page/page.h	/^  inline void ResetMemory() { memset(data_, 0, PAGE_SIZE); }$/;"	f	class:cmudb::Page	typeref:typename:void
RollbackDelete	page/table_page.cpp	/^void TablePage::RollbackDelete(const RID &rid, Transaction *txn,$/;"	f	class:cmudb::TablePage	typeref:typename:void
RollbackDelete	table/table_heap.cpp	/^void TableHeap::RollbackDelete(const RID &rid, Transaction *txn) {$/;"	f	class:cmudb::TableHeap	typeref:typename:void
RowSet	sqlite/sqlite3.c	/^typedef struct RowSet RowSet;$/;"	t	typeref:struct:RowSet	file:
RunFlushThread	logging/log_manager.cpp	/^void LogManager::RunFlushThread() {}$/;"	f	class:cmudb::LogManager	typeref:typename:void
SAVEPOINT_BEGIN	sqlite/sqlite3.c	/^#define SAVEPOINT_BEGIN /;"	d	file:
SAVEPOINT_RELEASE	sqlite/sqlite3.c	/^#define SAVEPOINT_RELEASE /;"	d	file:
SAVEPOINT_ROLLBACK	sqlite/sqlite3.c	/^#define SAVEPOINT_ROLLBACK /;"	d	file:
SCHEMA_ENC	sqlite/sqlite3.c	/^#define SCHEMA_ENC(/;"	d	file:
SCHEMA_TABLE	sqlite/sqlite3.c	/^#define SCHEMA_TABLE(/;"	d	file:
SELECTTRACE_ENABLED	sqlite/sqlite3.c	/^# define SELECTTRACE_ENABLED /;"	d	file:
SEP_Column	sqlite/shell.c	/^#define SEP_Column /;"	d	file:
SEP_Comma	sqlite/shell.c	/^#define SEP_Comma /;"	d	file:
SEP_CrLf	sqlite/shell.c	/^#define SEP_CrLf /;"	d	file:
SEP_Record	sqlite/shell.c	/^#define SEP_Record /;"	d	file:
SEP_Row	sqlite/shell.c	/^#define SEP_Row /;"	d	file:
SEP_Space	sqlite/shell.c	/^#define SEP_Space /;"	d	file:
SEP_Tab	sqlite/shell.c	/^#define SEP_Tab /;"	d	file:
SEP_Unit	sqlite/shell.c	/^#define SEP_Unit /;"	d	file:
SET_FULLSYNC	sqlite/sqlite3.c	/^# define SET_FULLSYNC(/;"	d	file:
SF_Aggregate	sqlite/sqlite3.c	/^#define SF_Aggregate /;"	d	file:
SF_All	sqlite/sqlite3.c	/^#define SF_All /;"	d	file:
SF_Compound	sqlite/sqlite3.c	/^#define SF_Compound /;"	d	file:
SF_Converted	sqlite/sqlite3.c	/^#define SF_Converted /;"	d	file:
SF_Distinct	sqlite/sqlite3.c	/^#define SF_Distinct /;"	d	file:
SF_Expanded	sqlite/sqlite3.c	/^#define SF_Expanded /;"	d	file:
SF_FixedLimit	sqlite/sqlite3.c	/^#define SF_FixedLimit /;"	d	file:
SF_HasAgg	sqlite/sqlite3.c	/^#define SF_HasAgg /;"	d	file:
SF_HasTypeInfo	sqlite/sqlite3.c	/^#define SF_HasTypeInfo /;"	d	file:
SF_IncludeHidden	sqlite/sqlite3.c	/^#define SF_IncludeHidden /;"	d	file:
SF_MaybeConvert	sqlite/sqlite3.c	/^#define SF_MaybeConvert /;"	d	file:
SF_MinMaxAgg	sqlite/sqlite3.c	/^#define SF_MinMaxAgg /;"	d	file:
SF_MultiValue	sqlite/sqlite3.c	/^#define SF_MultiValue /;"	d	file:
SF_NestedFrom	sqlite/sqlite3.c	/^#define SF_NestedFrom /;"	d	file:
SF_Recursive	sqlite/sqlite3.c	/^#define SF_Recursive /;"	d	file:
SF_Resolved	sqlite/sqlite3.c	/^#define SF_Resolved /;"	d	file:
SF_UsesEphemeral	sqlite/sqlite3.c	/^#define SF_UsesEphemeral /;"	d	file:
SF_Values	sqlite/sqlite3.c	/^#define SF_Values /;"	d	file:
SHA3Context	sqlite/shell.c	/^struct SHA3Context {$/;"	s	file:
SHA3Context	sqlite/shell.c	/^typedef struct SHA3Context SHA3Context;$/;"	t	typeref:struct:SHA3Context	file:
SHA3Final	sqlite/shell.c	/^static unsigned char *SHA3Final(SHA3Context *p){$/;"	f	typeref:typename:unsigned char *	file:
SHA3Init	sqlite/shell.c	/^static void SHA3Init(SHA3Context *p, int iSize){$/;"	f	typeref:typename:void	file:
SHA3Update	sqlite/shell.c	/^static void SHA3Update($/;"	f	typeref:typename:void	file:
SHA3_BYTEORDER	sqlite/shell.c	/^#   define SHA3_BYTEORDER /;"	d	file:
SHARED_FIRST	sqlite/sqlite3.c	/^#define SHARED_FIRST /;"	d	file:
SHARED_LOCK	sqlite/sqlite3.c	/^#define SHARED_LOCK /;"	d	file:
SHARED_SIZE	sqlite/sqlite3.c	/^#define SHARED_SIZE /;"	d	file:
SHELL_USE_LOCAL_GETLINE	sqlite/shell.c	/^# define SHELL_USE_LOCAL_GETLINE /;"	d	file:
SHFLG_Backslash	sqlite/shell.c	/^#define SHFLG_Backslash /;"	d	file:
SHFLG_CountChanges	sqlite/shell.c	/^#define SHFLG_CountChanges /;"	d	file:
SHFLG_Echo	sqlite/shell.c	/^#define SHFLG_Echo /;"	d	file:
SHFLG_Lookaside	sqlite/shell.c	/^#define SHFLG_Lookaside /;"	d	file:
SHFLG_Pagecache	sqlite/shell.c	/^#define SHFLG_Pagecache /;"	d	file:
SHFLG_PreserveRowid	sqlite/shell.c	/^#define SHFLG_PreserveRowid /;"	d	file:
SHFLG_Scratch	sqlite/shell.c	/^#define SHFLG_Scratch /;"	d	file:
SHRINKING	include/concurrency/transaction.h	/^enum class TransactionState { GROWING, SHRINKING, COMMITTED, ABORTED };$/;"	e	enum:cmudb::TransactionState
SMALLEST_INT64	sqlite/sqlite3.c	/^#define SMALLEST_INT64 /;"	d	file:
SMALLINT	include/type/type_id.h	/^  SMALLINT,$/;"	e	enum:cmudb::TypeId
SMALLINT_COMPARE_FUNC	type/smallint_type.cpp	/^#define SMALLINT_COMPARE_FUNC(/;"	d	file:
SMALLINT_MODIFY_FUNC	type/smallint_type.cpp	/^#define SMALLINT_MODIFY_FUNC(/;"	d	file:
SQLITE3EXT_H	include/sqlite/sqlite3ext.h	/^#define SQLITE3EXT_H$/;"	d
SQLITE3_H	include/sqlite/sqlite3.h	/^#define SQLITE3_H$/;"	d
SQLITE3_H	sqlite/sqlite3.c	/^#define SQLITE3_H$/;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite/sqlite3.c	/^#define SQLITE3_MUTEX_INITIALIZER /;"	d	file:
SQLITE3_TEXT	include/sqlite/sqlite3.h	/^#define SQLITE3_TEXT /;"	d
SQLITE3_TEXT	sqlite/sqlite3.c	/^#define SQLITE3_TEXT /;"	d	file:
SQLITECONFIG_H	sqlite/sqlite3.c	/^#define SQLITECONFIG_H /;"	d	file:
SQLITEINT_H	sqlite/sqlite3.c	/^#define SQLITEINT_H$/;"	d	file:
SQLITE_ABORT	include/sqlite/sqlite3.h	/^#define SQLITE_ABORT /;"	d
SQLITE_ABORT	sqlite/sqlite3.c	/^#define SQLITE_ABORT /;"	d	file:
SQLITE_ABORT_ROLLBACK	include/sqlite/sqlite3.h	/^#define SQLITE_ABORT_ROLLBACK /;"	d
SQLITE_ABORT_ROLLBACK	sqlite/sqlite3.c	/^#define SQLITE_ABORT_ROLLBACK /;"	d	file:
SQLITE_ACCESS_EXISTS	include/sqlite/sqlite3.h	/^#define SQLITE_ACCESS_EXISTS /;"	d
SQLITE_ACCESS_EXISTS	sqlite/sqlite3.c	/^#define SQLITE_ACCESS_EXISTS /;"	d	file:
SQLITE_ACCESS_READ	include/sqlite/sqlite3.h	/^#define SQLITE_ACCESS_READ /;"	d
SQLITE_ACCESS_READ	sqlite/sqlite3.c	/^#define SQLITE_ACCESS_READ /;"	d	file:
SQLITE_ACCESS_READWRITE	include/sqlite/sqlite3.h	/^#define SQLITE_ACCESS_READWRITE /;"	d
SQLITE_ACCESS_READWRITE	sqlite/sqlite3.c	/^#define SQLITE_ACCESS_READWRITE /;"	d	file:
SQLITE_AFF_BLOB	sqlite/sqlite3.c	/^#define SQLITE_AFF_BLOB /;"	d	file:
SQLITE_AFF_INTEGER	sqlite/sqlite3.c	/^#define SQLITE_AFF_INTEGER /;"	d	file:
SQLITE_AFF_MASK	sqlite/sqlite3.c	/^#define SQLITE_AFF_MASK /;"	d	file:
SQLITE_AFF_NUMERIC	sqlite/sqlite3.c	/^#define SQLITE_AFF_NUMERIC /;"	d	file:
SQLITE_AFF_REAL	sqlite/sqlite3.c	/^#define SQLITE_AFF_REAL /;"	d	file:
SQLITE_AFF_TEXT	sqlite/sqlite3.c	/^#define SQLITE_AFF_TEXT /;"	d	file:
SQLITE_ALLOW_COVERING_INDEX_SCAN	sqlite/sqlite3.c	/^# define SQLITE_ALLOW_COVERING_INDEX_SCAN /;"	d	file:
SQLITE_ALTER_TABLE	include/sqlite/sqlite3.h	/^#define SQLITE_ALTER_TABLE /;"	d
SQLITE_ALTER_TABLE	sqlite/sqlite3.c	/^#define SQLITE_ALTER_TABLE /;"	d	file:
SQLITE_AMALGAMATION	sqlite/sqlite3.c	/^#define SQLITE_AMALGAMATION /;"	d	file:
SQLITE_ANALYZE	include/sqlite/sqlite3.h	/^#define SQLITE_ANALYZE /;"	d
SQLITE_ANALYZE	sqlite/sqlite3.c	/^#define SQLITE_ANALYZE /;"	d	file:
SQLITE_ANY	include/sqlite/sqlite3.h	/^#define SQLITE_ANY /;"	d
SQLITE_ANY	sqlite/sqlite3.c	/^#define SQLITE_ANY /;"	d	file:
SQLITE_API	include/sqlite/sqlite3.h	/^# define SQLITE_API$/;"	d
SQLITE_API	sqlite/sqlite3.c	/^# define SQLITE_API$/;"	d	file:
SQLITE_APICALL	include/sqlite/sqlite3.h	/^# define SQLITE_APICALL$/;"	d
SQLITE_APICALL	sqlite/sqlite3.c	/^# define SQLITE_APICALL$/;"	d	file:
SQLITE_ASCII	sqlite/sqlite3.c	/^# define SQLITE_ASCII /;"	d	file:
SQLITE_ATTACH	include/sqlite/sqlite3.h	/^#define SQLITE_ATTACH /;"	d
SQLITE_ATTACH	sqlite/sqlite3.c	/^#define SQLITE_ATTACH /;"	d	file:
SQLITE_AUTH	include/sqlite/sqlite3.h	/^#define SQLITE_AUTH /;"	d
SQLITE_AUTH	sqlite/sqlite3.c	/^#define SQLITE_AUTH /;"	d	file:
SQLITE_AUTH_USER	include/sqlite/sqlite3.h	/^#define SQLITE_AUTH_USER /;"	d
SQLITE_AUTH_USER	sqlite/sqlite3.c	/^#define SQLITE_AUTH_USER /;"	d	file:
SQLITE_AllOpts	sqlite/sqlite3.c	/^#define SQLITE_AllOpts /;"	d	file:
SQLITE_AutoIndex	sqlite/sqlite3.c	/^#define SQLITE_AutoIndex /;"	d	file:
SQLITE_BIGENDIAN	sqlite/sqlite3.c	/^# define SQLITE_BIGENDIAN /;"	d	file:
SQLITE_BIG_DBL	sqlite/sqlite3.c	/^#   define SQLITE_BIG_DBL /;"	d	file:
SQLITE_BIG_DBL	sqlite/sqlite3.c	/^# define SQLITE_BIG_DBL /;"	d	file:
SQLITE_BLOB	include/sqlite/sqlite3.h	/^#define SQLITE_BLOB /;"	d
SQLITE_BLOB	sqlite/sqlite3.c	/^#define SQLITE_BLOB /;"	d	file:
SQLITE_BTREE_H	sqlite/sqlite3.c	/^#define SQLITE_BTREE_H$/;"	d	file:
SQLITE_BUSY	include/sqlite/sqlite3.h	/^#define SQLITE_BUSY /;"	d
SQLITE_BUSY	sqlite/sqlite3.c	/^#define SQLITE_BUSY /;"	d	file:
SQLITE_BUSY_RECOVERY	include/sqlite/sqlite3.h	/^#define SQLITE_BUSY_RECOVERY /;"	d
SQLITE_BUSY_RECOVERY	sqlite/sqlite3.c	/^#define SQLITE_BUSY_RECOVERY /;"	d	file:
SQLITE_BUSY_SNAPSHOT	include/sqlite/sqlite3.h	/^#define SQLITE_BUSY_SNAPSHOT /;"	d
SQLITE_BUSY_SNAPSHOT	sqlite/sqlite3.c	/^#define SQLITE_BUSY_SNAPSHOT /;"	d	file:
SQLITE_BYTEORDER	sqlite/sqlite3.c	/^#   define SQLITE_BYTEORDER /;"	d	file:
SQLITE_CALLBACK	include/sqlite/sqlite3.h	/^# define SQLITE_CALLBACK$/;"	d
SQLITE_CALLBACK	sqlite/sqlite3.c	/^# define SQLITE_CALLBACK$/;"	d	file:
SQLITE_CANTOPEN	include/sqlite/sqlite3.h	/^#define SQLITE_CANTOPEN /;"	d
SQLITE_CANTOPEN	sqlite/sqlite3.c	/^#define SQLITE_CANTOPEN /;"	d	file:
SQLITE_CANTOPEN_BKPT	sqlite/sqlite3.c	/^#define SQLITE_CANTOPEN_BKPT /;"	d	file:
SQLITE_CANTOPEN_CONVPATH	include/sqlite/sqlite3.h	/^#define SQLITE_CANTOPEN_CONVPATH /;"	d
SQLITE_CANTOPEN_CONVPATH	sqlite/sqlite3.c	/^#define SQLITE_CANTOPEN_CONVPATH /;"	d	file:
SQLITE_CANTOPEN_FULLPATH	include/sqlite/sqlite3.h	/^#define SQLITE_CANTOPEN_FULLPATH /;"	d
SQLITE_CANTOPEN_FULLPATH	sqlite/sqlite3.c	/^#define SQLITE_CANTOPEN_FULLPATH /;"	d	file:
SQLITE_CANTOPEN_ISDIR	include/sqlite/sqlite3.h	/^#define SQLITE_CANTOPEN_ISDIR /;"	d
SQLITE_CANTOPEN_ISDIR	sqlite/sqlite3.c	/^#define SQLITE_CANTOPEN_ISDIR /;"	d	file:
SQLITE_CANTOPEN_NOTEMPDIR	include/sqlite/sqlite3.h	/^#define SQLITE_CANTOPEN_NOTEMPDIR /;"	d
SQLITE_CANTOPEN_NOTEMPDIR	sqlite/sqlite3.c	/^#define SQLITE_CANTOPEN_NOTEMPDIR /;"	d	file:
SQLITE_CDECL	include/sqlite/sqlite3.h	/^# define SQLITE_CDECL$/;"	d
SQLITE_CDECL	sqlite/sqlite3.c	/^# define SQLITE_CDECL$/;"	d	file:
SQLITE_CDECL	sqlite/sqlite3.c	/^SQLITE_API SQLITE_EXTERN void (SQLITE_CDECL *sqlite3IoTrace)(const char*,...);$/;"	v	typeref:typename:SQLITE_API SQLITE_EXTERN void (* sqlite3IoTrace)(const char *,...)
SQLITE_CHANGESET_ABORT	include/sqlite/sqlite3.h	/^#define SQLITE_CHANGESET_ABORT /;"	d
SQLITE_CHANGESET_ABORT	sqlite/sqlite3.c	/^#define SQLITE_CHANGESET_ABORT /;"	d	file:
SQLITE_CHANGESET_CONFLICT	include/sqlite/sqlite3.h	/^#define SQLITE_CHANGESET_CONFLICT /;"	d
SQLITE_CHANGESET_CONFLICT	sqlite/sqlite3.c	/^#define SQLITE_CHANGESET_CONFLICT /;"	d	file:
SQLITE_CHANGESET_CONSTRAINT	include/sqlite/sqlite3.h	/^#define SQLITE_CHANGESET_CONSTRAINT /;"	d
SQLITE_CHANGESET_CONSTRAINT	sqlite/sqlite3.c	/^#define SQLITE_CHANGESET_CONSTRAINT /;"	d	file:
SQLITE_CHANGESET_DATA	include/sqlite/sqlite3.h	/^#define SQLITE_CHANGESET_DATA /;"	d
SQLITE_CHANGESET_DATA	sqlite/sqlite3.c	/^#define SQLITE_CHANGESET_DATA /;"	d	file:
SQLITE_CHANGESET_FOREIGN_KEY	include/sqlite/sqlite3.h	/^#define SQLITE_CHANGESET_FOREIGN_KEY /;"	d
SQLITE_CHANGESET_FOREIGN_KEY	sqlite/sqlite3.c	/^#define SQLITE_CHANGESET_FOREIGN_KEY /;"	d	file:
SQLITE_CHANGESET_NOTFOUND	include/sqlite/sqlite3.h	/^#define SQLITE_CHANGESET_NOTFOUND /;"	d
SQLITE_CHANGESET_NOTFOUND	sqlite/sqlite3.c	/^#define SQLITE_CHANGESET_NOTFOUND /;"	d	file:
SQLITE_CHANGESET_OMIT	include/sqlite/sqlite3.h	/^#define SQLITE_CHANGESET_OMIT /;"	d
SQLITE_CHANGESET_OMIT	sqlite/sqlite3.c	/^#define SQLITE_CHANGESET_OMIT /;"	d	file:
SQLITE_CHANGESET_REPLACE	include/sqlite/sqlite3.h	/^#define SQLITE_CHANGESET_REPLACE /;"	d
SQLITE_CHANGESET_REPLACE	sqlite/sqlite3.c	/^#define SQLITE_CHANGESET_REPLACE /;"	d	file:
SQLITE_CHECKPOINT_FULL	include/sqlite/sqlite3.h	/^#define SQLITE_CHECKPOINT_FULL /;"	d
SQLITE_CHECKPOINT_FULL	sqlite/sqlite3.c	/^#define SQLITE_CHECKPOINT_FULL /;"	d	file:
SQLITE_CHECKPOINT_PASSIVE	include/sqlite/sqlite3.h	/^#define SQLITE_CHECKPOINT_PASSIVE /;"	d
SQLITE_CHECKPOINT_PASSIVE	sqlite/sqlite3.c	/^#define SQLITE_CHECKPOINT_PASSIVE /;"	d	file:
SQLITE_CHECKPOINT_RESTART	include/sqlite/sqlite3.h	/^#define SQLITE_CHECKPOINT_RESTART /;"	d
SQLITE_CHECKPOINT_RESTART	sqlite/sqlite3.c	/^#define SQLITE_CHECKPOINT_RESTART /;"	d	file:
SQLITE_CHECKPOINT_TRUNCATE	include/sqlite/sqlite3.h	/^#define SQLITE_CHECKPOINT_TRUNCATE /;"	d
SQLITE_CHECKPOINT_TRUNCATE	sqlite/sqlite3.c	/^#define SQLITE_CHECKPOINT_TRUNCATE /;"	d	file:
SQLITE_CONFIG_COVERING_INDEX_SCAN	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_COVERING_INDEX_SCAN /;"	d
SQLITE_CONFIG_COVERING_INDEX_SCAN	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_COVERING_INDEX_SCAN /;"	d	file:
SQLITE_CONFIG_GETMALLOC	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_GETMALLOC /;"	d
SQLITE_CONFIG_GETMALLOC	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_GETMALLOC /;"	d	file:
SQLITE_CONFIG_GETMUTEX	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_GETMUTEX /;"	d
SQLITE_CONFIG_GETMUTEX	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_GETMUTEX /;"	d	file:
SQLITE_CONFIG_GETPCACHE	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_GETPCACHE /;"	d
SQLITE_CONFIG_GETPCACHE	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_GETPCACHE /;"	d	file:
SQLITE_CONFIG_GETPCACHE2	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_GETPCACHE2 /;"	d
SQLITE_CONFIG_GETPCACHE2	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_GETPCACHE2 /;"	d	file:
SQLITE_CONFIG_HEAP	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_HEAP /;"	d
SQLITE_CONFIG_HEAP	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_HEAP /;"	d	file:
SQLITE_CONFIG_LOG	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_LOG /;"	d
SQLITE_CONFIG_LOG	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_LOG /;"	d	file:
SQLITE_CONFIG_LOOKASIDE	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_LOOKASIDE /;"	d
SQLITE_CONFIG_LOOKASIDE	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_LOOKASIDE /;"	d	file:
SQLITE_CONFIG_MALLOC	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_MALLOC /;"	d
SQLITE_CONFIG_MALLOC	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_MALLOC /;"	d	file:
SQLITE_CONFIG_MEMSTATUS	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_MEMSTATUS /;"	d
SQLITE_CONFIG_MEMSTATUS	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_MEMSTATUS /;"	d	file:
SQLITE_CONFIG_MMAP_SIZE	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_MMAP_SIZE /;"	d
SQLITE_CONFIG_MMAP_SIZE	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_MMAP_SIZE /;"	d	file:
SQLITE_CONFIG_MULTITHREAD	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_MULTITHREAD /;"	d
SQLITE_CONFIG_MULTITHREAD	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_MULTITHREAD /;"	d	file:
SQLITE_CONFIG_MUTEX	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_MUTEX /;"	d
SQLITE_CONFIG_MUTEX	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_MUTEX /;"	d	file:
SQLITE_CONFIG_PAGECACHE	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_PAGECACHE /;"	d
SQLITE_CONFIG_PAGECACHE	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_PAGECACHE /;"	d	file:
SQLITE_CONFIG_PCACHE	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_PCACHE /;"	d
SQLITE_CONFIG_PCACHE	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_PCACHE /;"	d	file:
SQLITE_CONFIG_PCACHE2	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_PCACHE2 /;"	d
SQLITE_CONFIG_PCACHE2	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_PCACHE2 /;"	d	file:
SQLITE_CONFIG_PCACHE_HDRSZ	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_PCACHE_HDRSZ /;"	d
SQLITE_CONFIG_PCACHE_HDRSZ	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_PCACHE_HDRSZ /;"	d	file:
SQLITE_CONFIG_PMASZ	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_PMASZ /;"	d
SQLITE_CONFIG_PMASZ	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_PMASZ /;"	d	file:
SQLITE_CONFIG_SCRATCH	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_SCRATCH /;"	d
SQLITE_CONFIG_SCRATCH	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_SCRATCH /;"	d	file:
SQLITE_CONFIG_SERIALIZED	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_SERIALIZED /;"	d
SQLITE_CONFIG_SERIALIZED	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_SERIALIZED /;"	d	file:
SQLITE_CONFIG_SINGLETHREAD	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_SINGLETHREAD /;"	d
SQLITE_CONFIG_SINGLETHREAD	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_SINGLETHREAD /;"	d	file:
SQLITE_CONFIG_SQLLOG	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_SQLLOG /;"	d
SQLITE_CONFIG_SQLLOG	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_SQLLOG /;"	d	file:
SQLITE_CONFIG_STMTJRNL_SPILL	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_STMTJRNL_SPILL /;"	d
SQLITE_CONFIG_STMTJRNL_SPILL	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_STMTJRNL_SPILL /;"	d	file:
SQLITE_CONFIG_URI	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_URI /;"	d
SQLITE_CONFIG_URI	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_URI /;"	d	file:
SQLITE_CONFIG_WIN32_HEAPSIZE	include/sqlite/sqlite3.h	/^#define SQLITE_CONFIG_WIN32_HEAPSIZE /;"	d
SQLITE_CONFIG_WIN32_HEAPSIZE	sqlite/sqlite3.c	/^#define SQLITE_CONFIG_WIN32_HEAPSIZE /;"	d	file:
SQLITE_CONSTRAINT	include/sqlite/sqlite3.h	/^#define SQLITE_CONSTRAINT /;"	d
SQLITE_CONSTRAINT	sqlite/sqlite3.c	/^#define SQLITE_CONSTRAINT /;"	d	file:
SQLITE_CONSTRAINT_CHECK	include/sqlite/sqlite3.h	/^#define SQLITE_CONSTRAINT_CHECK /;"	d
SQLITE_CONSTRAINT_CHECK	sqlite/sqlite3.c	/^#define SQLITE_CONSTRAINT_CHECK /;"	d	file:
SQLITE_CONSTRAINT_COMMITHOOK	include/sqlite/sqlite3.h	/^#define SQLITE_CONSTRAINT_COMMITHOOK /;"	d
SQLITE_CONSTRAINT_COMMITHOOK	sqlite/sqlite3.c	/^#define SQLITE_CONSTRAINT_COMMITHOOK /;"	d	file:
SQLITE_CONSTRAINT_FOREIGNKEY	include/sqlite/sqlite3.h	/^#define SQLITE_CONSTRAINT_FOREIGNKEY /;"	d
SQLITE_CONSTRAINT_FOREIGNKEY	sqlite/sqlite3.c	/^#define SQLITE_CONSTRAINT_FOREIGNKEY /;"	d	file:
SQLITE_CONSTRAINT_FUNCTION	include/sqlite/sqlite3.h	/^#define SQLITE_CONSTRAINT_FUNCTION /;"	d
SQLITE_CONSTRAINT_FUNCTION	sqlite/sqlite3.c	/^#define SQLITE_CONSTRAINT_FUNCTION /;"	d	file:
SQLITE_CONSTRAINT_NOTNULL	include/sqlite/sqlite3.h	/^#define SQLITE_CONSTRAINT_NOTNULL /;"	d
SQLITE_CONSTRAINT_NOTNULL	sqlite/sqlite3.c	/^#define SQLITE_CONSTRAINT_NOTNULL /;"	d	file:
SQLITE_CONSTRAINT_PRIMARYKEY	include/sqlite/sqlite3.h	/^#define SQLITE_CONSTRAINT_PRIMARYKEY /;"	d
SQLITE_CONSTRAINT_PRIMARYKEY	sqlite/sqlite3.c	/^#define SQLITE_CONSTRAINT_PRIMARYKEY /;"	d	file:
SQLITE_CONSTRAINT_ROWID	include/sqlite/sqlite3.h	/^#define SQLITE_CONSTRAINT_ROWID /;"	d
SQLITE_CONSTRAINT_ROWID	sqlite/sqlite3.c	/^#define SQLITE_CONSTRAINT_ROWID /;"	d	file:
SQLITE_CONSTRAINT_TRIGGER	include/sqlite/sqlite3.h	/^#define SQLITE_CONSTRAINT_TRIGGER /;"	d
SQLITE_CONSTRAINT_TRIGGER	sqlite/sqlite3.c	/^#define SQLITE_CONSTRAINT_TRIGGER /;"	d	file:
SQLITE_CONSTRAINT_UNIQUE	include/sqlite/sqlite3.h	/^#define SQLITE_CONSTRAINT_UNIQUE /;"	d
SQLITE_CONSTRAINT_UNIQUE	sqlite/sqlite3.c	/^#define SQLITE_CONSTRAINT_UNIQUE /;"	d	file:
SQLITE_CONSTRAINT_VTAB	include/sqlite/sqlite3.h	/^#define SQLITE_CONSTRAINT_VTAB /;"	d
SQLITE_CONSTRAINT_VTAB	sqlite/sqlite3.c	/^#define SQLITE_CONSTRAINT_VTAB /;"	d	file:
SQLITE_COPY	include/sqlite/sqlite3.h	/^#define SQLITE_COPY /;"	d
SQLITE_COPY	sqlite/sqlite3.c	/^#define SQLITE_COPY /;"	d	file:
SQLITE_CORE	sqlite/sqlite3.c	/^#define SQLITE_CORE /;"	d	file:
SQLITE_CORRUPT	include/sqlite/sqlite3.h	/^#define SQLITE_CORRUPT /;"	d
SQLITE_CORRUPT	sqlite/sqlite3.c	/^#define SQLITE_CORRUPT /;"	d	file:
SQLITE_CORRUPT_BKPT	sqlite/sqlite3.c	/^#define SQLITE_CORRUPT_BKPT /;"	d	file:
SQLITE_CORRUPT_PGNO	sqlite/sqlite3.c	/^# define SQLITE_CORRUPT_PGNO(/;"	d	file:
SQLITE_CORRUPT_VTAB	include/sqlite/sqlite3.h	/^#define SQLITE_CORRUPT_VTAB /;"	d
SQLITE_CORRUPT_VTAB	sqlite/sqlite3.c	/^#define SQLITE_CORRUPT_VTAB /;"	d	file:
SQLITE_CREATE_INDEX	include/sqlite/sqlite3.h	/^#define SQLITE_CREATE_INDEX /;"	d
SQLITE_CREATE_INDEX	sqlite/sqlite3.c	/^#define SQLITE_CREATE_INDEX /;"	d	file:
SQLITE_CREATE_TABLE	include/sqlite/sqlite3.h	/^#define SQLITE_CREATE_TABLE /;"	d
SQLITE_CREATE_TABLE	sqlite/sqlite3.c	/^#define SQLITE_CREATE_TABLE /;"	d	file:
SQLITE_CREATE_TEMP_INDEX	include/sqlite/sqlite3.h	/^#define SQLITE_CREATE_TEMP_INDEX /;"	d
SQLITE_CREATE_TEMP_INDEX	sqlite/sqlite3.c	/^#define SQLITE_CREATE_TEMP_INDEX /;"	d	file:
SQLITE_CREATE_TEMP_TABLE	include/sqlite/sqlite3.h	/^#define SQLITE_CREATE_TEMP_TABLE /;"	d
SQLITE_CREATE_TEMP_TABLE	sqlite/sqlite3.c	/^#define SQLITE_CREATE_TEMP_TABLE /;"	d	file:
SQLITE_CREATE_TEMP_TRIGGER	include/sqlite/sqlite3.h	/^#define SQLITE_CREATE_TEMP_TRIGGER /;"	d
SQLITE_CREATE_TEMP_TRIGGER	sqlite/sqlite3.c	/^#define SQLITE_CREATE_TEMP_TRIGGER /;"	d	file:
SQLITE_CREATE_TEMP_VIEW	include/sqlite/sqlite3.h	/^#define SQLITE_CREATE_TEMP_VIEW /;"	d
SQLITE_CREATE_TEMP_VIEW	sqlite/sqlite3.c	/^#define SQLITE_CREATE_TEMP_VIEW /;"	d	file:
SQLITE_CREATE_TRIGGER	include/sqlite/sqlite3.h	/^#define SQLITE_CREATE_TRIGGER /;"	d
SQLITE_CREATE_TRIGGER	sqlite/sqlite3.c	/^#define SQLITE_CREATE_TRIGGER /;"	d	file:
SQLITE_CREATE_VIEW	include/sqlite/sqlite3.h	/^#define SQLITE_CREATE_VIEW /;"	d
SQLITE_CREATE_VIEW	sqlite/sqlite3.c	/^#define SQLITE_CREATE_VIEW /;"	d	file:
SQLITE_CREATE_VTABLE	include/sqlite/sqlite3.h	/^#define SQLITE_CREATE_VTABLE /;"	d
SQLITE_CREATE_VTABLE	sqlite/sqlite3.c	/^#define SQLITE_CREATE_VTABLE /;"	d	file:
SQLITE_CacheSpill	sqlite/sqlite3.c	/^#define SQLITE_CacheSpill /;"	d	file:
SQLITE_CellSizeCk	sqlite/sqlite3.c	/^#define SQLITE_CellSizeCk /;"	d	file:
SQLITE_CkptFullFSync	sqlite/sqlite3.c	/^#define SQLITE_CkptFullFSync /;"	d	file:
SQLITE_ColumnCache	sqlite/sqlite3.c	/^#define SQLITE_ColumnCache /;"	d	file:
SQLITE_CountRows	sqlite/sqlite3.c	/^#define SQLITE_CountRows /;"	d	file:
SQLITE_CoverIdxScan	sqlite/sqlite3.c	/^#define SQLITE_CoverIdxScan /;"	d	file:
SQLITE_CursorHints	sqlite/sqlite3.c	/^#define SQLITE_CursorHints /;"	d	file:
SQLITE_DBCONFIG_ENABLE_FKEY	include/sqlite/sqlite3.h	/^#define SQLITE_DBCONFIG_ENABLE_FKEY /;"	d
SQLITE_DBCONFIG_ENABLE_FKEY	sqlite/sqlite3.c	/^#define SQLITE_DBCONFIG_ENABLE_FKEY /;"	d	file:
SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER	include/sqlite/sqlite3.h	/^#define SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER /;"	d
SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER	sqlite/sqlite3.c	/^#define SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER /;"	d	file:
SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION	include/sqlite/sqlite3.h	/^#define SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION /;"	d
SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION	sqlite/sqlite3.c	/^#define SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION /;"	d	file:
SQLITE_DBCONFIG_ENABLE_QPSG	include/sqlite/sqlite3.h	/^#define SQLITE_DBCONFIG_ENABLE_QPSG /;"	d
SQLITE_DBCONFIG_ENABLE_QPSG	sqlite/sqlite3.c	/^#define SQLITE_DBCONFIG_ENABLE_QPSG /;"	d	file:
SQLITE_DBCONFIG_ENABLE_TRIGGER	include/sqlite/sqlite3.h	/^#define SQLITE_DBCONFIG_ENABLE_TRIGGER /;"	d
SQLITE_DBCONFIG_ENABLE_TRIGGER	sqlite/sqlite3.c	/^#define SQLITE_DBCONFIG_ENABLE_TRIGGER /;"	d	file:
SQLITE_DBCONFIG_LOOKASIDE	include/sqlite/sqlite3.h	/^#define SQLITE_DBCONFIG_LOOKASIDE /;"	d
SQLITE_DBCONFIG_LOOKASIDE	sqlite/sqlite3.c	/^#define SQLITE_DBCONFIG_LOOKASIDE /;"	d	file:
SQLITE_DBCONFIG_MAINDBNAME	include/sqlite/sqlite3.h	/^#define SQLITE_DBCONFIG_MAINDBNAME /;"	d
SQLITE_DBCONFIG_MAINDBNAME	sqlite/sqlite3.c	/^#define SQLITE_DBCONFIG_MAINDBNAME /;"	d	file:
SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE	include/sqlite/sqlite3.h	/^#define SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE /;"	d
SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE	sqlite/sqlite3.c	/^#define SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE /;"	d	file:
SQLITE_DBSTATUS_CACHE_HIT	include/sqlite/sqlite3.h	/^#define SQLITE_DBSTATUS_CACHE_HIT /;"	d
SQLITE_DBSTATUS_CACHE_HIT	sqlite/sqlite3.c	/^#define SQLITE_DBSTATUS_CACHE_HIT /;"	d	file:
SQLITE_DBSTATUS_CACHE_MISS	include/sqlite/sqlite3.h	/^#define SQLITE_DBSTATUS_CACHE_MISS /;"	d
SQLITE_DBSTATUS_CACHE_MISS	sqlite/sqlite3.c	/^#define SQLITE_DBSTATUS_CACHE_MISS /;"	d	file:
SQLITE_DBSTATUS_CACHE_USED	include/sqlite/sqlite3.h	/^#define SQLITE_DBSTATUS_CACHE_USED /;"	d
SQLITE_DBSTATUS_CACHE_USED	sqlite/sqlite3.c	/^#define SQLITE_DBSTATUS_CACHE_USED /;"	d	file:
SQLITE_DBSTATUS_CACHE_USED_SHARED	include/sqlite/sqlite3.h	/^#define SQLITE_DBSTATUS_CACHE_USED_SHARED /;"	d
SQLITE_DBSTATUS_CACHE_USED_SHARED	sqlite/sqlite3.c	/^#define SQLITE_DBSTATUS_CACHE_USED_SHARED /;"	d	file:
SQLITE_DBSTATUS_CACHE_WRITE	include/sqlite/sqlite3.h	/^#define SQLITE_DBSTATUS_CACHE_WRITE /;"	d
SQLITE_DBSTATUS_CACHE_WRITE	sqlite/sqlite3.c	/^#define SQLITE_DBSTATUS_CACHE_WRITE /;"	d	file:
SQLITE_DBSTATUS_DEFERRED_FKS	include/sqlite/sqlite3.h	/^#define SQLITE_DBSTATUS_DEFERRED_FKS /;"	d
SQLITE_DBSTATUS_DEFERRED_FKS	sqlite/sqlite3.c	/^#define SQLITE_DBSTATUS_DEFERRED_FKS /;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_HIT	include/sqlite/sqlite3.h	/^#define SQLITE_DBSTATUS_LOOKASIDE_HIT /;"	d
SQLITE_DBSTATUS_LOOKASIDE_HIT	sqlite/sqlite3.c	/^#define SQLITE_DBSTATUS_LOOKASIDE_HIT /;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	include/sqlite/sqlite3.h	/^#define SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL /;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	sqlite/sqlite3.c	/^#define SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL /;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	include/sqlite/sqlite3.h	/^#define SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE /;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	sqlite/sqlite3.c	/^#define SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE /;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_USED	include/sqlite/sqlite3.h	/^#define SQLITE_DBSTATUS_LOOKASIDE_USED /;"	d
SQLITE_DBSTATUS_LOOKASIDE_USED	sqlite/sqlite3.c	/^#define SQLITE_DBSTATUS_LOOKASIDE_USED /;"	d	file:
SQLITE_DBSTATUS_MAX	include/sqlite/sqlite3.h	/^#define SQLITE_DBSTATUS_MAX /;"	d
SQLITE_DBSTATUS_MAX	sqlite/sqlite3.c	/^#define SQLITE_DBSTATUS_MAX /;"	d	file:
SQLITE_DBSTATUS_SCHEMA_USED	include/sqlite/sqlite3.h	/^#define SQLITE_DBSTATUS_SCHEMA_USED /;"	d
SQLITE_DBSTATUS_SCHEMA_USED	sqlite/sqlite3.c	/^#define SQLITE_DBSTATUS_SCHEMA_USED /;"	d	file:
SQLITE_DBSTATUS_STMT_USED	include/sqlite/sqlite3.h	/^#define SQLITE_DBSTATUS_STMT_USED /;"	d
SQLITE_DBSTATUS_STMT_USED	sqlite/sqlite3.c	/^#define SQLITE_DBSTATUS_STMT_USED /;"	d	file:
SQLITE_DEFAULT_AUTOVACUUM	sqlite/sqlite3.c	/^  #define SQLITE_DEFAULT_AUTOVACUUM /;"	d	file:
SQLITE_DEFAULT_CACHE_SIZE	sqlite/sqlite3.c	/^# define SQLITE_DEFAULT_CACHE_SIZE /;"	d	file:
SQLITE_DEFAULT_FILE_FORMAT	sqlite/sqlite3.c	/^# define SQLITE_DEFAULT_FILE_FORMAT /;"	d	file:
SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT	sqlite/sqlite3.c	/^  #define SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT /;"	d	file:
SQLITE_DEFAULT_LOOKASIDE	sqlite/sqlite3.c	/^# define SQLITE_DEFAULT_LOOKASIDE /;"	d	file:
SQLITE_DEFAULT_MEMSTATUS	sqlite/sqlite3.c	/^# define SQLITE_DEFAULT_MEMSTATUS /;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	sqlite/sqlite3.c	/^# define SQLITE_DEFAULT_MMAP_SIZE /;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	sqlite/sqlite3.c	/^# define SQLITE_DEFAULT_PAGE_SIZE /;"	d	file:
SQLITE_DEFAULT_PCACHE_INITSZ	sqlite/sqlite3.c	/^# define SQLITE_DEFAULT_PCACHE_INITSZ /;"	d	file:
SQLITE_DEFAULT_RECURSIVE_TRIGGERS	sqlite/sqlite3.c	/^# define SQLITE_DEFAULT_RECURSIVE_TRIGGERS /;"	d	file:
SQLITE_DEFAULT_SECTOR_SIZE	sqlite/sqlite3.c	/^# define SQLITE_DEFAULT_SECTOR_SIZE /;"	d	file:
SQLITE_DEFAULT_SYNCHRONOUS	sqlite/sqlite3.c	/^# define SQLITE_DEFAULT_SYNCHRONOUS /;"	d	file:
SQLITE_DEFAULT_WAL_AUTOCHECKPOINT	sqlite/sqlite3.c	/^# define SQLITE_DEFAULT_WAL_AUTOCHECKPOINT /;"	d	file:
SQLITE_DEFAULT_WAL_SYNCHRONOUS	sqlite/sqlite3.c	/^# define SQLITE_DEFAULT_WAL_SYNCHRONOUS /;"	d	file:
SQLITE_DEFAULT_WORKER_THREADS	sqlite/sqlite3.c	/^# define SQLITE_DEFAULT_WORKER_THREADS /;"	d	file:
SQLITE_DELETE	include/sqlite/sqlite3.h	/^#define SQLITE_DELETE /;"	d
SQLITE_DELETE	sqlite/sqlite3.c	/^#define SQLITE_DELETE /;"	d	file:
SQLITE_DENY	include/sqlite/sqlite3.h	/^#define SQLITE_DENY /;"	d
SQLITE_DENY	sqlite/sqlite3.c	/^#define SQLITE_DENY /;"	d	file:
SQLITE_DEPRECATED	include/sqlite/sqlite3.h	/^#define SQLITE_DEPRECATED$/;"	d
SQLITE_DEPRECATED	sqlite/sqlite3.c	/^#define SQLITE_DEPRECATED$/;"	d	file:
SQLITE_DETACH	include/sqlite/sqlite3.h	/^#define SQLITE_DETACH /;"	d
SQLITE_DETACH	sqlite/sqlite3.c	/^#define SQLITE_DETACH /;"	d	file:
SQLITE_DETERMINISTIC	include/sqlite/sqlite3.h	/^#define SQLITE_DETERMINISTIC /;"	d
SQLITE_DETERMINISTIC	sqlite/sqlite3.c	/^#define SQLITE_DETERMINISTIC /;"	d	file:
SQLITE_DONE	include/sqlite/sqlite3.h	/^#define SQLITE_DONE /;"	d
SQLITE_DONE	sqlite/sqlite3.c	/^#define SQLITE_DONE /;"	d	file:
SQLITE_DROP_INDEX	include/sqlite/sqlite3.h	/^#define SQLITE_DROP_INDEX /;"	d
SQLITE_DROP_INDEX	sqlite/sqlite3.c	/^#define SQLITE_DROP_INDEX /;"	d	file:
SQLITE_DROP_TABLE	include/sqlite/sqlite3.h	/^#define SQLITE_DROP_TABLE /;"	d
SQLITE_DROP_TABLE	sqlite/sqlite3.c	/^#define SQLITE_DROP_TABLE /;"	d	file:
SQLITE_DROP_TEMP_INDEX	include/sqlite/sqlite3.h	/^#define SQLITE_DROP_TEMP_INDEX /;"	d
SQLITE_DROP_TEMP_INDEX	sqlite/sqlite3.c	/^#define SQLITE_DROP_TEMP_INDEX /;"	d	file:
SQLITE_DROP_TEMP_TABLE	include/sqlite/sqlite3.h	/^#define SQLITE_DROP_TEMP_TABLE /;"	d
SQLITE_DROP_TEMP_TABLE	sqlite/sqlite3.c	/^#define SQLITE_DROP_TEMP_TABLE /;"	d	file:
SQLITE_DROP_TEMP_TRIGGER	include/sqlite/sqlite3.h	/^#define SQLITE_DROP_TEMP_TRIGGER /;"	d
SQLITE_DROP_TEMP_TRIGGER	sqlite/sqlite3.c	/^#define SQLITE_DROP_TEMP_TRIGGER /;"	d	file:
SQLITE_DROP_TEMP_VIEW	include/sqlite/sqlite3.h	/^#define SQLITE_DROP_TEMP_VIEW /;"	d
SQLITE_DROP_TEMP_VIEW	sqlite/sqlite3.c	/^#define SQLITE_DROP_TEMP_VIEW /;"	d	file:
SQLITE_DROP_TRIGGER	include/sqlite/sqlite3.h	/^#define SQLITE_DROP_TRIGGER /;"	d
SQLITE_DROP_TRIGGER	sqlite/sqlite3.c	/^#define SQLITE_DROP_TRIGGER /;"	d	file:
SQLITE_DROP_VIEW	include/sqlite/sqlite3.h	/^#define SQLITE_DROP_VIEW /;"	d
SQLITE_DROP_VIEW	sqlite/sqlite3.c	/^#define SQLITE_DROP_VIEW /;"	d	file:
SQLITE_DROP_VTABLE	include/sqlite/sqlite3.h	/^#define SQLITE_DROP_VTABLE /;"	d
SQLITE_DROP_VTABLE	sqlite/sqlite3.c	/^#define SQLITE_DROP_VTABLE /;"	d	file:
SQLITE_DYNAMIC	sqlite/sqlite3.c	/^#define SQLITE_DYNAMIC /;"	d	file:
SQLITE_DeferFKs	sqlite/sqlite3.c	/^#define SQLITE_DeferFKs /;"	d	file:
SQLITE_DistinctOpt	sqlite/sqlite3.c	/^#define SQLITE_DistinctOpt /;"	d	file:
SQLITE_EBCDIC	sqlite/sqlite3.c	/^# define SQLITE_EBCDIC /;"	d	file:
SQLITE_ECEL_DUP	sqlite/sqlite3.c	/^#define SQLITE_ECEL_DUP /;"	d	file:
SQLITE_ECEL_FACTOR	sqlite/sqlite3.c	/^#define SQLITE_ECEL_FACTOR /;"	d	file:
SQLITE_ECEL_OMITREF	sqlite/sqlite3.c	/^#define SQLITE_ECEL_OMITREF /;"	d	file:
SQLITE_ECEL_REF	sqlite/sqlite3.c	/^#define SQLITE_ECEL_REF /;"	d	file:
SQLITE_EMPTY	include/sqlite/sqlite3.h	/^#define SQLITE_EMPTY /;"	d
SQLITE_EMPTY	sqlite/sqlite3.c	/^#define SQLITE_EMPTY /;"	d	file:
SQLITE_ENABLE_EXPLAIN_COMMENTS	sqlite/sqlite3.c	/^# define SQLITE_ENABLE_EXPLAIN_COMMENTS /;"	d	file:
SQLITE_ENABLE_FTS3	sqlite/sqlite3.c	/^# define SQLITE_ENABLE_FTS3 /;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite/sqlite3.c	/^#define SQLITE_ENABLE_LOCKING_STYLE /;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	sqlite/sqlite3.c	/^# define SQLITE_ENABLE_STAT3_OR_STAT4 /;"	d	file:
SQLITE_ERROR	include/sqlite/sqlite3.h	/^#define SQLITE_ERROR /;"	d
SQLITE_ERROR	sqlite/sqlite3.c	/^#define SQLITE_ERROR /;"	d	file:
SQLITE_EXPERIMENTAL	include/sqlite/sqlite3.h	/^#define SQLITE_EXPERIMENTAL$/;"	d
SQLITE_EXPERIMENTAL	sqlite/sqlite3.c	/^#define SQLITE_EXPERIMENTAL$/;"	d	file:
SQLITE_EXTENSION_INIT1	include/sqlite/sqlite3ext.h	/^# define SQLITE_EXTENSION_INIT1 /;"	d
SQLITE_EXTENSION_INIT2	include/sqlite/sqlite3ext.h	/^# define SQLITE_EXTENSION_INIT2(/;"	d
SQLITE_EXTENSION_INIT3	include/sqlite/sqlite3ext.h	/^# define SQLITE_EXTENSION_INIT3 /;"	d
SQLITE_EXTERN	include/sqlite/sqlite3.h	/^# define SQLITE_EXTERN /;"	d
SQLITE_EXTERN	sqlite/sqlite3.c	/^# define SQLITE_EXTERN /;"	d	file:
SQLITE_EnableQPSG	sqlite/sqlite3.c	/^#define SQLITE_EnableQPSG /;"	d	file:
SQLITE_EnableTrigger	sqlite/sqlite3.c	/^#define SQLITE_EnableTrigger /;"	d	file:
SQLITE_FAIL	include/sqlite/sqlite3.h	/^#define SQLITE_FAIL /;"	d
SQLITE_FAIL	sqlite/sqlite3.c	/^#define SQLITE_FAIL /;"	d	file:
SQLITE_FAULTINJECTOR_COUNT	sqlite/sqlite3.c	/^#define SQLITE_FAULTINJECTOR_COUNT /;"	d	file:
SQLITE_FAULTINJECTOR_MALLOC	sqlite/sqlite3.c	/^#define SQLITE_FAULTINJECTOR_MALLOC /;"	d	file:
SQLITE_FCNTL_BUSYHANDLER	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_BUSYHANDLER /;"	d
SQLITE_FCNTL_BUSYHANDLER	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_BUSYHANDLER /;"	d	file:
SQLITE_FCNTL_CHUNK_SIZE	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_CHUNK_SIZE /;"	d
SQLITE_FCNTL_CHUNK_SIZE	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_CHUNK_SIZE /;"	d	file:
SQLITE_FCNTL_COMMIT_PHASETWO	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_COMMIT_PHASETWO /;"	d
SQLITE_FCNTL_COMMIT_PHASETWO	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_COMMIT_PHASETWO /;"	d	file:
SQLITE_FCNTL_DB_UNCHANGED	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_DB_UNCHANGED /;"	d	file:
SQLITE_FCNTL_FILE_POINTER	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_FILE_POINTER /;"	d
SQLITE_FCNTL_FILE_POINTER	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_FILE_POINTER /;"	d	file:
SQLITE_FCNTL_GET_LOCKPROXYFILE	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_GET_LOCKPROXYFILE /;"	d
SQLITE_FCNTL_GET_LOCKPROXYFILE	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_GET_LOCKPROXYFILE /;"	d	file:
SQLITE_FCNTL_HAS_MOVED	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_HAS_MOVED /;"	d
SQLITE_FCNTL_HAS_MOVED	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_HAS_MOVED /;"	d	file:
SQLITE_FCNTL_JOURNAL_POINTER	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_JOURNAL_POINTER /;"	d
SQLITE_FCNTL_JOURNAL_POINTER	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_JOURNAL_POINTER /;"	d	file:
SQLITE_FCNTL_LAST_ERRNO	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_LAST_ERRNO /;"	d
SQLITE_FCNTL_LAST_ERRNO	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_LAST_ERRNO /;"	d	file:
SQLITE_FCNTL_LOCKSTATE	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_LOCKSTATE /;"	d
SQLITE_FCNTL_LOCKSTATE	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_LOCKSTATE /;"	d	file:
SQLITE_FCNTL_MMAP_SIZE	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_MMAP_SIZE /;"	d
SQLITE_FCNTL_MMAP_SIZE	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_MMAP_SIZE /;"	d	file:
SQLITE_FCNTL_OVERWRITE	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_OVERWRITE /;"	d
SQLITE_FCNTL_OVERWRITE	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_OVERWRITE /;"	d	file:
SQLITE_FCNTL_PDB	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_PDB /;"	d
SQLITE_FCNTL_PDB	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_PDB /;"	d	file:
SQLITE_FCNTL_PERSIST_WAL	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_PERSIST_WAL /;"	d
SQLITE_FCNTL_PERSIST_WAL	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_PERSIST_WAL /;"	d	file:
SQLITE_FCNTL_POWERSAFE_OVERWRITE	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_POWERSAFE_OVERWRITE /;"	d
SQLITE_FCNTL_POWERSAFE_OVERWRITE	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_POWERSAFE_OVERWRITE /;"	d	file:
SQLITE_FCNTL_PRAGMA	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_PRAGMA /;"	d
SQLITE_FCNTL_PRAGMA	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_PRAGMA /;"	d	file:
SQLITE_FCNTL_RBU	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_RBU /;"	d
SQLITE_FCNTL_RBU	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_RBU /;"	d	file:
SQLITE_FCNTL_SET_LOCKPROXYFILE	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_SET_LOCKPROXYFILE /;"	d
SQLITE_FCNTL_SET_LOCKPROXYFILE	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_SET_LOCKPROXYFILE /;"	d	file:
SQLITE_FCNTL_SIZE_HINT	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_SIZE_HINT /;"	d
SQLITE_FCNTL_SIZE_HINT	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_SIZE_HINT /;"	d	file:
SQLITE_FCNTL_SYNC	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_SYNC /;"	d
SQLITE_FCNTL_SYNC	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_SYNC /;"	d	file:
SQLITE_FCNTL_SYNC_OMITTED	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_SYNC_OMITTED /;"	d
SQLITE_FCNTL_SYNC_OMITTED	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_SYNC_OMITTED /;"	d	file:
SQLITE_FCNTL_TEMPFILENAME	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_TEMPFILENAME /;"	d
SQLITE_FCNTL_TEMPFILENAME	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_TEMPFILENAME /;"	d	file:
SQLITE_FCNTL_TRACE	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_TRACE /;"	d
SQLITE_FCNTL_TRACE	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_TRACE /;"	d	file:
SQLITE_FCNTL_VFSNAME	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_VFSNAME /;"	d
SQLITE_FCNTL_VFSNAME	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_VFSNAME /;"	d	file:
SQLITE_FCNTL_VFS_POINTER	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_VFS_POINTER /;"	d
SQLITE_FCNTL_VFS_POINTER	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_VFS_POINTER /;"	d	file:
SQLITE_FCNTL_WAL_BLOCK	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_WAL_BLOCK /;"	d
SQLITE_FCNTL_WAL_BLOCK	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_WAL_BLOCK /;"	d	file:
SQLITE_FCNTL_WIN32_AV_RETRY	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_WIN32_AV_RETRY /;"	d
SQLITE_FCNTL_WIN32_AV_RETRY	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_WIN32_AV_RETRY /;"	d	file:
SQLITE_FCNTL_WIN32_GET_HANDLE	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_WIN32_GET_HANDLE /;"	d
SQLITE_FCNTL_WIN32_GET_HANDLE	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_WIN32_GET_HANDLE /;"	d	file:
SQLITE_FCNTL_WIN32_SET_HANDLE	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_WIN32_SET_HANDLE /;"	d
SQLITE_FCNTL_WIN32_SET_HANDLE	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_WIN32_SET_HANDLE /;"	d	file:
SQLITE_FCNTL_ZIPVFS	include/sqlite/sqlite3.h	/^#define SQLITE_FCNTL_ZIPVFS /;"	d
SQLITE_FCNTL_ZIPVFS	sqlite/sqlite3.c	/^#define SQLITE_FCNTL_ZIPVFS /;"	d	file:
SQLITE_FLOAT	include/sqlite/sqlite3.h	/^#define SQLITE_FLOAT /;"	d
SQLITE_FLOAT	sqlite/sqlite3.c	/^#define SQLITE_FLOAT /;"	d	file:
SQLITE_FORMAT	include/sqlite/sqlite3.h	/^#define SQLITE_FORMAT /;"	d
SQLITE_FORMAT	sqlite/sqlite3.c	/^#define SQLITE_FORMAT /;"	d	file:
SQLITE_FREE	sqlite/sqlite3.c	/^#define SQLITE_FREE(/;"	d	file:
SQLITE_FULL	include/sqlite/sqlite3.h	/^#define SQLITE_FULL /;"	d
SQLITE_FULL	sqlite/sqlite3.c	/^#define SQLITE_FULL /;"	d	file:
SQLITE_FUNCTION	include/sqlite/sqlite3.h	/^#define SQLITE_FUNCTION /;"	d
SQLITE_FUNCTION	sqlite/sqlite3.c	/^#define SQLITE_FUNCTION /;"	d	file:
SQLITE_FUNC_AFFINITY	sqlite/sqlite3.c	/^#define SQLITE_FUNC_AFFINITY /;"	d	file:
SQLITE_FUNC_CASE	sqlite/sqlite3.c	/^#define SQLITE_FUNC_CASE /;"	d	file:
SQLITE_FUNC_COALESCE	sqlite/sqlite3.c	/^#define SQLITE_FUNC_COALESCE /;"	d	file:
SQLITE_FUNC_CONSTANT	sqlite/sqlite3.c	/^#define SQLITE_FUNC_CONSTANT /;"	d	file:
SQLITE_FUNC_COUNT	sqlite/sqlite3.c	/^#define SQLITE_FUNC_COUNT /;"	d	file:
SQLITE_FUNC_ENCMASK	sqlite/sqlite3.c	/^#define SQLITE_FUNC_ENCMASK /;"	d	file:
SQLITE_FUNC_EPHEM	sqlite/sqlite3.c	/^#define SQLITE_FUNC_EPHEM /;"	d	file:
SQLITE_FUNC_HASH_SZ	sqlite/sqlite3.c	/^#define SQLITE_FUNC_HASH_SZ /;"	d	file:
SQLITE_FUNC_LENGTH	sqlite/sqlite3.c	/^#define SQLITE_FUNC_LENGTH /;"	d	file:
SQLITE_FUNC_LIKE	sqlite/sqlite3.c	/^#define SQLITE_FUNC_LIKE /;"	d	file:
SQLITE_FUNC_MINMAX	sqlite/sqlite3.c	/^#define SQLITE_FUNC_MINMAX /;"	d	file:
SQLITE_FUNC_NEEDCOLL	sqlite/sqlite3.c	/^#define SQLITE_FUNC_NEEDCOLL /;"	d	file:
SQLITE_FUNC_SLOCHNG	sqlite/sqlite3.c	/^#define SQLITE_FUNC_SLOCHNG /;"	d	file:
SQLITE_FUNC_TYPEOF	sqlite/sqlite3.c	/^#define SQLITE_FUNC_TYPEOF /;"	d	file:
SQLITE_FUNC_UNLIKELY	sqlite/sqlite3.c	/^#define SQLITE_FUNC_UNLIKELY /;"	d	file:
SQLITE_FactorOutConst	sqlite/sqlite3.c	/^#define SQLITE_FactorOutConst /;"	d	file:
SQLITE_ForeignKeys	sqlite/sqlite3.c	/^#define SQLITE_ForeignKeys /;"	d	file:
SQLITE_Fts3Tokenizer	sqlite/sqlite3.c	/^#define SQLITE_Fts3Tokenizer /;"	d	file:
SQLITE_FullColNames	sqlite/sqlite3.c	/^#define SQLITE_FullColNames /;"	d	file:
SQLITE_FullFSync	sqlite/sqlite3.c	/^#define SQLITE_FullFSync /;"	d	file:
SQLITE_GET_LOCKPROXYFILE	include/sqlite/sqlite3.h	/^#define SQLITE_GET_LOCKPROXYFILE /;"	d
SQLITE_GET_LOCKPROXYFILE	sqlite/sqlite3.c	/^#define SQLITE_GET_LOCKPROXYFILE /;"	d	file:
SQLITE_GroupByOrder	sqlite/sqlite3.c	/^#define SQLITE_GroupByOrder /;"	d	file:
SQLITE_HASH_H	sqlite/sqlite3.c	/^#define SQLITE_HASH_H$/;"	d	file:
SQLITE_HAVE_OS_TRACE	sqlite/sqlite3.c	/^# define SQLITE_HAVE_OS_TRACE$/;"	d	file:
SQLITE_HOMEGROWN_RECURSIVE_MUTEX	sqlite/sqlite3.c	/^#define SQLITE_HOMEGROWN_RECURSIVE_MUTEX /;"	d	file:
SQLITE_HWTIME_H	sqlite/sqlite3.c	/^#define SQLITE_HWTIME_H$/;"	d	file:
SQLITE_IDXTYPE_APPDEF	sqlite/sqlite3.c	/^#define SQLITE_IDXTYPE_APPDEF /;"	d	file:
SQLITE_IDXTYPE_PRIMARYKEY	sqlite/sqlite3.c	/^#define SQLITE_IDXTYPE_PRIMARYKEY /;"	d	file:
SQLITE_IDXTYPE_UNIQUE	sqlite/sqlite3.c	/^#define SQLITE_IDXTYPE_UNIQUE /;"	d	file:
SQLITE_IGNORE	include/sqlite/sqlite3.h	/^#define SQLITE_IGNORE /;"	d
SQLITE_IGNORE	sqlite/sqlite3.c	/^#define SQLITE_IGNORE /;"	d	file:
SQLITE_INDEX_CONSTRAINT_EQ	include/sqlite/sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_EQ /;"	d
SQLITE_INDEX_CONSTRAINT_EQ	sqlite/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_EQ /;"	d	file:
SQLITE_INDEX_CONSTRAINT_GE	include/sqlite/sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_GE /;"	d
SQLITE_INDEX_CONSTRAINT_GE	sqlite/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_GE /;"	d	file:
SQLITE_INDEX_CONSTRAINT_GLOB	include/sqlite/sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_GLOB /;"	d
SQLITE_INDEX_CONSTRAINT_GLOB	sqlite/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_GLOB /;"	d	file:
SQLITE_INDEX_CONSTRAINT_GT	include/sqlite/sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_GT /;"	d
SQLITE_INDEX_CONSTRAINT_GT	sqlite/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_GT /;"	d	file:
SQLITE_INDEX_CONSTRAINT_LE	include/sqlite/sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_LE /;"	d
SQLITE_INDEX_CONSTRAINT_LE	sqlite/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_LE /;"	d	file:
SQLITE_INDEX_CONSTRAINT_LIKE	include/sqlite/sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_LIKE /;"	d
SQLITE_INDEX_CONSTRAINT_LIKE	sqlite/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_LIKE /;"	d	file:
SQLITE_INDEX_CONSTRAINT_LT	include/sqlite/sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_LT /;"	d
SQLITE_INDEX_CONSTRAINT_LT	sqlite/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_LT /;"	d	file:
SQLITE_INDEX_CONSTRAINT_MATCH	include/sqlite/sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_MATCH /;"	d
SQLITE_INDEX_CONSTRAINT_MATCH	sqlite/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_MATCH /;"	d	file:
SQLITE_INDEX_CONSTRAINT_REGEXP	include/sqlite/sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_REGEXP /;"	d
SQLITE_INDEX_CONSTRAINT_REGEXP	sqlite/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_REGEXP /;"	d	file:
SQLITE_INDEX_SCAN_UNIQUE	include/sqlite/sqlite3.h	/^#define SQLITE_INDEX_SCAN_UNIQUE /;"	d
SQLITE_INDEX_SCAN_UNIQUE	sqlite/sqlite3.c	/^#define SQLITE_INDEX_SCAN_UNIQUE /;"	d	file:
SQLITE_INSERT	include/sqlite/sqlite3.h	/^#define SQLITE_INSERT /;"	d
SQLITE_INSERT	sqlite/sqlite3.c	/^#define SQLITE_INSERT /;"	d	file:
SQLITE_INTEGER	include/sqlite/sqlite3.h	/^#define SQLITE_INTEGER /;"	d
SQLITE_INTEGER	sqlite/sqlite3.c	/^#define SQLITE_INTEGER /;"	d	file:
SQLITE_INTERNAL	include/sqlite/sqlite3.h	/^#define SQLITE_INTERNAL /;"	d
SQLITE_INTERNAL	sqlite/sqlite3.c	/^#define SQLITE_INTERNAL /;"	d	file:
SQLITE_INTERRUPT	include/sqlite/sqlite3.h	/^#define SQLITE_INTERRUPT /;"	d
SQLITE_INTERRUPT	sqlite/sqlite3.c	/^#define SQLITE_INTERRUPT /;"	d	file:
SQLITE_INT_TO_PTR	sqlite/sqlite3.c	/^# define SQLITE_INT_TO_PTR(/;"	d	file:
SQLITE_IOCAP_ATOMIC	include/sqlite/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC /;"	d
SQLITE_IOCAP_ATOMIC	sqlite/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC /;"	d	file:
SQLITE_IOCAP_ATOMIC16K	include/sqlite/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC16K /;"	d
SQLITE_IOCAP_ATOMIC16K	sqlite/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC16K /;"	d	file:
SQLITE_IOCAP_ATOMIC1K	include/sqlite/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC1K /;"	d
SQLITE_IOCAP_ATOMIC1K	sqlite/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC1K /;"	d	file:
SQLITE_IOCAP_ATOMIC2K	include/sqlite/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC2K /;"	d
SQLITE_IOCAP_ATOMIC2K	sqlite/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC2K /;"	d	file:
SQLITE_IOCAP_ATOMIC32K	include/sqlite/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC32K /;"	d
SQLITE_IOCAP_ATOMIC32K	sqlite/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC32K /;"	d	file:
SQLITE_IOCAP_ATOMIC4K	include/sqlite/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC4K /;"	d
SQLITE_IOCAP_ATOMIC4K	sqlite/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC4K /;"	d	file:
SQLITE_IOCAP_ATOMIC512	include/sqlite/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC512 /;"	d
SQLITE_IOCAP_ATOMIC512	sqlite/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC512 /;"	d	file:
SQLITE_IOCAP_ATOMIC64K	include/sqlite/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC64K /;"	d
SQLITE_IOCAP_ATOMIC64K	sqlite/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC64K /;"	d	file:
SQLITE_IOCAP_ATOMIC8K	include/sqlite/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC8K /;"	d
SQLITE_IOCAP_ATOMIC8K	sqlite/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC8K /;"	d	file:
SQLITE_IOCAP_IMMUTABLE	include/sqlite/sqlite3.h	/^#define SQLITE_IOCAP_IMMUTABLE /;"	d
SQLITE_IOCAP_IMMUTABLE	sqlite/sqlite3.c	/^#define SQLITE_IOCAP_IMMUTABLE /;"	d	file:
SQLITE_IOCAP_POWERSAFE_OVERWRITE	include/sqlite/sqlite3.h	/^#define SQLITE_IOCAP_POWERSAFE_OVERWRITE /;"	d
SQLITE_IOCAP_POWERSAFE_OVERWRITE	sqlite/sqlite3.c	/^#define SQLITE_IOCAP_POWERSAFE_OVERWRITE /;"	d	file:
SQLITE_IOCAP_SAFE_APPEND	include/sqlite/sqlite3.h	/^#define SQLITE_IOCAP_SAFE_APPEND /;"	d
SQLITE_IOCAP_SAFE_APPEND	sqlite/sqlite3.c	/^#define SQLITE_IOCAP_SAFE_APPEND /;"	d	file:
SQLITE_IOCAP_SEQUENTIAL	include/sqlite/sqlite3.h	/^#define SQLITE_IOCAP_SEQUENTIAL /;"	d
SQLITE_IOCAP_SEQUENTIAL	sqlite/sqlite3.c	/^#define SQLITE_IOCAP_SEQUENTIAL /;"	d	file:
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	include/sqlite/sqlite3.h	/^#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN /;"	d
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	sqlite/sqlite3.c	/^#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN /;"	d	file:
SQLITE_IOERR	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR /;"	d
SQLITE_IOERR	sqlite/sqlite3.c	/^#define SQLITE_IOERR /;"	d	file:
SQLITE_IOERR_ACCESS	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_ACCESS /;"	d
SQLITE_IOERR_ACCESS	sqlite/sqlite3.c	/^#define SQLITE_IOERR_ACCESS /;"	d	file:
SQLITE_IOERR_AUTH	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_AUTH /;"	d
SQLITE_IOERR_AUTH	sqlite/sqlite3.c	/^#define SQLITE_IOERR_AUTH /;"	d	file:
SQLITE_IOERR_BLOCKED	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_BLOCKED /;"	d
SQLITE_IOERR_BLOCKED	sqlite/sqlite3.c	/^#define SQLITE_IOERR_BLOCKED /;"	d	file:
SQLITE_IOERR_CHECKRESERVEDLOCK	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_CHECKRESERVEDLOCK /;"	d
SQLITE_IOERR_CHECKRESERVEDLOCK	sqlite/sqlite3.c	/^#define SQLITE_IOERR_CHECKRESERVEDLOCK /;"	d	file:
SQLITE_IOERR_CLOSE	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_CLOSE /;"	d
SQLITE_IOERR_CLOSE	sqlite/sqlite3.c	/^#define SQLITE_IOERR_CLOSE /;"	d	file:
SQLITE_IOERR_CONVPATH	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_CONVPATH /;"	d
SQLITE_IOERR_CONVPATH	sqlite/sqlite3.c	/^#define SQLITE_IOERR_CONVPATH /;"	d	file:
SQLITE_IOERR_DELETE	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_DELETE /;"	d
SQLITE_IOERR_DELETE	sqlite/sqlite3.c	/^#define SQLITE_IOERR_DELETE /;"	d	file:
SQLITE_IOERR_DELETE_NOENT	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_DELETE_NOENT /;"	d
SQLITE_IOERR_DELETE_NOENT	sqlite/sqlite3.c	/^#define SQLITE_IOERR_DELETE_NOENT /;"	d	file:
SQLITE_IOERR_DIR_CLOSE	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_DIR_CLOSE /;"	d
SQLITE_IOERR_DIR_CLOSE	sqlite/sqlite3.c	/^#define SQLITE_IOERR_DIR_CLOSE /;"	d	file:
SQLITE_IOERR_DIR_FSYNC	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_DIR_FSYNC /;"	d
SQLITE_IOERR_DIR_FSYNC	sqlite/sqlite3.c	/^#define SQLITE_IOERR_DIR_FSYNC /;"	d	file:
SQLITE_IOERR_FSTAT	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_FSTAT /;"	d
SQLITE_IOERR_FSTAT	sqlite/sqlite3.c	/^#define SQLITE_IOERR_FSTAT /;"	d	file:
SQLITE_IOERR_FSYNC	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_FSYNC /;"	d
SQLITE_IOERR_FSYNC	sqlite/sqlite3.c	/^#define SQLITE_IOERR_FSYNC /;"	d	file:
SQLITE_IOERR_GETTEMPPATH	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_GETTEMPPATH /;"	d
SQLITE_IOERR_GETTEMPPATH	sqlite/sqlite3.c	/^#define SQLITE_IOERR_GETTEMPPATH /;"	d	file:
SQLITE_IOERR_LOCK	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_LOCK /;"	d
SQLITE_IOERR_LOCK	sqlite/sqlite3.c	/^#define SQLITE_IOERR_LOCK /;"	d	file:
SQLITE_IOERR_MMAP	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_MMAP /;"	d
SQLITE_IOERR_MMAP	sqlite/sqlite3.c	/^#define SQLITE_IOERR_MMAP /;"	d	file:
SQLITE_IOERR_NOMEM	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_NOMEM /;"	d
SQLITE_IOERR_NOMEM	sqlite/sqlite3.c	/^#define SQLITE_IOERR_NOMEM /;"	d	file:
SQLITE_IOERR_NOMEM_BKPT	sqlite/sqlite3.c	/^# define SQLITE_IOERR_NOMEM_BKPT /;"	d	file:
SQLITE_IOERR_RDLOCK	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_RDLOCK /;"	d
SQLITE_IOERR_RDLOCK	sqlite/sqlite3.c	/^#define SQLITE_IOERR_RDLOCK /;"	d	file:
SQLITE_IOERR_READ	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_READ /;"	d
SQLITE_IOERR_READ	sqlite/sqlite3.c	/^#define SQLITE_IOERR_READ /;"	d	file:
SQLITE_IOERR_SEEK	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_SEEK /;"	d
SQLITE_IOERR_SEEK	sqlite/sqlite3.c	/^#define SQLITE_IOERR_SEEK /;"	d	file:
SQLITE_IOERR_SHMLOCK	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_SHMLOCK /;"	d
SQLITE_IOERR_SHMLOCK	sqlite/sqlite3.c	/^#define SQLITE_IOERR_SHMLOCK /;"	d	file:
SQLITE_IOERR_SHMMAP	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_SHMMAP /;"	d
SQLITE_IOERR_SHMMAP	sqlite/sqlite3.c	/^#define SQLITE_IOERR_SHMMAP /;"	d	file:
SQLITE_IOERR_SHMOPEN	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_SHMOPEN /;"	d
SQLITE_IOERR_SHMOPEN	sqlite/sqlite3.c	/^#define SQLITE_IOERR_SHMOPEN /;"	d	file:
SQLITE_IOERR_SHMSIZE	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_SHMSIZE /;"	d
SQLITE_IOERR_SHMSIZE	sqlite/sqlite3.c	/^#define SQLITE_IOERR_SHMSIZE /;"	d	file:
SQLITE_IOERR_SHORT_READ	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_SHORT_READ /;"	d
SQLITE_IOERR_SHORT_READ	sqlite/sqlite3.c	/^#define SQLITE_IOERR_SHORT_READ /;"	d	file:
SQLITE_IOERR_TRUNCATE	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_TRUNCATE /;"	d
SQLITE_IOERR_TRUNCATE	sqlite/sqlite3.c	/^#define SQLITE_IOERR_TRUNCATE /;"	d	file:
SQLITE_IOERR_UNLOCK	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_UNLOCK /;"	d
SQLITE_IOERR_UNLOCK	sqlite/sqlite3.c	/^#define SQLITE_IOERR_UNLOCK /;"	d	file:
SQLITE_IOERR_VNODE	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_VNODE /;"	d
SQLITE_IOERR_VNODE	sqlite/sqlite3.c	/^#define SQLITE_IOERR_VNODE /;"	d	file:
SQLITE_IOERR_WRITE	include/sqlite/sqlite3.h	/^#define SQLITE_IOERR_WRITE /;"	d
SQLITE_IOERR_WRITE	sqlite/sqlite3.c	/^#define SQLITE_IOERR_WRITE /;"	d	file:
SQLITE_IgnoreChecks	sqlite/sqlite3.c	/^#define SQLITE_IgnoreChecks /;"	d	file:
SQLITE_InternChanges	sqlite/sqlite3.c	/^#define SQLITE_InternChanges /;"	d	file:
SQLITE_JUMPIFNULL	sqlite/sqlite3.c	/^#define SQLITE_JUMPIFNULL /;"	d	file:
SQLITE_KEEPNULL	sqlite/sqlite3.c	/^#define SQLITE_KEEPNULL /;"	d	file:
SQLITE_LAST_ERRNO	include/sqlite/sqlite3.h	/^#define SQLITE_LAST_ERRNO /;"	d
SQLITE_LAST_ERRNO	sqlite/sqlite3.c	/^#define SQLITE_LAST_ERRNO /;"	d	file:
SQLITE_LIMIT_ATTACHED	include/sqlite/sqlite3.h	/^#define SQLITE_LIMIT_ATTACHED /;"	d
SQLITE_LIMIT_ATTACHED	sqlite/sqlite3.c	/^#define SQLITE_LIMIT_ATTACHED /;"	d	file:
SQLITE_LIMIT_COLUMN	include/sqlite/sqlite3.h	/^#define SQLITE_LIMIT_COLUMN /;"	d
SQLITE_LIMIT_COLUMN	sqlite/sqlite3.c	/^#define SQLITE_LIMIT_COLUMN /;"	d	file:
SQLITE_LIMIT_COMPOUND_SELECT	include/sqlite/sqlite3.h	/^#define SQLITE_LIMIT_COMPOUND_SELECT /;"	d
SQLITE_LIMIT_COMPOUND_SELECT	sqlite/sqlite3.c	/^#define SQLITE_LIMIT_COMPOUND_SELECT /;"	d	file:
SQLITE_LIMIT_EXPR_DEPTH	include/sqlite/sqlite3.h	/^#define SQLITE_LIMIT_EXPR_DEPTH /;"	d
SQLITE_LIMIT_EXPR_DEPTH	sqlite/sqlite3.c	/^#define SQLITE_LIMIT_EXPR_DEPTH /;"	d	file:
SQLITE_LIMIT_FUNCTION_ARG	include/sqlite/sqlite3.h	/^#define SQLITE_LIMIT_FUNCTION_ARG /;"	d
SQLITE_LIMIT_FUNCTION_ARG	sqlite/sqlite3.c	/^#define SQLITE_LIMIT_FUNCTION_ARG /;"	d	file:
SQLITE_LIMIT_LENGTH	include/sqlite/sqlite3.h	/^#define SQLITE_LIMIT_LENGTH /;"	d
SQLITE_LIMIT_LENGTH	sqlite/sqlite3.c	/^#define SQLITE_LIMIT_LENGTH /;"	d	file:
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	include/sqlite/sqlite3.h	/^#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH /;"	d
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	sqlite/sqlite3.c	/^#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH /;"	d	file:
SQLITE_LIMIT_SQL_LENGTH	include/sqlite/sqlite3.h	/^#define SQLITE_LIMIT_SQL_LENGTH /;"	d
SQLITE_LIMIT_SQL_LENGTH	sqlite/sqlite3.c	/^#define SQLITE_LIMIT_SQL_LENGTH /;"	d	file:
SQLITE_LIMIT_TRIGGER_DEPTH	include/sqlite/sqlite3.h	/^#define SQLITE_LIMIT_TRIGGER_DEPTH /;"	d
SQLITE_LIMIT_TRIGGER_DEPTH	sqlite/sqlite3.c	/^#define SQLITE_LIMIT_TRIGGER_DEPTH /;"	d	file:
SQLITE_LIMIT_VARIABLE_NUMBER	include/sqlite/sqlite3.h	/^#define SQLITE_LIMIT_VARIABLE_NUMBER /;"	d
SQLITE_LIMIT_VARIABLE_NUMBER	sqlite/sqlite3.c	/^#define SQLITE_LIMIT_VARIABLE_NUMBER /;"	d	file:
SQLITE_LIMIT_VDBE_OP	include/sqlite/sqlite3.h	/^#define SQLITE_LIMIT_VDBE_OP /;"	d
SQLITE_LIMIT_VDBE_OP	sqlite/sqlite3.c	/^#define SQLITE_LIMIT_VDBE_OP /;"	d	file:
SQLITE_LIMIT_WORKER_THREADS	include/sqlite/sqlite3.h	/^#define SQLITE_LIMIT_WORKER_THREADS /;"	d
SQLITE_LIMIT_WORKER_THREADS	sqlite/sqlite3.c	/^#define SQLITE_LIMIT_WORKER_THREADS /;"	d	file:
SQLITE_LITTLEENDIAN	sqlite/sqlite3.c	/^# define SQLITE_LITTLEENDIAN /;"	d	file:
SQLITE_LOCKED	include/sqlite/sqlite3.h	/^#define SQLITE_LOCKED /;"	d
SQLITE_LOCKED	sqlite/sqlite3.c	/^#define SQLITE_LOCKED /;"	d	file:
SQLITE_LOCKED_SHAREDCACHE	include/sqlite/sqlite3.h	/^#define SQLITE_LOCKED_SHAREDCACHE /;"	d
SQLITE_LOCKED_SHAREDCACHE	sqlite/sqlite3.c	/^#define SQLITE_LOCKED_SHAREDCACHE /;"	d	file:
SQLITE_LOCK_EXCLUSIVE	include/sqlite/sqlite3.h	/^#define SQLITE_LOCK_EXCLUSIVE /;"	d
SQLITE_LOCK_EXCLUSIVE	sqlite/sqlite3.c	/^#define SQLITE_LOCK_EXCLUSIVE /;"	d	file:
SQLITE_LOCK_NONE	include/sqlite/sqlite3.h	/^#define SQLITE_LOCK_NONE /;"	d
SQLITE_LOCK_NONE	sqlite/sqlite3.c	/^#define SQLITE_LOCK_NONE /;"	d	file:
SQLITE_LOCK_PENDING	include/sqlite/sqlite3.h	/^#define SQLITE_LOCK_PENDING /;"	d
SQLITE_LOCK_PENDING	sqlite/sqlite3.c	/^#define SQLITE_LOCK_PENDING /;"	d	file:
SQLITE_LOCK_RESERVED	include/sqlite/sqlite3.h	/^#define SQLITE_LOCK_RESERVED /;"	d
SQLITE_LOCK_RESERVED	sqlite/sqlite3.c	/^#define SQLITE_LOCK_RESERVED /;"	d	file:
SQLITE_LOCK_SHARED	include/sqlite/sqlite3.h	/^#define SQLITE_LOCK_SHARED /;"	d
SQLITE_LOCK_SHARED	sqlite/sqlite3.c	/^#define SQLITE_LOCK_SHARED /;"	d	file:
SQLITE_LegacyFileFmt	sqlite/sqlite3.c	/^#define SQLITE_LegacyFileFmt /;"	d	file:
SQLITE_LoadExtFunc	sqlite/sqlite3.c	/^#define SQLITE_LoadExtFunc /;"	d	file:
SQLITE_LoadExtension	sqlite/sqlite3.c	/^#define SQLITE_LoadExtension /;"	d	file:
SQLITE_MAGIC_BUSY	sqlite/sqlite3.c	/^#define SQLITE_MAGIC_BUSY /;"	d	file:
SQLITE_MAGIC_CLOSED	sqlite/sqlite3.c	/^#define SQLITE_MAGIC_CLOSED /;"	d	file:
SQLITE_MAGIC_ERROR	sqlite/sqlite3.c	/^#define SQLITE_MAGIC_ERROR /;"	d	file:
SQLITE_MAGIC_OPEN	sqlite/sqlite3.c	/^#define SQLITE_MAGIC_OPEN /;"	d	file:
SQLITE_MAGIC_SICK	sqlite/sqlite3.c	/^#define SQLITE_MAGIC_SICK /;"	d	file:
SQLITE_MAGIC_ZOMBIE	sqlite/sqlite3.c	/^#define SQLITE_MAGIC_ZOMBIE /;"	d	file:
SQLITE_MALLOC	sqlite/sqlite3.c	/^#define SQLITE_MALLOC(/;"	d	file:
SQLITE_MALLOCSIZE	sqlite/sqlite3.c	/^#      define SQLITE_MALLOCSIZE /;"	d	file:
SQLITE_MALLOCSIZE	sqlite/sqlite3.c	/^#      define SQLITE_MALLOCSIZE(/;"	d	file:
SQLITE_MALLOCSIZE	sqlite/sqlite3.c	/^#define SQLITE_MALLOCSIZE(/;"	d	file:
SQLITE_MALLOC_SOFT_LIMIT	sqlite/sqlite3.c	/^# define SQLITE_MALLOC_SOFT_LIMIT /;"	d	file:
SQLITE_MAX_ATTACHED	sqlite/sqlite3.c	/^# define SQLITE_MAX_ATTACHED /;"	d	file:
SQLITE_MAX_COLUMN	sqlite/sqlite3.c	/^# define SQLITE_MAX_COLUMN /;"	d	file:
SQLITE_MAX_COMPOUND_SELECT	sqlite/sqlite3.c	/^# define SQLITE_MAX_COMPOUND_SELECT /;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqlite/sqlite3.c	/^# define SQLITE_MAX_DEFAULT_PAGE_SIZE /;"	d	file:
SQLITE_MAX_EXPR_DEPTH	sqlite/sqlite3.c	/^# define SQLITE_MAX_EXPR_DEPTH /;"	d	file:
SQLITE_MAX_FILE_FORMAT	sqlite/sqlite3.c	/^#define SQLITE_MAX_FILE_FORMAT /;"	d	file:
SQLITE_MAX_FUNCTION_ARG	sqlite/sqlite3.c	/^# define SQLITE_MAX_FUNCTION_ARG /;"	d	file:
SQLITE_MAX_LENGTH	sqlite/sqlite3.c	/^# define SQLITE_MAX_LENGTH /;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	sqlite/sqlite3.c	/^# define SQLITE_MAX_LIKE_PATTERN_LENGTH /;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite/sqlite3.c	/^#   define SQLITE_MAX_MMAP_SIZE /;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite/sqlite3.c	/^# define SQLITE_MAX_MMAP_SIZE /;"	d	file:
SQLITE_MAX_PAGE_COUNT	sqlite/sqlite3.c	/^# define SQLITE_MAX_PAGE_COUNT /;"	d	file:
SQLITE_MAX_PAGE_SIZE	sqlite/sqlite3.c	/^#define SQLITE_MAX_PAGE_SIZE /;"	d	file:
SQLITE_MAX_SCHEMA_RETRY	sqlite/sqlite3.c	/^# define SQLITE_MAX_SCHEMA_RETRY /;"	d	file:
SQLITE_MAX_SQL_LENGTH	sqlite/sqlite3.c	/^# define SQLITE_MAX_SQL_LENGTH /;"	d	file:
SQLITE_MAX_TRIGGER_DEPTH	sqlite/sqlite3.c	/^# define SQLITE_MAX_TRIGGER_DEPTH /;"	d	file:
SQLITE_MAX_U32	sqlite/sqlite3.c	/^#define SQLITE_MAX_U32 /;"	d	file:
SQLITE_MAX_VARIABLE_NUMBER	sqlite/sqlite3.c	/^# define SQLITE_MAX_VARIABLE_NUMBER /;"	d	file:
SQLITE_MAX_VDBE_OP	sqlite/sqlite3.c	/^# define SQLITE_MAX_VDBE_OP /;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite/sqlite3.c	/^# define SQLITE_MAX_WORKER_THREADS /;"	d	file:
SQLITE_MISMATCH	include/sqlite/sqlite3.h	/^#define SQLITE_MISMATCH /;"	d
SQLITE_MISMATCH	sqlite/sqlite3.c	/^#define SQLITE_MISMATCH /;"	d	file:
SQLITE_MISUSE	include/sqlite/sqlite3.h	/^#define SQLITE_MISUSE /;"	d
SQLITE_MISUSE	sqlite/sqlite3.c	/^#define SQLITE_MISUSE /;"	d	file:
SQLITE_MISUSE_BKPT	sqlite/sqlite3.c	/^#define SQLITE_MISUSE_BKPT /;"	d	file:
SQLITE_MSVC_H	sqlite/sqlite3.c	/^#define SQLITE_MSVC_H$/;"	d	file:
SQLITE_MUTEX_FAST	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_FAST /;"	d
SQLITE_MUTEX_FAST	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_FAST /;"	d	file:
SQLITE_MUTEX_NOOP	sqlite/sqlite3.c	/^#    define SQLITE_MUTEX_NOOP$/;"	d	file:
SQLITE_MUTEX_NREF	sqlite/sqlite3.c	/^# define SQLITE_MUTEX_NREF /;"	d	file:
SQLITE_MUTEX_OMIT	sqlite/sqlite3.c	/^# define SQLITE_MUTEX_OMIT$/;"	d	file:
SQLITE_MUTEX_PTHREADS	sqlite/sqlite3.c	/^#    define SQLITE_MUTEX_PTHREADS$/;"	d	file:
SQLITE_MUTEX_RECURSIVE	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_RECURSIVE /;"	d
SQLITE_MUTEX_RECURSIVE	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_RECURSIVE /;"	d	file:
SQLITE_MUTEX_STATIC_APP1	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_APP1 /;"	d
SQLITE_MUTEX_STATIC_APP1	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_APP1 /;"	d	file:
SQLITE_MUTEX_STATIC_APP2	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_APP2 /;"	d
SQLITE_MUTEX_STATIC_APP2	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_APP2 /;"	d	file:
SQLITE_MUTEX_STATIC_APP3	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_APP3 /;"	d
SQLITE_MUTEX_STATIC_APP3	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_APP3 /;"	d	file:
SQLITE_MUTEX_STATIC_LRU	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_LRU /;"	d
SQLITE_MUTEX_STATIC_LRU	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_LRU /;"	d	file:
SQLITE_MUTEX_STATIC_LRU2	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_LRU2 /;"	d
SQLITE_MUTEX_STATIC_LRU2	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_LRU2 /;"	d	file:
SQLITE_MUTEX_STATIC_MASTER	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_MASTER /;"	d
SQLITE_MUTEX_STATIC_MASTER	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_MASTER /;"	d	file:
SQLITE_MUTEX_STATIC_MEM	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_MEM /;"	d
SQLITE_MUTEX_STATIC_MEM	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_MEM /;"	d	file:
SQLITE_MUTEX_STATIC_MEM2	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_MEM2 /;"	d
SQLITE_MUTEX_STATIC_MEM2	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_MEM2 /;"	d	file:
SQLITE_MUTEX_STATIC_OPEN	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_OPEN /;"	d
SQLITE_MUTEX_STATIC_OPEN	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_OPEN /;"	d	file:
SQLITE_MUTEX_STATIC_PMEM	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_PMEM /;"	d
SQLITE_MUTEX_STATIC_PMEM	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_PMEM /;"	d	file:
SQLITE_MUTEX_STATIC_PRNG	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_PRNG /;"	d
SQLITE_MUTEX_STATIC_PRNG	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_PRNG /;"	d	file:
SQLITE_MUTEX_STATIC_VFS1	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_VFS1 /;"	d
SQLITE_MUTEX_STATIC_VFS1	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_VFS1 /;"	d	file:
SQLITE_MUTEX_STATIC_VFS2	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_VFS2 /;"	d
SQLITE_MUTEX_STATIC_VFS2	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_VFS2 /;"	d	file:
SQLITE_MUTEX_STATIC_VFS3	include/sqlite/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_VFS3 /;"	d
SQLITE_MUTEX_STATIC_VFS3	sqlite/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_VFS3 /;"	d	file:
SQLITE_MUTEX_W32	sqlite/sqlite3.c	/^#    define SQLITE_MUTEX_W32$/;"	d	file:
SQLITE_MX_JUMP_OPCODE	sqlite/sqlite3.c	/^#define SQLITE_MX_JUMP_OPCODE /;"	d	file:
SQLITE_NEED_ERR_NAME	sqlite/sqlite3.c	/^# define SQLITE_NEED_ERR_NAME$/;"	d	file:
SQLITE_NOINLINE	sqlite/sqlite3.c	/^#  define SQLITE_NOINLINE /;"	d	file:
SQLITE_NOINLINE	sqlite/sqlite3.c	/^#  define SQLITE_NOINLINE$/;"	d	file:
SQLITE_NOLFS	include/sqlite/sqlite3.h	/^#define SQLITE_NOLFS /;"	d
SQLITE_NOLFS	sqlite/sqlite3.c	/^#define SQLITE_NOLFS /;"	d	file:
SQLITE_NOMEM	include/sqlite/sqlite3.h	/^#define SQLITE_NOMEM /;"	d
SQLITE_NOMEM	sqlite/sqlite3.c	/^#define SQLITE_NOMEM /;"	d	file:
SQLITE_NOMEM_BKPT	sqlite/sqlite3.c	/^# define SQLITE_NOMEM_BKPT /;"	d	file:
SQLITE_NOTADB	include/sqlite/sqlite3.h	/^#define SQLITE_NOTADB /;"	d
SQLITE_NOTADB	sqlite/sqlite3.c	/^#define SQLITE_NOTADB /;"	d	file:
SQLITE_NOTFOUND	include/sqlite/sqlite3.h	/^#define SQLITE_NOTFOUND /;"	d
SQLITE_NOTFOUND	sqlite/sqlite3.c	/^#define SQLITE_NOTFOUND /;"	d	file:
SQLITE_NOTICE	include/sqlite/sqlite3.h	/^#define SQLITE_NOTICE /;"	d
SQLITE_NOTICE	sqlite/sqlite3.c	/^#define SQLITE_NOTICE /;"	d	file:
SQLITE_NOTICE_RECOVER_ROLLBACK	include/sqlite/sqlite3.h	/^#define SQLITE_NOTICE_RECOVER_ROLLBACK /;"	d
SQLITE_NOTICE_RECOVER_ROLLBACK	sqlite/sqlite3.c	/^#define SQLITE_NOTICE_RECOVER_ROLLBACK /;"	d	file:
SQLITE_NOTICE_RECOVER_WAL	include/sqlite/sqlite3.h	/^#define SQLITE_NOTICE_RECOVER_WAL /;"	d
SQLITE_NOTICE_RECOVER_WAL	sqlite/sqlite3.c	/^#define SQLITE_NOTICE_RECOVER_WAL /;"	d	file:
SQLITE_NOTNULL	sqlite/sqlite3.c	/^#define SQLITE_NOTNULL /;"	d	file:
SQLITE_NULL	include/sqlite/sqlite3.h	/^#define SQLITE_NULL /;"	d
SQLITE_NULL	sqlite/sqlite3.c	/^#define SQLITE_NULL /;"	d	file:
SQLITE_NULLEQ	sqlite/sqlite3.c	/^#define SQLITE_NULLEQ /;"	d	file:
SQLITE_N_BTREE_META	sqlite/sqlite3.c	/^#define SQLITE_N_BTREE_META /;"	d	file:
SQLITE_N_COLCACHE	sqlite/sqlite3.c	/^# define SQLITE_N_COLCACHE /;"	d	file:
SQLITE_N_LIMIT	sqlite/sqlite3.c	/^#define SQLITE_N_LIMIT /;"	d	file:
SQLITE_NoCkptOnClose	sqlite/sqlite3.c	/^#define SQLITE_NoCkptOnClose /;"	d	file:
SQLITE_NullCallback	sqlite/sqlite3.c	/^#define SQLITE_NullCallback /;"	d	file:
SQLITE_OK	include/sqlite/sqlite3.h	/^#define SQLITE_OK /;"	d
SQLITE_OK	sqlite/sqlite3.c	/^#define SQLITE_OK /;"	d	file:
SQLITE_OK_LOAD_PERMANENTLY	include/sqlite/sqlite3.h	/^#define SQLITE_OK_LOAD_PERMANENTLY /;"	d
SQLITE_OK_LOAD_PERMANENTLY	sqlite/sqlite3.c	/^#define SQLITE_OK_LOAD_PERMANENTLY /;"	d	file:
SQLITE_OMIT_DATETIME_FUNCS	sqlite/sqlite3.c	/^# define SQLITE_OMIT_DATETIME_FUNCS /;"	d	file:
SQLITE_OMIT_LOAD_EXTENSION	sqlite/shell.c	/^# define SQLITE_OMIT_LOAD_EXTENSION /;"	d	file:
SQLITE_OMIT_LOAD_EXTENSION	sqlite/sqlite3.c	/^#define SQLITE_OMIT_LOAD_EXTENSION /;"	d	file:
SQLITE_OMIT_POPEN	sqlite/shell.c	/^#  define SQLITE_OMIT_POPEN /;"	d	file:
SQLITE_OMIT_TRACE	sqlite/sqlite3.c	/^# define SQLITE_OMIT_TRACE /;"	d	file:
SQLITE_OPEN_AUTOPROXY	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_AUTOPROXY /;"	d
SQLITE_OPEN_AUTOPROXY	sqlite/sqlite3.c	/^#define SQLITE_OPEN_AUTOPROXY /;"	d	file:
SQLITE_OPEN_CREATE	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_CREATE /;"	d
SQLITE_OPEN_CREATE	sqlite/sqlite3.c	/^#define SQLITE_OPEN_CREATE /;"	d	file:
SQLITE_OPEN_DELETEONCLOSE	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_DELETEONCLOSE /;"	d
SQLITE_OPEN_DELETEONCLOSE	sqlite/sqlite3.c	/^#define SQLITE_OPEN_DELETEONCLOSE /;"	d	file:
SQLITE_OPEN_EXCLUSIVE	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_EXCLUSIVE /;"	d
SQLITE_OPEN_EXCLUSIVE	sqlite/sqlite3.c	/^#define SQLITE_OPEN_EXCLUSIVE /;"	d	file:
SQLITE_OPEN_FULLMUTEX	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_FULLMUTEX /;"	d
SQLITE_OPEN_FULLMUTEX	sqlite/sqlite3.c	/^#define SQLITE_OPEN_FULLMUTEX /;"	d	file:
SQLITE_OPEN_MAIN_DB	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_MAIN_DB /;"	d
SQLITE_OPEN_MAIN_DB	sqlite/sqlite3.c	/^#define SQLITE_OPEN_MAIN_DB /;"	d	file:
SQLITE_OPEN_MAIN_JOURNAL	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_MAIN_JOURNAL /;"	d
SQLITE_OPEN_MAIN_JOURNAL	sqlite/sqlite3.c	/^#define SQLITE_OPEN_MAIN_JOURNAL /;"	d	file:
SQLITE_OPEN_MASTER_JOURNAL	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_MASTER_JOURNAL /;"	d
SQLITE_OPEN_MASTER_JOURNAL	sqlite/sqlite3.c	/^#define SQLITE_OPEN_MASTER_JOURNAL /;"	d	file:
SQLITE_OPEN_MEMORY	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_MEMORY /;"	d
SQLITE_OPEN_MEMORY	sqlite/sqlite3.c	/^#define SQLITE_OPEN_MEMORY /;"	d	file:
SQLITE_OPEN_NOMUTEX	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_NOMUTEX /;"	d
SQLITE_OPEN_NOMUTEX	sqlite/sqlite3.c	/^#define SQLITE_OPEN_NOMUTEX /;"	d	file:
SQLITE_OPEN_PRIVATECACHE	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_PRIVATECACHE /;"	d
SQLITE_OPEN_PRIVATECACHE	sqlite/sqlite3.c	/^#define SQLITE_OPEN_PRIVATECACHE /;"	d	file:
SQLITE_OPEN_READONLY	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_READONLY /;"	d
SQLITE_OPEN_READONLY	sqlite/sqlite3.c	/^#define SQLITE_OPEN_READONLY /;"	d	file:
SQLITE_OPEN_READWRITE	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_READWRITE /;"	d
SQLITE_OPEN_READWRITE	sqlite/sqlite3.c	/^#define SQLITE_OPEN_READWRITE /;"	d	file:
SQLITE_OPEN_SHAREDCACHE	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_SHAREDCACHE /;"	d
SQLITE_OPEN_SHAREDCACHE	sqlite/sqlite3.c	/^#define SQLITE_OPEN_SHAREDCACHE /;"	d	file:
SQLITE_OPEN_SUBJOURNAL	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_SUBJOURNAL /;"	d
SQLITE_OPEN_SUBJOURNAL	sqlite/sqlite3.c	/^#define SQLITE_OPEN_SUBJOURNAL /;"	d	file:
SQLITE_OPEN_TEMP_DB	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_TEMP_DB /;"	d
SQLITE_OPEN_TEMP_DB	sqlite/sqlite3.c	/^#define SQLITE_OPEN_TEMP_DB /;"	d	file:
SQLITE_OPEN_TEMP_JOURNAL	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_TEMP_JOURNAL /;"	d
SQLITE_OPEN_TEMP_JOURNAL	sqlite/sqlite3.c	/^#define SQLITE_OPEN_TEMP_JOURNAL /;"	d	file:
SQLITE_OPEN_TRANSIENT_DB	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_TRANSIENT_DB /;"	d
SQLITE_OPEN_TRANSIENT_DB	sqlite/sqlite3.c	/^#define SQLITE_OPEN_TRANSIENT_DB /;"	d	file:
SQLITE_OPEN_URI	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_URI /;"	d
SQLITE_OPEN_URI	sqlite/sqlite3.c	/^#define SQLITE_OPEN_URI /;"	d	file:
SQLITE_OPEN_WAL	include/sqlite/sqlite3.h	/^#define SQLITE_OPEN_WAL /;"	d
SQLITE_OPEN_WAL	sqlite/sqlite3.c	/^#define SQLITE_OPEN_WAL /;"	d	file:
SQLITE_OS_OTHER	sqlite/sqlite3.c	/^#  define SQLITE_OS_OTHER /;"	d	file:
SQLITE_OS_OTHER	sqlite/sqlite3.c	/^#define SQLITE_OS_OTHER /;"	d	file:
SQLITE_OS_SETUP_H	sqlite/sqlite3.c	/^#define SQLITE_OS_SETUP_H$/;"	d	file:
SQLITE_OS_UNIX	sqlite/sqlite3.c	/^#      define SQLITE_OS_UNIX /;"	d	file:
SQLITE_OS_UNIX	sqlite/sqlite3.c	/^#    define SQLITE_OS_UNIX /;"	d	file:
SQLITE_OS_WIN	sqlite/sqlite3.c	/^#      define SQLITE_OS_WIN /;"	d	file:
SQLITE_OS_WIN	sqlite/sqlite3.c	/^#    define SQLITE_OS_WIN /;"	d	file:
SQLITE_OmitNoopJoin	sqlite/sqlite3.c	/^#define SQLITE_OmitNoopJoin /;"	d	file:
SQLITE_OrderByIdxJoin	sqlite/sqlite3.c	/^#define SQLITE_OrderByIdxJoin /;"	d	file:
SQLITE_PAGER_H	sqlite/sqlite3.c	/^#define SQLITE_PAGER_H$/;"	d	file:
SQLITE_PERM	include/sqlite/sqlite3.h	/^#define SQLITE_PERM /;"	d
SQLITE_PERM	sqlite/sqlite3.c	/^#define SQLITE_PERM /;"	d	file:
SQLITE_POWERSAFE_OVERWRITE	sqlite/sqlite3.c	/^# define SQLITE_POWERSAFE_OVERWRITE /;"	d	file:
SQLITE_PRAGMA	include/sqlite/sqlite3.h	/^#define SQLITE_PRAGMA /;"	d
SQLITE_PRAGMA	sqlite/sqlite3.c	/^#define SQLITE_PRAGMA /;"	d	file:
SQLITE_PREPARE_MASK	sqlite/sqlite3.c	/^#define SQLITE_PREPARE_MASK /;"	d	file:
SQLITE_PREPARE_PERSISTENT	include/sqlite/sqlite3.h	/^#define SQLITE_PREPARE_PERSISTENT /;"	d
SQLITE_PREPARE_PERSISTENT	sqlite/sqlite3.c	/^#define SQLITE_PREPARE_PERSISTENT /;"	d	file:
SQLITE_PREPARE_SAVESQL	sqlite/sqlite3.c	/^#define SQLITE_PREPARE_SAVESQL /;"	d	file:
SQLITE_PRINTF_INTERNAL	sqlite/sqlite3.c	/^#define SQLITE_PRINTF_INTERNAL /;"	d	file:
SQLITE_PRINTF_MALLOCED	sqlite/sqlite3.c	/^#define SQLITE_PRINTF_MALLOCED /;"	d	file:
SQLITE_PRINTF_SQLFUNC	sqlite/sqlite3.c	/^#define SQLITE_PRINTF_SQLFUNC /;"	d	file:
SQLITE_PRIVATE	sqlite/sqlite3.c	/^# define SQLITE_PRIVATE /;"	d	file:
SQLITE_PROTOCOL	include/sqlite/sqlite3.h	/^#define SQLITE_PROTOCOL /;"	d
SQLITE_PROTOCOL	sqlite/sqlite3.c	/^#define SQLITE_PROTOCOL /;"	d	file:
SQLITE_PTRSIZE	sqlite/sqlite3.c	/^#   define SQLITE_PTRSIZE /;"	d	file:
SQLITE_PTR_TO_INT	sqlite/sqlite3.c	/^# define SQLITE_PTR_TO_INT(/;"	d	file:
SQLITE_PreferBuiltin	sqlite/sqlite3.c	/^#define SQLITE_PreferBuiltin /;"	d	file:
SQLITE_QueryFlattener	sqlite/sqlite3.c	/^#define SQLITE_QueryFlattener /;"	d	file:
SQLITE_QueryOnly	sqlite/sqlite3.c	/^#define SQLITE_QueryOnly /;"	d	file:
SQLITE_RANGE	include/sqlite/sqlite3.h	/^#define SQLITE_RANGE /;"	d
SQLITE_RANGE	sqlite/sqlite3.c	/^#define SQLITE_RANGE /;"	d	file:
SQLITE_READ	include/sqlite/sqlite3.h	/^#define SQLITE_READ /;"	d
SQLITE_READ	sqlite/sqlite3.c	/^#define SQLITE_READ /;"	d	file:
SQLITE_READONLY	include/sqlite/sqlite3.h	/^#define SQLITE_READONLY /;"	d
SQLITE_READONLY	sqlite/sqlite3.c	/^#define SQLITE_READONLY /;"	d	file:
SQLITE_READONLY_CANTLOCK	include/sqlite/sqlite3.h	/^#define SQLITE_READONLY_CANTLOCK /;"	d
SQLITE_READONLY_CANTLOCK	sqlite/sqlite3.c	/^#define SQLITE_READONLY_CANTLOCK /;"	d	file:
SQLITE_READONLY_DBMOVED	include/sqlite/sqlite3.h	/^#define SQLITE_READONLY_DBMOVED /;"	d
SQLITE_READONLY_DBMOVED	sqlite/sqlite3.c	/^#define SQLITE_READONLY_DBMOVED /;"	d	file:
SQLITE_READONLY_RECOVERY	include/sqlite/sqlite3.h	/^#define SQLITE_READONLY_RECOVERY /;"	d
SQLITE_READONLY_RECOVERY	sqlite/sqlite3.c	/^#define SQLITE_READONLY_RECOVERY /;"	d	file:
SQLITE_READONLY_ROLLBACK	include/sqlite/sqlite3.h	/^#define SQLITE_READONLY_ROLLBACK /;"	d
SQLITE_READONLY_ROLLBACK	sqlite/sqlite3.c	/^#define SQLITE_READONLY_ROLLBACK /;"	d	file:
SQLITE_REALLOC	sqlite/sqlite3.c	/^#define SQLITE_REALLOC(/;"	d	file:
SQLITE_RECURSIVE	include/sqlite/sqlite3.h	/^#define SQLITE_RECURSIVE /;"	d
SQLITE_RECURSIVE	sqlite/sqlite3.c	/^#define SQLITE_RECURSIVE /;"	d	file:
SQLITE_REINDEX	include/sqlite/sqlite3.h	/^#define SQLITE_REINDEX /;"	d
SQLITE_REINDEX	sqlite/sqlite3.c	/^#define SQLITE_REINDEX /;"	d	file:
SQLITE_REPLACE	include/sqlite/sqlite3.h	/^#define SQLITE_REPLACE /;"	d
SQLITE_REPLACE	sqlite/sqlite3.c	/^#define SQLITE_REPLACE /;"	d	file:
SQLITE_ROLLBACK	include/sqlite/sqlite3.h	/^#define SQLITE_ROLLBACK /;"	d
SQLITE_ROLLBACK	sqlite/sqlite3.c	/^#define SQLITE_ROLLBACK /;"	d	file:
SQLITE_ROW	include/sqlite/sqlite3.h	/^#define SQLITE_ROW /;"	d
SQLITE_ROW	sqlite/sqlite3.c	/^#define SQLITE_ROW /;"	d	file:
SQLITE_ReadUncommit	sqlite/sqlite3.c	/^#define SQLITE_ReadUncommit /;"	d	file:
SQLITE_RecTriggers	sqlite/sqlite3.c	/^#define SQLITE_RecTriggers /;"	d	file:
SQLITE_ReverseOrder	sqlite/sqlite3.c	/^#define SQLITE_ReverseOrder /;"	d	file:
SQLITE_SAVEPOINT	include/sqlite/sqlite3.h	/^#define SQLITE_SAVEPOINT /;"	d
SQLITE_SAVEPOINT	sqlite/sqlite3.c	/^#define SQLITE_SAVEPOINT /;"	d	file:
SQLITE_SCANSTAT_EST	include/sqlite/sqlite3.h	/^#define SQLITE_SCANSTAT_EST /;"	d
SQLITE_SCANSTAT_EST	sqlite/sqlite3.c	/^#define SQLITE_SCANSTAT_EST /;"	d	file:
SQLITE_SCANSTAT_EXPLAIN	include/sqlite/sqlite3.h	/^#define SQLITE_SCANSTAT_EXPLAIN /;"	d
SQLITE_SCANSTAT_EXPLAIN	sqlite/sqlite3.c	/^#define SQLITE_SCANSTAT_EXPLAIN /;"	d	file:
SQLITE_SCANSTAT_NAME	include/sqlite/sqlite3.h	/^#define SQLITE_SCANSTAT_NAME /;"	d
SQLITE_SCANSTAT_NAME	sqlite/sqlite3.c	/^#define SQLITE_SCANSTAT_NAME /;"	d	file:
SQLITE_SCANSTAT_NLOOP	include/sqlite/sqlite3.h	/^#define SQLITE_SCANSTAT_NLOOP /;"	d
SQLITE_SCANSTAT_NLOOP	sqlite/sqlite3.c	/^#define SQLITE_SCANSTAT_NLOOP /;"	d	file:
SQLITE_SCANSTAT_NVISIT	include/sqlite/sqlite3.h	/^#define SQLITE_SCANSTAT_NVISIT /;"	d
SQLITE_SCANSTAT_NVISIT	sqlite/sqlite3.c	/^#define SQLITE_SCANSTAT_NVISIT /;"	d	file:
SQLITE_SCANSTAT_SELECTID	include/sqlite/sqlite3.h	/^#define SQLITE_SCANSTAT_SELECTID /;"	d
SQLITE_SCANSTAT_SELECTID	sqlite/sqlite3.c	/^#define SQLITE_SCANSTAT_SELECTID /;"	d	file:
SQLITE_SCHEMA	include/sqlite/sqlite3.h	/^#define SQLITE_SCHEMA /;"	d
SQLITE_SCHEMA	sqlite/sqlite3.c	/^#define SQLITE_SCHEMA /;"	d	file:
SQLITE_SELECT	include/sqlite/sqlite3.h	/^#define SQLITE_SELECT /;"	d
SQLITE_SELECT	sqlite/sqlite3.c	/^#define SQLITE_SELECT /;"	d	file:
SQLITE_SET_LOCKPROXYFILE	include/sqlite/sqlite3.h	/^#define SQLITE_SET_LOCKPROXYFILE /;"	d
SQLITE_SET_LOCKPROXYFILE	sqlite/sqlite3.c	/^#define SQLITE_SET_LOCKPROXYFILE /;"	d	file:
SQLITE_SHELL_IS_UTF8	sqlite/shell.c	/^#    define SQLITE_SHELL_IS_UTF8 /;"	d	file:
SQLITE_SHM_EXCLUSIVE	include/sqlite/sqlite3.h	/^#define SQLITE_SHM_EXCLUSIVE /;"	d
SQLITE_SHM_EXCLUSIVE	sqlite/sqlite3.c	/^#define SQLITE_SHM_EXCLUSIVE /;"	d	file:
SQLITE_SHM_LOCK	include/sqlite/sqlite3.h	/^#define SQLITE_SHM_LOCK /;"	d
SQLITE_SHM_LOCK	sqlite/sqlite3.c	/^#define SQLITE_SHM_LOCK /;"	d	file:
SQLITE_SHM_NLOCK	include/sqlite/sqlite3.h	/^#define SQLITE_SHM_NLOCK /;"	d
SQLITE_SHM_NLOCK	sqlite/sqlite3.c	/^#define SQLITE_SHM_NLOCK /;"	d	file:
SQLITE_SHM_SHARED	include/sqlite/sqlite3.h	/^#define SQLITE_SHM_SHARED /;"	d
SQLITE_SHM_SHARED	sqlite/sqlite3.c	/^#define SQLITE_SHM_SHARED /;"	d	file:
SQLITE_SHM_UNLOCK	include/sqlite/sqlite3.h	/^#define SQLITE_SHM_UNLOCK /;"	d
SQLITE_SHM_UNLOCK	sqlite/sqlite3.c	/^#define SQLITE_SHM_UNLOCK /;"	d	file:
SQLITE_SKIP_UTF8	sqlite/sqlite3.c	/^#define SQLITE_SKIP_UTF8(/;"	d	file:
SQLITE_SORTER_PMASZ	sqlite/sqlite3.c	/^# define SQLITE_SORTER_PMASZ /;"	d	file:
SQLITE_SOURCE_ID	include/sqlite/sqlite3.h	/^#define SQLITE_SOURCE_ID /;"	d
SQLITE_SOURCE_ID	sqlite/sqlite3.c	/^#define SQLITE_SOURCE_ID /;"	d	file:
SQLITE_SO_ASC	sqlite/sqlite3.c	/^#define SQLITE_SO_ASC /;"	d	file:
SQLITE_SO_DESC	sqlite/sqlite3.c	/^#define SQLITE_SO_DESC /;"	d	file:
SQLITE_SO_UNDEFINED	sqlite/sqlite3.c	/^#define SQLITE_SO_UNDEFINED /;"	d	file:
SQLITE_STATIC	include/sqlite/sqlite3.h	/^#define SQLITE_STATIC /;"	d
SQLITE_STATIC	sqlite/sqlite3.c	/^#define SQLITE_STATIC /;"	d	file:
SQLITE_STATUS_MALLOC_COUNT	include/sqlite/sqlite3.h	/^#define SQLITE_STATUS_MALLOC_COUNT /;"	d
SQLITE_STATUS_MALLOC_COUNT	sqlite/sqlite3.c	/^#define SQLITE_STATUS_MALLOC_COUNT /;"	d	file:
SQLITE_STATUS_MALLOC_SIZE	include/sqlite/sqlite3.h	/^#define SQLITE_STATUS_MALLOC_SIZE /;"	d
SQLITE_STATUS_MALLOC_SIZE	sqlite/sqlite3.c	/^#define SQLITE_STATUS_MALLOC_SIZE /;"	d	file:
SQLITE_STATUS_MEMORY_USED	include/sqlite/sqlite3.h	/^#define SQLITE_STATUS_MEMORY_USED /;"	d
SQLITE_STATUS_MEMORY_USED	sqlite/sqlite3.c	/^#define SQLITE_STATUS_MEMORY_USED /;"	d	file:
SQLITE_STATUS_PAGECACHE_OVERFLOW	include/sqlite/sqlite3.h	/^#define SQLITE_STATUS_PAGECACHE_OVERFLOW /;"	d
SQLITE_STATUS_PAGECACHE_OVERFLOW	sqlite/sqlite3.c	/^#define SQLITE_STATUS_PAGECACHE_OVERFLOW /;"	d	file:
SQLITE_STATUS_PAGECACHE_SIZE	include/sqlite/sqlite3.h	/^#define SQLITE_STATUS_PAGECACHE_SIZE /;"	d
SQLITE_STATUS_PAGECACHE_SIZE	sqlite/sqlite3.c	/^#define SQLITE_STATUS_PAGECACHE_SIZE /;"	d	file:
SQLITE_STATUS_PAGECACHE_USED	include/sqlite/sqlite3.h	/^#define SQLITE_STATUS_PAGECACHE_USED /;"	d
SQLITE_STATUS_PAGECACHE_USED	sqlite/sqlite3.c	/^#define SQLITE_STATUS_PAGECACHE_USED /;"	d	file:
SQLITE_STATUS_PARSER_STACK	include/sqlite/sqlite3.h	/^#define SQLITE_STATUS_PARSER_STACK /;"	d
SQLITE_STATUS_PARSER_STACK	sqlite/sqlite3.c	/^#define SQLITE_STATUS_PARSER_STACK /;"	d	file:
SQLITE_STATUS_SCRATCH_OVERFLOW	include/sqlite/sqlite3.h	/^#define SQLITE_STATUS_SCRATCH_OVERFLOW /;"	d
SQLITE_STATUS_SCRATCH_OVERFLOW	sqlite/sqlite3.c	/^#define SQLITE_STATUS_SCRATCH_OVERFLOW /;"	d	file:
SQLITE_STATUS_SCRATCH_SIZE	include/sqlite/sqlite3.h	/^#define SQLITE_STATUS_SCRATCH_SIZE /;"	d
SQLITE_STATUS_SCRATCH_SIZE	sqlite/sqlite3.c	/^#define SQLITE_STATUS_SCRATCH_SIZE /;"	d	file:
SQLITE_STATUS_SCRATCH_USED	include/sqlite/sqlite3.h	/^#define SQLITE_STATUS_SCRATCH_USED /;"	d
SQLITE_STATUS_SCRATCH_USED	sqlite/sqlite3.c	/^#define SQLITE_STATUS_SCRATCH_USED /;"	d	file:
SQLITE_STDCALL	include/sqlite/sqlite3.h	/^# define SQLITE_STDCALL /;"	d
SQLITE_STDCALL	sqlite/sqlite3.c	/^# define SQLITE_STDCALL /;"	d	file:
SQLITE_STMTJRNL_SPILL	sqlite/sqlite3.c	/^# define SQLITE_STMTJRNL_SPILL /;"	d	file:
SQLITE_STMTSTATUS_AUTOINDEX	include/sqlite/sqlite3.h	/^#define SQLITE_STMTSTATUS_AUTOINDEX /;"	d
SQLITE_STMTSTATUS_AUTOINDEX	sqlite/sqlite3.c	/^#define SQLITE_STMTSTATUS_AUTOINDEX /;"	d	file:
SQLITE_STMTSTATUS_FULLSCAN_STEP	include/sqlite/sqlite3.h	/^#define SQLITE_STMTSTATUS_FULLSCAN_STEP /;"	d
SQLITE_STMTSTATUS_FULLSCAN_STEP	sqlite/sqlite3.c	/^#define SQLITE_STMTSTATUS_FULLSCAN_STEP /;"	d	file:
SQLITE_STMTSTATUS_MEMUSED	include/sqlite/sqlite3.h	/^#define SQLITE_STMTSTATUS_MEMUSED /;"	d
SQLITE_STMTSTATUS_MEMUSED	sqlite/sqlite3.c	/^#define SQLITE_STMTSTATUS_MEMUSED /;"	d	file:
SQLITE_STMTSTATUS_REPREPARE	include/sqlite/sqlite3.h	/^#define SQLITE_STMTSTATUS_REPREPARE /;"	d
SQLITE_STMTSTATUS_REPREPARE	sqlite/sqlite3.c	/^#define SQLITE_STMTSTATUS_REPREPARE /;"	d	file:
SQLITE_STMTSTATUS_RUN	include/sqlite/sqlite3.h	/^#define SQLITE_STMTSTATUS_RUN /;"	d
SQLITE_STMTSTATUS_RUN	sqlite/sqlite3.c	/^#define SQLITE_STMTSTATUS_RUN /;"	d	file:
SQLITE_STMTSTATUS_SORT	include/sqlite/sqlite3.h	/^#define SQLITE_STMTSTATUS_SORT /;"	d
SQLITE_STMTSTATUS_SORT	sqlite/sqlite3.c	/^#define SQLITE_STMTSTATUS_SORT /;"	d	file:
SQLITE_STMTSTATUS_VM_STEP	include/sqlite/sqlite3.h	/^#define SQLITE_STMTSTATUS_VM_STEP /;"	d
SQLITE_STMTSTATUS_VM_STEP	sqlite/sqlite3.c	/^#define SQLITE_STMTSTATUS_VM_STEP /;"	d	file:
SQLITE_STOREP2	sqlite/sqlite3.c	/^#define SQLITE_STOREP2 /;"	d	file:
SQLITE_SYNC_DATAONLY	include/sqlite/sqlite3.h	/^#define SQLITE_SYNC_DATAONLY /;"	d
SQLITE_SYNC_DATAONLY	sqlite/sqlite3.c	/^#define SQLITE_SYNC_DATAONLY /;"	d	file:
SQLITE_SYNC_FULL	include/sqlite/sqlite3.h	/^#define SQLITE_SYNC_FULL /;"	d
SQLITE_SYNC_FULL	sqlite/sqlite3.c	/^#define SQLITE_SYNC_FULL /;"	d	file:
SQLITE_SYNC_NORMAL	include/sqlite/sqlite3.h	/^#define SQLITE_SYNC_NORMAL /;"	d
SQLITE_SYNC_NORMAL	sqlite/sqlite3.c	/^#define SQLITE_SYNC_NORMAL /;"	d	file:
SQLITE_SYSAPI	include/sqlite/sqlite3.h	/^# define SQLITE_SYSAPI$/;"	d
SQLITE_SYSAPI	sqlite/sqlite3.c	/^# define SQLITE_SYSAPI$/;"	d	file:
SQLITE_SYSTEM_MALLOC	sqlite/sqlite3.c	/^# define SQLITE_SYSTEM_MALLOC /;"	d	file:
SQLITE_ShortColNames	sqlite/sqlite3.c	/^#define SQLITE_ShortColNames /;"	d	file:
SQLITE_SqlTrace	sqlite/sqlite3.c	/^#define SQLITE_SqlTrace /;"	d	file:
SQLITE_Stat34	sqlite/sqlite3.c	/^#define SQLITE_Stat34 /;"	d	file:
SQLITE_SubqCoroutine	sqlite/sqlite3.c	/^#define SQLITE_SubqCoroutine /;"	d	file:
SQLITE_TCLAPI	sqlite/sqlite3.c	/^#  define SQLITE_TCLAPI$/;"	d	file:
SQLITE_TEMP_FILE_PREFIX	sqlite/sqlite3.c	/^# define SQLITE_TEMP_FILE_PREFIX /;"	d	file:
SQLITE_TEMP_STORE	sqlite/sqlite3.c	/^# define SQLITE_TEMP_STORE /;"	d	file:
SQLITE_TESTCTRL_ALWAYS	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_ALWAYS /;"	d
SQLITE_TESTCTRL_ALWAYS	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_ALWAYS /;"	d	file:
SQLITE_TESTCTRL_ASSERT	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_ASSERT /;"	d
SQLITE_TESTCTRL_ASSERT	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_ASSERT /;"	d	file:
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS /;"	d
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS /;"	d	file:
SQLITE_TESTCTRL_BITVEC_TEST	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_BITVEC_TEST /;"	d
SQLITE_TESTCTRL_BITVEC_TEST	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_BITVEC_TEST /;"	d	file:
SQLITE_TESTCTRL_BYTEORDER	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_BYTEORDER /;"	d
SQLITE_TESTCTRL_BYTEORDER	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_BYTEORDER /;"	d	file:
SQLITE_TESTCTRL_EXPLAIN_STMT	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_EXPLAIN_STMT /;"	d
SQLITE_TESTCTRL_EXPLAIN_STMT	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_EXPLAIN_STMT /;"	d	file:
SQLITE_TESTCTRL_FAULT_INSTALL	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_FAULT_INSTALL /;"	d
SQLITE_TESTCTRL_FAULT_INSTALL	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_FAULT_INSTALL /;"	d	file:
SQLITE_TESTCTRL_FIRST	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_FIRST /;"	d
SQLITE_TESTCTRL_FIRST	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_FIRST /;"	d	file:
SQLITE_TESTCTRL_IMPOSTER	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_IMPOSTER /;"	d
SQLITE_TESTCTRL_IMPOSTER	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_IMPOSTER /;"	d	file:
SQLITE_TESTCTRL_ISINIT	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_ISINIT /;"	d
SQLITE_TESTCTRL_ISINIT	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_ISINIT /;"	d	file:
SQLITE_TESTCTRL_ISKEYWORD	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_ISKEYWORD /;"	d
SQLITE_TESTCTRL_ISKEYWORD	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_ISKEYWORD /;"	d	file:
SQLITE_TESTCTRL_LAST	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_LAST /;"	d
SQLITE_TESTCTRL_LAST	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_LAST /;"	d	file:
SQLITE_TESTCTRL_LOCALTIME_FAULT	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_LOCALTIME_FAULT /;"	d
SQLITE_TESTCTRL_LOCALTIME_FAULT	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_LOCALTIME_FAULT /;"	d	file:
SQLITE_TESTCTRL_NEVER_CORRUPT	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_NEVER_CORRUPT /;"	d
SQLITE_TESTCTRL_NEVER_CORRUPT	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_NEVER_CORRUPT /;"	d	file:
SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD /;"	d
SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD /;"	d	file:
SQLITE_TESTCTRL_OPTIMIZATIONS	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_OPTIMIZATIONS /;"	d
SQLITE_TESTCTRL_OPTIMIZATIONS	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_OPTIMIZATIONS /;"	d	file:
SQLITE_TESTCTRL_PENDING_BYTE	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_PENDING_BYTE /;"	d
SQLITE_TESTCTRL_PENDING_BYTE	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_PENDING_BYTE /;"	d	file:
SQLITE_TESTCTRL_PRNG_RESET	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_PRNG_RESET /;"	d
SQLITE_TESTCTRL_PRNG_RESET	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_PRNG_RESET /;"	d	file:
SQLITE_TESTCTRL_PRNG_RESTORE	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_PRNG_RESTORE /;"	d
SQLITE_TESTCTRL_PRNG_RESTORE	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_PRNG_RESTORE /;"	d	file:
SQLITE_TESTCTRL_PRNG_SAVE	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_PRNG_SAVE /;"	d
SQLITE_TESTCTRL_PRNG_SAVE	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_PRNG_SAVE /;"	d	file:
SQLITE_TESTCTRL_RESERVE	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_RESERVE /;"	d
SQLITE_TESTCTRL_RESERVE	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_RESERVE /;"	d	file:
SQLITE_TESTCTRL_SCRATCHMALLOC	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_SCRATCHMALLOC /;"	d
SQLITE_TESTCTRL_SCRATCHMALLOC	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_SCRATCHMALLOC /;"	d	file:
SQLITE_TESTCTRL_SORTER_MMAP	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_SORTER_MMAP /;"	d
SQLITE_TESTCTRL_SORTER_MMAP	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_SORTER_MMAP /;"	d	file:
SQLITE_TESTCTRL_VDBE_COVERAGE	include/sqlite/sqlite3.h	/^#define SQLITE_TESTCTRL_VDBE_COVERAGE /;"	d
SQLITE_TESTCTRL_VDBE_COVERAGE	sqlite/sqlite3.c	/^#define SQLITE_TESTCTRL_VDBE_COVERAGE /;"	d	file:
SQLITE_TEXT	include/sqlite/sqlite3.h	/^# define SQLITE_TEXT /;"	d
SQLITE_TEXT	sqlite/sqlite3.c	/^# define SQLITE_TEXT /;"	d	file:
SQLITE_THREADSAFE	sqlite/sqlite3.c	/^#   define SQLITE_THREADSAFE /;"	d	file:
SQLITE_TOOBIG	include/sqlite/sqlite3.h	/^#define SQLITE_TOOBIG /;"	d
SQLITE_TOOBIG	sqlite/sqlite3.c	/^#define SQLITE_TOOBIG /;"	d	file:
SQLITE_TRACE_CLOSE	include/sqlite/sqlite3.h	/^#define SQLITE_TRACE_CLOSE /;"	d
SQLITE_TRACE_CLOSE	sqlite/sqlite3.c	/^#define SQLITE_TRACE_CLOSE /;"	d	file:
SQLITE_TRACE_LEGACY	sqlite/sqlite3.c	/^#define SQLITE_TRACE_LEGACY /;"	d	file:
SQLITE_TRACE_PROFILE	include/sqlite/sqlite3.h	/^#define SQLITE_TRACE_PROFILE /;"	d
SQLITE_TRACE_PROFILE	sqlite/sqlite3.c	/^#define SQLITE_TRACE_PROFILE /;"	d	file:
SQLITE_TRACE_ROW	include/sqlite/sqlite3.h	/^#define SQLITE_TRACE_ROW /;"	d
SQLITE_TRACE_ROW	sqlite/sqlite3.c	/^#define SQLITE_TRACE_ROW /;"	d	file:
SQLITE_TRACE_STMT	include/sqlite/sqlite3.h	/^#define SQLITE_TRACE_STMT /;"	d
SQLITE_TRACE_STMT	sqlite/sqlite3.c	/^#define SQLITE_TRACE_STMT /;"	d	file:
SQLITE_TRANSACTION	include/sqlite/sqlite3.h	/^#define SQLITE_TRANSACTION /;"	d
SQLITE_TRANSACTION	sqlite/sqlite3.c	/^#define SQLITE_TRANSACTION /;"	d	file:
SQLITE_TRANSIENT	include/sqlite/sqlite3.h	/^#define SQLITE_TRANSIENT /;"	d
SQLITE_TRANSIENT	sqlite/sqlite3.c	/^#define SQLITE_TRANSIENT /;"	d	file:
SQLITE_Transitive	sqlite/sqlite3.c	/^#define SQLITE_Transitive /;"	d	file:
SQLITE_UPDATE	include/sqlite/sqlite3.h	/^#define SQLITE_UPDATE /;"	d
SQLITE_UPDATE	sqlite/sqlite3.c	/^#define SQLITE_UPDATE /;"	d	file:
SQLITE_USE_MALLOC_H	sqlite/sqlite3.c	/^#  define SQLITE_USE_MALLOC_H /;"	d	file:
SQLITE_USE_MALLOC_H	sqlite/sqlite3.c	/^#  define SQLITE_USE_MALLOC_H$/;"	d	file:
SQLITE_USE_MALLOC_USABLE_SIZE	sqlite/sqlite3.c	/^#  define SQLITE_USE_MALLOC_USABLE_SIZE /;"	d	file:
SQLITE_USE_MSIZE	sqlite/sqlite3.c	/^#  define SQLITE_USE_MSIZE$/;"	d	file:
SQLITE_USE_URI	sqlite/sqlite3.c	/^#  define SQLITE_USE_URI /;"	d	file:
SQLITE_UTF16	include/sqlite/sqlite3.h	/^#define SQLITE_UTF16 /;"	d
SQLITE_UTF16	sqlite/sqlite3.c	/^#define SQLITE_UTF16 /;"	d	file:
SQLITE_UTF16BE	include/sqlite/sqlite3.h	/^#define SQLITE_UTF16BE /;"	d
SQLITE_UTF16BE	sqlite/sqlite3.c	/^#define SQLITE_UTF16BE /;"	d	file:
SQLITE_UTF16LE	include/sqlite/sqlite3.h	/^#define SQLITE_UTF16LE /;"	d
SQLITE_UTF16LE	sqlite/sqlite3.c	/^#define SQLITE_UTF16LE /;"	d	file:
SQLITE_UTF16NATIVE	sqlite/sqlite3.c	/^# define SQLITE_UTF16NATIVE /;"	d	file:
SQLITE_UTF16_ALIGNED	include/sqlite/sqlite3.h	/^#define SQLITE_UTF16_ALIGNED /;"	d
SQLITE_UTF16_ALIGNED	sqlite/sqlite3.c	/^#define SQLITE_UTF16_ALIGNED /;"	d	file:
SQLITE_UTF8	include/sqlite/sqlite3.h	/^#define SQLITE_UTF8 /;"	d
SQLITE_UTF8	sqlite/sqlite3.c	/^#define SQLITE_UTF8 /;"	d	file:
SQLITE_VDBEINT_H	sqlite/sqlite3.c	/^#define SQLITE_VDBEINT_H$/;"	d	file:
SQLITE_VDBE_H	sqlite/sqlite3.c	/^#define SQLITE_VDBE_H$/;"	d	file:
SQLITE_VERSION	include/sqlite/sqlite3.h	/^#define SQLITE_VERSION /;"	d
SQLITE_VERSION	sqlite/sqlite3.c	/^#define SQLITE_VERSION /;"	d	file:
SQLITE_VERSION_NUMBER	include/sqlite/sqlite3.h	/^#define SQLITE_VERSION_NUMBER /;"	d
SQLITE_VERSION_NUMBER	sqlite/sqlite3.c	/^#define SQLITE_VERSION_NUMBER /;"	d	file:
SQLITE_VTAB_CONSTRAINT_SUPPORT	include/sqlite/sqlite3.h	/^#define SQLITE_VTAB_CONSTRAINT_SUPPORT /;"	d
SQLITE_VTAB_CONSTRAINT_SUPPORT	sqlite/sqlite3.c	/^#define SQLITE_VTAB_CONSTRAINT_SUPPORT /;"	d	file:
SQLITE_Vacuum	sqlite/sqlite3.c	/^#define SQLITE_Vacuum /;"	d	file:
SQLITE_VdbeAddopTrace	sqlite/sqlite3.c	/^#define SQLITE_VdbeAddopTrace /;"	d	file:
SQLITE_VdbeEQP	sqlite/sqlite3.c	/^#define SQLITE_VdbeEQP /;"	d	file:
SQLITE_VdbeListing	sqlite/sqlite3.c	/^#define SQLITE_VdbeListing /;"	d	file:
SQLITE_VdbeTrace	sqlite/sqlite3.c	/^#define SQLITE_VdbeTrace /;"	d	file:
SQLITE_WARNING	include/sqlite/sqlite3.h	/^#define SQLITE_WARNING /;"	d
SQLITE_WARNING	sqlite/sqlite3.c	/^#define SQLITE_WARNING /;"	d	file:
SQLITE_WARNING_AUTOINDEX	include/sqlite/sqlite3.h	/^#define SQLITE_WARNING_AUTOINDEX /;"	d
SQLITE_WARNING_AUTOINDEX	sqlite/sqlite3.c	/^#define SQLITE_WARNING_AUTOINDEX /;"	d	file:
SQLITE_WITHIN	sqlite/sqlite3.c	/^#define SQLITE_WITHIN(/;"	d	file:
SQLITE_WSD	sqlite/sqlite3.c	/^  #define SQLITE_WSD /;"	d	file:
SQLITE_WSD	sqlite/sqlite3.c	/^  #define SQLITE_WSD$/;"	d	file:
SQLITE_WriteSchema	sqlite/sqlite3.c	/^#define SQLITE_WriteSchema /;"	d	file:
SQLiteThread	sqlite/sqlite3.c	/^typedef struct SQLiteThread SQLiteThread;$/;"	t	typeref:struct:SQLiteThread	file:
SRT_Coroutine	sqlite/sqlite3.c	/^#define SRT_Coroutine /;"	d	file:
SRT_Discard	sqlite/sqlite3.c	/^#define SRT_Discard /;"	d	file:
SRT_DistFifo	sqlite/sqlite3.c	/^#define SRT_DistFifo /;"	d	file:
SRT_DistQueue	sqlite/sqlite3.c	/^#define SRT_DistQueue /;"	d	file:
SRT_EphemTab	sqlite/sqlite3.c	/^#define SRT_EphemTab /;"	d	file:
SRT_Except	sqlite/sqlite3.c	/^#define SRT_Except /;"	d	file:
SRT_Exists	sqlite/sqlite3.c	/^#define SRT_Exists /;"	d	file:
SRT_Fifo	sqlite/sqlite3.c	/^#define SRT_Fifo /;"	d	file:
SRT_Mem	sqlite/sqlite3.c	/^#define SRT_Mem /;"	d	file:
SRT_Output	sqlite/sqlite3.c	/^#define SRT_Output /;"	d	file:
SRT_Queue	sqlite/sqlite3.c	/^#define SRT_Queue /;"	d	file:
SRT_Set	sqlite/sqlite3.c	/^#define SRT_Set /;"	d	file:
SRT_Table	sqlite/sqlite3.c	/^#define SRT_Table /;"	d	file:
SRT_Union	sqlite/sqlite3.c	/^#define SRT_Union /;"	d	file:
STRACCUM_NOMEM	sqlite/sqlite3.c	/^#define STRACCUM_NOMEM /;"	d	file:
STRACCUM_TOOBIG	sqlite/sqlite3.c	/^#define STRACCUM_TOOBIG /;"	d	file:
STR_FUNCTION	sqlite/sqlite3.c	/^#define STR_FUNCTION(/;"	d	file:
SWAP	sqlite/sqlite3.c	/^#define SWAP(/;"	d	file:
SavedModeInfo	sqlite/shell.c	/^struct SavedModeInfo {$/;"	s	file:
SavedModeInfo	sqlite/shell.c	/^typedef struct SavedModeInfo SavedModeInfo;$/;"	t	typeref:struct:SavedModeInfo	file:
Savepoint	sqlite/sqlite3.c	/^struct Savepoint {$/;"	s	file:
Savepoint	sqlite/sqlite3.c	/^typedef struct Savepoint Savepoint;$/;"	t	typeref:struct:Savepoint	file:
ScanKey	include/vtable/virtual_table.h	/^  inline void ScanKey(const Tuple &key) {$/;"	f	class:cmudb::Cursor	typeref:typename:void
ScanKey	index/b_plus_tree_index.cpp	/^void BPLUSTREE_INDEX_TYPE::ScanKey(const Tuple &key, std::vector<RID> &result,$/;"	f	class:cmudb::BPLUSTREE_INDEX_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
ScanStatus	sqlite/sqlite3.c	/^struct ScanStatus {$/;"	s	file:
ScanStatus	sqlite/sqlite3.c	/^typedef struct ScanStatus ScanStatus;$/;"	t	typeref:struct:ScanStatus	file:
SchedulerException	include/common/exception.h	/^  SchedulerException(std::string msg)$/;"	f	class:cmudb::SchedulerException
SchedulerException	include/common/exception.h	/^class SchedulerException : public Exception {$/;"	c	namespace:cmudb
Schema	catalog/schema.cpp	/^Schema::Schema(const std::vector<Column> &columns) : tuple_is_inlined(true) {$/;"	f	class:cmudb::Schema
Schema	include/catalog/schema.h	/^class Schema {$/;"	c	namespace:cmudb
Schema	sqlite/sqlite3.c	/^struct Schema {$/;"	s	file:
Schema	sqlite/sqlite3.c	/^typedef struct Schema Schema;$/;"	t	typeref:struct:Schema	file:
Select	sqlite/sqlite3.c	/^struct Select {$/;"	s	file:
Select	sqlite/sqlite3.c	/^typedef struct Select Select;$/;"	t	typeref:struct:Select	file:
SelectDest	sqlite/sqlite3.c	/^struct SelectDest {$/;"	s	file:
SelectDest	sqlite/sqlite3.c	/^typedef struct SelectDest SelectDest;$/;"	t	typeref:struct:SelectDest	file:
SerializationException	include/common/exception.h	/^  SerializationException(std::string msg)$/;"	f	class:cmudb::SerializationException
SerializationException	include/common/exception.h	/^class SerializationException : public Exception {$/;"	c	namespace:cmudb
SerializeTo	include/type/value.h	/^  inline void SerializeTo(char *storage) const {$/;"	f	class:cmudb::Value	typeref:typename:void
SerializeTo	table/tuple.cpp	/^void Tuple::SerializeTo(char *storage) const {$/;"	f	class:cmudb::Tuple	typeref:typename:void
SerializeTo	type/bigint_type.cpp	/^void BigintType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:cmudb::BigintType	typeref:typename:void
SerializeTo	type/boolean_type.cpp	/^void BooleanType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:cmudb::BooleanType	typeref:typename:void
SerializeTo	type/decimal_type.cpp	/^void DecimalType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:cmudb::DecimalType	typeref:typename:void
SerializeTo	type/integer_type.cpp	/^void IntegerType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:cmudb::IntegerType	typeref:typename:void
SerializeTo	type/smallint_type.cpp	/^void SmallintType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:cmudb::SmallintType	typeref:typename:void
SerializeTo	type/tinyint_type.cpp	/^void TinyintType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:cmudb::TinyintType	typeref:typename:void
SerializeTo	type/type.cpp	/^void Type::SerializeTo(const Value &val __attribute__((unused)),$/;"	f	class:cmudb::Type	typeref:typename:void
SerializeTo	type/varlen_type.cpp	/^void VarlenType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:cmudb::VarlenType	typeref:typename:void
Set	include/common/rid.h	/^  inline void Set(page_id_t page_id, int slot_num) {$/;"	f	class:cmudb::RID	typeref:typename:void
SetFlushLogFuture	include/disk/disk_manager.h	/^  inline void SetFlushLogFuture(std::future<void> *f) { flush_log_f_ = f; }$/;"	f	class:cmudb::DiskManager	typeref:typename:void
SetFreeSpacePointer	page/table_page.cpp	/^void TablePage::SetFreeSpacePointer(int32_t free_space_pointer) {$/;"	f	class:cmudb::TablePage	typeref:typename:void
SetFromInteger	include/index/generic_key.h	/^  inline void SetFromInteger(int64_t key) {$/;"	f	class:cmudb::GenericKey	typeref:typename:void
SetFromKey	include/index/generic_key.h	/^  inline void SetFromKey(const Tuple &tuple) {$/;"	f	class:cmudb::GenericKey	typeref:typename:void
SetInlined	catalog/column.cpp	/^void Column::SetInlined() {$/;"	f	class:cmudb::Column	typeref:typename:void
SetKeyAt	page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::SetKeyAt(int index, const KeyType &key) {}$/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
SetLSN	include/page/page.h	/^  inline void SetLSN(lsn_t lsn) { memcpy(GetData() + 4, &lsn, 4); }$/;"	f	class:cmudb::Page	typeref:typename:void
SetLSN	page/b_plus_tree_page.cpp	/^void BPlusTreePage::SetLSN(lsn_t lsn) { lsn_ = lsn; }$/;"	f	class:cmudb::BPlusTreePage	typeref:typename:void
SetLength	catalog/column.cpp	/^void Column::SetLength(int32_t column_length) {$/;"	f	class:cmudb::Column	typeref:typename:void
SetMaxSize	page/b_plus_tree_page.cpp	/^void BPlusTreePage::SetMaxSize(int size) {}$/;"	f	class:cmudb::BPlusTreePage	typeref:typename:void
SetNextPageId	page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::SetNextPageId(page_id_t next_page_id) {}$/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
SetNextPageId	page/table_page.cpp	/^void TablePage::SetNextPageId(page_id_t next_page_id) {$/;"	f	class:cmudb::TablePage	typeref:typename:void
SetPageId	page/b_plus_tree_page.cpp	/^void BPlusTreePage::SetPageId(page_id_t page_id) {}$/;"	f	class:cmudb::BPlusTreePage	typeref:typename:void
SetPageType	page/b_plus_tree_page.cpp	/^void BPlusTreePage::SetPageType(IndexPageType page_type) {}$/;"	f	class:cmudb::BPlusTreePage	typeref:typename:void
SetParentPageId	page/b_plus_tree_page.cpp	/^void BPlusTreePage::SetParentPageId(page_id_t parent_page_id) {}$/;"	f	class:cmudb::BPlusTreePage	typeref:typename:void
SetPersistentLSN	include/logging/log_manager.h	/^  inline void SetPersistentLSN(lsn_t lsn) { persistent_lsn_ = lsn; }$/;"	f	class:cmudb::LogManager	typeref:typename:void
SetPrevLSN	include/concurrency/transaction.h	/^  inline void SetPrevLSN(lsn_t prev_lsn) { prev_lsn_ = prev_lsn; }$/;"	f	class:cmudb::Transaction	typeref:typename:void
SetPrevPageId	page/table_page.cpp	/^void TablePage::SetPrevPageId(page_id_t prev_page_id) {$/;"	f	class:cmudb::TablePage	typeref:typename:void
SetRecordCount	page/header_page.cpp	/^void HeaderPage::SetRecordCount(int record_count) {$/;"	f	class:cmudb::HeaderPage	typeref:typename:void
SetScanFlag	include/vtable/virtual_table.h	/^  inline void SetScanFlag(bool is_index_scan) {$/;"	f	class:cmudb::Cursor	typeref:typename:void
SetSize	page/b_plus_tree_page.cpp	/^void BPlusTreePage::SetSize(int size) {}$/;"	f	class:cmudb::BPlusTreePage	typeref:typename:void
SetState	include/concurrency/transaction.h	/^  inline void SetState(TransactionState state) { state_ = state; }$/;"	f	class:cmudb::Transaction	typeref:typename:void
SetTupleCount	page/table_page.cpp	/^void TablePage::SetTupleCount(int32_t tuple_count) {$/;"	f	class:cmudb::TablePage	typeref:typename:void
SetTupleOffset	page/table_page.cpp	/^void TablePage::SetTupleOffset(int slot_num, int32_t offset) {$/;"	f	class:cmudb::TablePage	typeref:typename:void
SetTupleSize	page/table_page.cpp	/^void TablePage::SetTupleSize(int slot_num, int32_t offset) {$/;"	f	class:cmudb::TablePage	typeref:typename:void
ShellClearFlag	sqlite/shell.c	/^#define ShellClearFlag(/;"	d	file:
ShellHasFlag	sqlite/shell.c	/^#define ShellHasFlag(/;"	d	file:
ShellSetFlag	sqlite/shell.c	/^#define ShellSetFlag(/;"	d	file:
ShellState	sqlite/shell.c	/^struct ShellState {$/;"	s	file:
ShellState	sqlite/shell.c	/^typedef struct ShellState ShellState;$/;"	t	typeref:struct:ShellState	file:
ShellText	sqlite/shell.c	/^struct ShellText {$/;"	s	file:
ShellText	sqlite/shell.c	/^typedef struct ShellText ShellText;$/;"	t	typeref:struct:ShellText	file:
Size	buffer/lru_replacer.cpp	/^template <typename T> size_t LRUReplacer<T>::Size() {$/;"	f	class:cmudb::LRUReplacer	typeref:typename:size_t
SmallintType	include/type/smallint_type.h	/^class SmallintType : public IntegerParentType {$/;"	c	namespace:cmudb
SmallintType	type/smallint_type.cpp	/^SmallintType::SmallintType() : IntegerParentType(TypeId::SMALLINT) {}$/;"	f	class:cmudb::SmallintType
Split	include/common/string_utility.h	/^  static std::vector<std::string> Split(const std::string &s, char delim) {$/;"	f	class:cmudb::StringUtility	typeref:typename:std::vector<std::string>
Split	index/b_plus_tree.cpp	/^template <typename N> N *BPLUSTREE_TYPE::Split(N *node) { return nullptr; }$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS N *
Sqlite3Config	sqlite/sqlite3.c	/^struct Sqlite3Config {$/;"	s	file:
Sqrt	include/type/value.h	/^  inline Value Sqrt() const { return Type::GetInstance(type_id_)->Sqrt(*this); }$/;"	f	class:cmudb::Value	typeref:typename:Value
Sqrt	type/bigint_type.cpp	/^Value BigintType::Sqrt(const Value &val) const {$/;"	f	class:cmudb::BigintType	typeref:typename:Value
Sqrt	type/decimal_type.cpp	/^Value DecimalType::Sqrt(const Value &val) const {$/;"	f	class:cmudb::DecimalType	typeref:typename:Value
Sqrt	type/integer_type.cpp	/^Value IntegerType::Sqrt(const Value &val) const {$/;"	f	class:cmudb::IntegerType	typeref:typename:Value
Sqrt	type/smallint_type.cpp	/^Value SmallintType::Sqrt(const Value &val) const {$/;"	f	class:cmudb::SmallintType	typeref:typename:Value
Sqrt	type/tinyint_type.cpp	/^Value TinyintType::Sqrt(const Value &val) const {$/;"	f	class:cmudb::TinyintType	typeref:typename:Value
Sqrt	type/type.cpp	/^Value Type::Sqrt(const Value &val __attribute__((unused))) const {$/;"	f	class:cmudb::Type	typeref:typename:Value
SrcList	sqlite/sqlite3.c	/^struct SrcList {$/;"	s	file:
SrcList	sqlite/sqlite3.c	/^typedef struct SrcList SrcList;$/;"	t	typeref:struct:SrcList	file:
SrcList_item	sqlite/sqlite3.c	/^  struct SrcList_item {$/;"	s	struct:SrcList	file:
StartNewTree	index/b_plus_tree.cpp	/^void BPLUSTREE_TYPE::StartNewTree(const KeyType &key, const ValueType &value) {}$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
StatException	include/common/exception.h	/^  StatException(std::string msg) : Exception(EXCEPTION_TYPE_STAT, msg) {}$/;"	f	class:cmudb::StatException
StatException	include/common/exception.h	/^class StatException : public Exception {$/;"	c	namespace:cmudb
StopFlushThread	logging/log_manager.cpp	/^void LogManager::StopFlushThread() {}$/;"	f	class:cmudb::LogManager	typeref:typename:void
StorageEngine	include/vtable/virtual_table.h	/^  StorageEngine(std::string db_file_name) {$/;"	f	class:cmudb::StorageEngine
StorageEngine	include/vtable/virtual_table.h	/^class StorageEngine {$/;"	c	namespace:cmudb
StrAccum	sqlite/sqlite3.c	/^struct StrAccum {$/;"	s	file:
StrAccum	sqlite/sqlite3.c	/^typedef struct StrAccum StrAccum;$/;"	t	typeref:struct:StrAccum	file:
StringUtility	include/common/string_utility.h	/^class StringUtility {$/;"	c	namespace:cmudb
SubProgram	sqlite/sqlite3.c	/^struct SubProgram {$/;"	s	file:
SubProgram	sqlite/sqlite3.c	/^typedef struct SubProgram SubProgram;$/;"	t	typeref:struct:SubProgram	file:
Subtract	include/type/value.h	/^  inline Value Subtract(const Value &o) const {$/;"	f	class:cmudb::Value	typeref:typename:Value
Subtract	type/bigint_type.cpp	/^Value BigintType::Subtract(const Value &left, const Value &right) const {$/;"	f	class:cmudb::BigintType	typeref:typename:Value
Subtract	type/decimal_type.cpp	/^Value DecimalType::Subtract(const Value &left, const Value &right) const {$/;"	f	class:cmudb::DecimalType	typeref:typename:Value
Subtract	type/integer_type.cpp	/^Value IntegerType::Subtract(const Value &left, const Value &right) const {$/;"	f	class:cmudb::IntegerType	typeref:typename:Value
Subtract	type/smallint_type.cpp	/^Value SmallintType::Subtract(const Value &left, const Value &right) const {$/;"	f	class:cmudb::SmallintType	typeref:typename:Value
Subtract	type/tinyint_type.cpp	/^Value TinyintType::Subtract(const Value &left, const Value &right) const {$/;"	f	class:cmudb::TinyintType	typeref:typename:Value
Subtract	type/type.cpp	/^Value Type::Subtract(const Value &left __attribute__((unused)),$/;"	f	class:cmudb::Type	typeref:typename:Value
SubtractValue	include/type/integer_parent_type.h	/^Value IntegerParentType::SubtractValue(const Value &left,$/;"	f	class:cmudb::IntegerParentType	typeref:typename:Value
SyntaxException	include/common/exception.h	/^  SyntaxException(std::string msg) : Exception(EXCEPTION_TYPE_SYNTAX, msg) {}$/;"	f	class:cmudb::SyntaxException
SyntaxException	include/common/exception.h	/^class SyntaxException : public Exception {$/;"	c	namespace:cmudb
TEMP_MASTER_NAME	sqlite/sqlite3.c	/^#define TEMP_MASTER_NAME /;"	d	file:
TESTONLY	sqlite/sqlite3.c	/^# define TESTONLY(/;"	d	file:
TF_Autoincrement	sqlite/sqlite3.c	/^#define TF_Autoincrement /;"	d	file:
TF_Ephemeral	sqlite/sqlite3.c	/^#define TF_Ephemeral /;"	d	file:
TF_HasNotNull	sqlite/sqlite3.c	/^#define TF_HasNotNull /;"	d	file:
TF_HasPrimaryKey	sqlite/sqlite3.c	/^#define TF_HasPrimaryKey /;"	d	file:
TF_HasStat1	sqlite/sqlite3.c	/^#define TF_HasStat1 /;"	d	file:
TF_NoVisibleRowid	sqlite/sqlite3.c	/^#define TF_NoVisibleRowid /;"	d	file:
TF_OOOHidden	sqlite/sqlite3.c	/^#define TF_OOOHidden /;"	d	file:
TF_Readonly	sqlite/sqlite3.c	/^#define TF_Readonly /;"	d	file:
TF_StatsUsed	sqlite/sqlite3.c	/^#define TF_StatsUsed /;"	d	file:
TF_WithoutRowid	sqlite/sqlite3.c	/^#define TF_WithoutRowid /;"	d	file:
TIMESTAMP	include/type/type_id.h	/^  TIMESTAMP,$/;"	e	enum:cmudb::TypeId
TINYINT	include/type/type_id.h	/^  TINYINT,$/;"	e	enum:cmudb::TypeId
TINYINT_COMPARE_FUNC	type/tinyint_type.cpp	/^#define TINYINT_COMPARE_FUNC(/;"	d	file:
TINYINT_MODIFY_FUNC	type/tinyint_type.cpp	/^#define TINYINT_MODIFY_FUNC(/;"	d	file:
TKFLG_DONTFOLD	sqlite/sqlite3.c	/^#define TKFLG_DONTFOLD /;"	d	file:
TKFLG_MASK	sqlite/sqlite3.c	/^#define TKFLG_MASK /;"	d	file:
TK_ABORT	sqlite/sqlite3.c	/^#define TK_ABORT /;"	d	file:
TK_ACTION	sqlite/sqlite3.c	/^#define TK_ACTION /;"	d	file:
TK_ADD	sqlite/sqlite3.c	/^#define TK_ADD /;"	d	file:
TK_AFTER	sqlite/sqlite3.c	/^#define TK_AFTER /;"	d	file:
TK_AGG_COLUMN	sqlite/sqlite3.c	/^#define TK_AGG_COLUMN /;"	d	file:
TK_AGG_FUNCTION	sqlite/sqlite3.c	/^#define TK_AGG_FUNCTION /;"	d	file:
TK_ALL	sqlite/sqlite3.c	/^#define TK_ALL /;"	d	file:
TK_ALTER	sqlite/sqlite3.c	/^#define TK_ALTER /;"	d	file:
TK_ANALYZE	sqlite/sqlite3.c	/^#define TK_ANALYZE /;"	d	file:
TK_AND	sqlite/sqlite3.c	/^#define TK_AND /;"	d	file:
TK_ANY	sqlite/sqlite3.c	/^#define TK_ANY /;"	d	file:
TK_AS	sqlite/sqlite3.c	/^#define TK_AS /;"	d	file:
TK_ASC	sqlite/sqlite3.c	/^#define TK_ASC /;"	d	file:
TK_ASTERISK	sqlite/sqlite3.c	/^#define TK_ASTERISK /;"	d	file:
TK_ATTACH	sqlite/sqlite3.c	/^#define TK_ATTACH /;"	d	file:
TK_AUTOINCR	sqlite/sqlite3.c	/^#define TK_AUTOINCR /;"	d	file:
TK_BEFORE	sqlite/sqlite3.c	/^#define TK_BEFORE /;"	d	file:
TK_BEGIN	sqlite/sqlite3.c	/^#define TK_BEGIN /;"	d	file:
TK_BETWEEN	sqlite/sqlite3.c	/^#define TK_BETWEEN /;"	d	file:
TK_BITAND	sqlite/sqlite3.c	/^#define TK_BITAND /;"	d	file:
TK_BITNOT	sqlite/sqlite3.c	/^#define TK_BITNOT /;"	d	file:
TK_BITOR	sqlite/sqlite3.c	/^#define TK_BITOR /;"	d	file:
TK_BLOB	sqlite/sqlite3.c	/^#define TK_BLOB /;"	d	file:
TK_BY	sqlite/sqlite3.c	/^#define TK_BY /;"	d	file:
TK_CASCADE	sqlite/sqlite3.c	/^#define TK_CASCADE /;"	d	file:
TK_CASE	sqlite/sqlite3.c	/^#define TK_CASE /;"	d	file:
TK_CAST	sqlite/sqlite3.c	/^#define TK_CAST /;"	d	file:
TK_CHECK	sqlite/sqlite3.c	/^#define TK_CHECK /;"	d	file:
TK_COLLATE	sqlite/sqlite3.c	/^#define TK_COLLATE /;"	d	file:
TK_COLUMN	sqlite/sqlite3.c	/^#define TK_COLUMN /;"	d	file:
TK_COLUMNKW	sqlite/sqlite3.c	/^#define TK_COLUMNKW /;"	d	file:
TK_COMMA	sqlite/sqlite3.c	/^#define TK_COMMA /;"	d	file:
TK_COMMIT	sqlite/sqlite3.c	/^#define TK_COMMIT /;"	d	file:
TK_CONCAT	sqlite/sqlite3.c	/^#define TK_CONCAT /;"	d	file:
TK_CONFLICT	sqlite/sqlite3.c	/^#define TK_CONFLICT /;"	d	file:
TK_CONSTRAINT	sqlite/sqlite3.c	/^#define TK_CONSTRAINT /;"	d	file:
TK_CREATE	sqlite/sqlite3.c	/^#define TK_CREATE /;"	d	file:
TK_CTIME_KW	sqlite/sqlite3.c	/^#define TK_CTIME_KW /;"	d	file:
TK_DATABASE	sqlite/sqlite3.c	/^#define TK_DATABASE /;"	d	file:
TK_DEFAULT	sqlite/sqlite3.c	/^#define TK_DEFAULT /;"	d	file:
TK_DEFERRABLE	sqlite/sqlite3.c	/^#define TK_DEFERRABLE /;"	d	file:
TK_DEFERRED	sqlite/sqlite3.c	/^#define TK_DEFERRED /;"	d	file:
TK_DELETE	sqlite/sqlite3.c	/^#define TK_DELETE /;"	d	file:
TK_DESC	sqlite/sqlite3.c	/^#define TK_DESC /;"	d	file:
TK_DETACH	sqlite/sqlite3.c	/^#define TK_DETACH /;"	d	file:
TK_DISTINCT	sqlite/sqlite3.c	/^#define TK_DISTINCT /;"	d	file:
TK_DOT	sqlite/sqlite3.c	/^#define TK_DOT /;"	d	file:
TK_DROP	sqlite/sqlite3.c	/^#define TK_DROP /;"	d	file:
TK_EACH	sqlite/sqlite3.c	/^#define TK_EACH /;"	d	file:
TK_ELSE	sqlite/sqlite3.c	/^#define TK_ELSE /;"	d	file:
TK_END	sqlite/sqlite3.c	/^#define TK_END /;"	d	file:
TK_END_OF_FILE	sqlite/sqlite3.c	/^#define TK_END_OF_FILE /;"	d	file:
TK_EQ	sqlite/sqlite3.c	/^#define TK_EQ /;"	d	file:
TK_ESCAPE	sqlite/sqlite3.c	/^#define TK_ESCAPE /;"	d	file:
TK_EXCEPT	sqlite/sqlite3.c	/^#define TK_EXCEPT /;"	d	file:
TK_EXCLUSIVE	sqlite/sqlite3.c	/^#define TK_EXCLUSIVE /;"	d	file:
TK_EXISTS	sqlite/sqlite3.c	/^#define TK_EXISTS /;"	d	file:
TK_EXPLAIN	sqlite/sqlite3.c	/^#define TK_EXPLAIN /;"	d	file:
TK_FAIL	sqlite/sqlite3.c	/^#define TK_FAIL /;"	d	file:
TK_FLOAT	sqlite/sqlite3.c	/^#define TK_FLOAT /;"	d	file:
TK_FOR	sqlite/sqlite3.c	/^#define TK_FOR /;"	d	file:
TK_FOREIGN	sqlite/sqlite3.c	/^#define TK_FOREIGN /;"	d	file:
TK_FROM	sqlite/sqlite3.c	/^#define TK_FROM /;"	d	file:
TK_FUNCTION	sqlite/sqlite3.c	/^#define TK_FUNCTION /;"	d	file:
TK_GE	sqlite/sqlite3.c	/^#define TK_GE /;"	d	file:
TK_GROUP	sqlite/sqlite3.c	/^#define TK_GROUP /;"	d	file:
TK_GT	sqlite/sqlite3.c	/^#define TK_GT /;"	d	file:
TK_HAVING	sqlite/sqlite3.c	/^#define TK_HAVING /;"	d	file:
TK_ID	sqlite/sqlite3.c	/^#define TK_ID /;"	d	file:
TK_IF	sqlite/sqlite3.c	/^#define TK_IF /;"	d	file:
TK_IF_NULL_ROW	sqlite/sqlite3.c	/^#define TK_IF_NULL_ROW /;"	d	file:
TK_IGNORE	sqlite/sqlite3.c	/^#define TK_IGNORE /;"	d	file:
TK_ILLEGAL	sqlite/sqlite3.c	/^#define TK_ILLEGAL /;"	d	file:
TK_IMMEDIATE	sqlite/sqlite3.c	/^#define TK_IMMEDIATE /;"	d	file:
TK_IN	sqlite/sqlite3.c	/^#define TK_IN /;"	d	file:
TK_INDEX	sqlite/sqlite3.c	/^#define TK_INDEX /;"	d	file:
TK_INDEXED	sqlite/sqlite3.c	/^#define TK_INDEXED /;"	d	file:
TK_INITIALLY	sqlite/sqlite3.c	/^#define TK_INITIALLY /;"	d	file:
TK_INSERT	sqlite/sqlite3.c	/^#define TK_INSERT /;"	d	file:
TK_INSTEAD	sqlite/sqlite3.c	/^#define TK_INSTEAD /;"	d	file:
TK_INTEGER	sqlite/sqlite3.c	/^#define TK_INTEGER /;"	d	file:
TK_INTERSECT	sqlite/sqlite3.c	/^#define TK_INTERSECT /;"	d	file:
TK_INTO	sqlite/sqlite3.c	/^#define TK_INTO /;"	d	file:
TK_IS	sqlite/sqlite3.c	/^#define TK_IS /;"	d	file:
TK_ISNOT	sqlite/sqlite3.c	/^#define TK_ISNOT /;"	d	file:
TK_ISNULL	sqlite/sqlite3.c	/^#define TK_ISNULL /;"	d	file:
TK_JOIN	sqlite/sqlite3.c	/^#define TK_JOIN /;"	d	file:
TK_JOIN_KW	sqlite/sqlite3.c	/^#define TK_JOIN_KW /;"	d	file:
TK_KEY	sqlite/sqlite3.c	/^#define TK_KEY /;"	d	file:
TK_LE	sqlite/sqlite3.c	/^#define TK_LE /;"	d	file:
TK_LIKE_KW	sqlite/sqlite3.c	/^#define TK_LIKE_KW /;"	d	file:
TK_LIMIT	sqlite/sqlite3.c	/^#define TK_LIMIT /;"	d	file:
TK_LP	sqlite/sqlite3.c	/^#define TK_LP /;"	d	file:
TK_LSHIFT	sqlite/sqlite3.c	/^#define TK_LSHIFT /;"	d	file:
TK_LT	sqlite/sqlite3.c	/^#define TK_LT /;"	d	file:
TK_MATCH	sqlite/sqlite3.c	/^#define TK_MATCH /;"	d	file:
TK_MINUS	sqlite/sqlite3.c	/^#define TK_MINUS /;"	d	file:
TK_NE	sqlite/sqlite3.c	/^#define TK_NE /;"	d	file:
TK_NO	sqlite/sqlite3.c	/^#define TK_NO /;"	d	file:
TK_NOT	sqlite/sqlite3.c	/^#define TK_NOT /;"	d	file:
TK_NOTNULL	sqlite/sqlite3.c	/^#define TK_NOTNULL /;"	d	file:
TK_NULL	sqlite/sqlite3.c	/^#define TK_NULL /;"	d	file:
TK_OF	sqlite/sqlite3.c	/^#define TK_OF /;"	d	file:
TK_OFFSET	sqlite/sqlite3.c	/^#define TK_OFFSET /;"	d	file:
TK_ON	sqlite/sqlite3.c	/^#define TK_ON /;"	d	file:
TK_OR	sqlite/sqlite3.c	/^#define TK_OR /;"	d	file:
TK_ORDER	sqlite/sqlite3.c	/^#define TK_ORDER /;"	d	file:
TK_PLAN	sqlite/sqlite3.c	/^#define TK_PLAN /;"	d	file:
TK_PLUS	sqlite/sqlite3.c	/^#define TK_PLUS /;"	d	file:
TK_PRAGMA	sqlite/sqlite3.c	/^#define TK_PRAGMA /;"	d	file:
TK_PRIMARY	sqlite/sqlite3.c	/^#define TK_PRIMARY /;"	d	file:
TK_QUERY	sqlite/sqlite3.c	/^#define TK_QUERY /;"	d	file:
TK_RAISE	sqlite/sqlite3.c	/^#define TK_RAISE /;"	d	file:
TK_RECURSIVE	sqlite/sqlite3.c	/^#define TK_RECURSIVE /;"	d	file:
TK_REFERENCES	sqlite/sqlite3.c	/^#define TK_REFERENCES /;"	d	file:
TK_REGISTER	sqlite/sqlite3.c	/^#define TK_REGISTER /;"	d	file:
TK_REINDEX	sqlite/sqlite3.c	/^#define TK_REINDEX /;"	d	file:
TK_RELEASE	sqlite/sqlite3.c	/^#define TK_RELEASE /;"	d	file:
TK_REM	sqlite/sqlite3.c	/^#define TK_REM /;"	d	file:
TK_RENAME	sqlite/sqlite3.c	/^#define TK_RENAME /;"	d	file:
TK_REPLACE	sqlite/sqlite3.c	/^#define TK_REPLACE /;"	d	file:
TK_RESTRICT	sqlite/sqlite3.c	/^#define TK_RESTRICT /;"	d	file:
TK_ROLLBACK	sqlite/sqlite3.c	/^#define TK_ROLLBACK /;"	d	file:
TK_ROW	sqlite/sqlite3.c	/^#define TK_ROW /;"	d	file:
TK_RP	sqlite/sqlite3.c	/^#define TK_RP /;"	d	file:
TK_RSHIFT	sqlite/sqlite3.c	/^#define TK_RSHIFT /;"	d	file:
TK_SAVEPOINT	sqlite/sqlite3.c	/^#define TK_SAVEPOINT /;"	d	file:
TK_SELECT	sqlite/sqlite3.c	/^#define TK_SELECT /;"	d	file:
TK_SELECT_COLUMN	sqlite/sqlite3.c	/^#define TK_SELECT_COLUMN /;"	d	file:
TK_SEMI	sqlite/sqlite3.c	/^#define TK_SEMI /;"	d	file:
TK_SET	sqlite/sqlite3.c	/^#define TK_SET /;"	d	file:
TK_SLASH	sqlite/sqlite3.c	/^#define TK_SLASH /;"	d	file:
TK_SPACE	sqlite/sqlite3.c	/^#define TK_SPACE /;"	d	file:
TK_SPAN	sqlite/sqlite3.c	/^#define TK_SPAN /;"	d	file:
TK_STAR	sqlite/sqlite3.c	/^#define TK_STAR /;"	d	file:
TK_STRING	sqlite/sqlite3.c	/^#define TK_STRING /;"	d	file:
TK_TABLE	sqlite/sqlite3.c	/^#define TK_TABLE /;"	d	file:
TK_TEMP	sqlite/sqlite3.c	/^#define TK_TEMP /;"	d	file:
TK_THEN	sqlite/sqlite3.c	/^#define TK_THEN /;"	d	file:
TK_TO	sqlite/sqlite3.c	/^#define TK_TO /;"	d	file:
TK_TO_BLOB	sqlite/sqlite3.c	/^#define TK_TO_BLOB /;"	d	file:
TK_TO_INT	sqlite/sqlite3.c	/^#define TK_TO_INT /;"	d	file:
TK_TO_NUMERIC	sqlite/sqlite3.c	/^#define TK_TO_NUMERIC /;"	d	file:
TK_TO_REAL	sqlite/sqlite3.c	/^#define TK_TO_REAL /;"	d	file:
TK_TO_TEXT	sqlite/sqlite3.c	/^#define TK_TO_TEXT /;"	d	file:
TK_TRANSACTION	sqlite/sqlite3.c	/^#define TK_TRANSACTION /;"	d	file:
TK_TRIGGER	sqlite/sqlite3.c	/^#define TK_TRIGGER /;"	d	file:
TK_UMINUS	sqlite/sqlite3.c	/^#define TK_UMINUS /;"	d	file:
TK_UNCLOSED_STRING	sqlite/sqlite3.c	/^#define TK_UNCLOSED_STRING /;"	d	file:
TK_UNION	sqlite/sqlite3.c	/^#define TK_UNION /;"	d	file:
TK_UNIQUE	sqlite/sqlite3.c	/^#define TK_UNIQUE /;"	d	file:
TK_UPDATE	sqlite/sqlite3.c	/^#define TK_UPDATE /;"	d	file:
TK_UPLUS	sqlite/sqlite3.c	/^#define TK_UPLUS /;"	d	file:
TK_USING	sqlite/sqlite3.c	/^#define TK_USING /;"	d	file:
TK_VACUUM	sqlite/sqlite3.c	/^#define TK_VACUUM /;"	d	file:
TK_VALUES	sqlite/sqlite3.c	/^#define TK_VALUES /;"	d	file:
TK_VARIABLE	sqlite/sqlite3.c	/^#define TK_VARIABLE /;"	d	file:
TK_VECTOR	sqlite/sqlite3.c	/^#define TK_VECTOR /;"	d	file:
TK_VIEW	sqlite/sqlite3.c	/^#define TK_VIEW /;"	d	file:
TK_VIRTUAL	sqlite/sqlite3.c	/^#define TK_VIRTUAL /;"	d	file:
TK_WHEN	sqlite/sqlite3.c	/^#define TK_WHEN /;"	d	file:
TK_WHERE	sqlite/sqlite3.c	/^#define TK_WHERE /;"	d	file:
TK_WITH	sqlite/sqlite3.c	/^#define TK_WITH /;"	d	file:
TK_WITHOUT	sqlite/sqlite3.c	/^#define TK_WITHOUT /;"	d	file:
TRIGGER_AFTER	sqlite/sqlite3.c	/^#define TRIGGER_AFTER /;"	d	file:
TRIGGER_BEFORE	sqlite/sqlite3.c	/^#define TRIGGER_BEFORE /;"	d	file:
TYPE_OVERFLOW	include/common/exception.h	/^  static const int TYPE_OVERFLOW = 2;$/;"	m	class:cmudb::NumericValueOutOfRangeException	typeref:typename:const int
TYPE_UNDERFLOW	include/common/exception.h	/^  static const int TYPE_UNDERFLOW = 1;$/;"	m	class:cmudb::NumericValueOutOfRangeException	typeref:typename:const int
Table	sqlite/sqlite3.c	/^struct Table {$/;"	s	file:
Table	sqlite/sqlite3.c	/^typedef struct Table Table;$/;"	t	typeref:struct:Table	file:
TableHeap	include/table/table_heap.h	/^class TableHeap {$/;"	c	namespace:cmudb
TableHeap	table/table_heap.cpp	/^TableHeap::TableHeap(BufferPoolManager *buffer_pool_manager,$/;"	f	class:cmudb::TableHeap
TableIterator	include/table/table_iterator.h	/^class TableIterator {$/;"	c	namespace:cmudb
TableIterator	table/table_iterator.cpp	/^TableIterator::TableIterator(TableHeap *table_heap, RID rid, Transaction *txn)$/;"	f	class:cmudb::TableIterator
TableLock	sqlite/sqlite3.c	/^typedef struct TableLock TableLock;$/;"	t	typeref:struct:TableLock	file:
TablePage	include/page/table_page.h	/^class TablePage : public Page {$/;"	c	namespace:cmudb
TinyintType	include/type/tinyint_type.h	/^class TinyintType : public IntegerParentType {$/;"	c	namespace:cmudb
TinyintType	type/tinyint_type.cpp	/^TinyintType::TinyintType() : IntegerParentType(TINYINT) {}$/;"	f	class:cmudb::TinyintType
ToLower	sqlite/shell.c	/^#define ToLower(/;"	d	file:
ToString	catalog/column.cpp	/^std::string Column::ToString() const {$/;"	f	class:cmudb::Column	typeref:typename:std::string
ToString	catalog/schema.cpp	/^std::string Schema::ToString() const {$/;"	f	class:cmudb::Schema	typeref:typename:std::string
ToString	include/common/rid.h	/^  inline std::string ToString() const {$/;"	f	class:cmudb::RID	typeref:typename:std::string
ToString	include/index/generic_key.h	/^  inline int64_t ToString() const {$/;"	f	class:cmudb::GenericKey	typeref:typename:int64_t
ToString	include/index/index.h	/^  const std::string ToString() const {$/;"	f	class:cmudb::Index	typeref:typename:const std::string
ToString	include/index/index.h	/^  const std::string ToString() const {$/;"	f	class:cmudb::IndexMetadata	typeref:typename:const std::string
ToString	include/logging/log_record.h	/^  inline std::string ToString() const {$/;"	f	class:cmudb::LogRecord	typeref:typename:std::string
ToString	include/type/value.h	/^  inline std::string ToString() const {$/;"	f	class:cmudb::Value	typeref:typename:std::string
ToString	index/b_plus_tree.cpp	/^std::string BPLUSTREE_TYPE::ToString(bool verbose) { return "Empty tree"; }$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS std::string
ToString	page/b_plus_tree_internal_page.cpp	/^std::string B_PLUS_TREE_INTERNAL_PAGE_TYPE::ToString(bool verbose) const {$/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS std::string
ToString	page/b_plus_tree_leaf_page.cpp	/^std::string B_PLUS_TREE_LEAF_PAGE_TYPE::ToString(bool verbose) const {$/;"	f	class:cmudb::B_PLUS_TREE_LEAF_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS std::string
ToString	table/tuple.cpp	/^std::string Tuple::ToString(Schema *schema) const {$/;"	f	class:cmudb::Tuple	typeref:typename:std::string
ToString	type/bigint_type.cpp	/^std::string BigintType::ToString(const Value &val) const {$/;"	f	class:cmudb::BigintType	typeref:typename:std::string
ToString	type/boolean_type.cpp	/^std::string BooleanType::ToString(const Value &val) const {$/;"	f	class:cmudb::BooleanType	typeref:typename:std::string
ToString	type/decimal_type.cpp	/^std::string DecimalType::ToString(const Value &val) const {$/;"	f	class:cmudb::DecimalType	typeref:typename:std::string
ToString	type/integer_type.cpp	/^std::string IntegerType::ToString(const Value &val) const {$/;"	f	class:cmudb::IntegerType	typeref:typename:std::string
ToString	type/smallint_type.cpp	/^std::string SmallintType::ToString(const Value &val) const {$/;"	f	class:cmudb::SmallintType	typeref:typename:std::string
ToString	type/tinyint_type.cpp	/^std::string TinyintType::ToString(const Value &val) const {$/;"	f	class:cmudb::TinyintType	typeref:typename:std::string
ToString	type/type.cpp	/^std::string Type::ToString(const Value &val __attribute__((unused))) const {$/;"	f	class:cmudb::Type	typeref:typename:std::string
ToString	type/varlen_type.cpp	/^std::string VarlenType::ToString(const Value &val) const {$/;"	f	class:cmudb::VarlenType	typeref:typename:std::string
ToValue	include/index/generic_key.h	/^  inline Value ToValue(Schema *schema, int column_id) const {$/;"	f	class:cmudb::GenericKey	typeref:typename:Value
Token	sqlite/sqlite3.c	/^struct Token {$/;"	s	file:
Token	sqlite/sqlite3.c	/^typedef struct Token Token;$/;"	t	typeref:struct:Token	file:
Transaction	include/concurrency/transaction.h	/^  Transaction(txn_id_t txn_id)$/;"	f	class:cmudb::Transaction
Transaction	include/concurrency/transaction.h	/^class Transaction {$/;"	c	namespace:cmudb
TransactionException	include/common/exception.h	/^  TransactionException(std::string msg)$/;"	f	class:cmudb::TransactionException
TransactionException	include/common/exception.h	/^class TransactionException : public Exception {$/;"	c	namespace:cmudb
TransactionManager	include/concurrency/transaction_manager.h	/^  TransactionManager(LockManager *lock_manager,$/;"	f	class:cmudb::TransactionManager
TransactionManager	include/concurrency/transaction_manager.h	/^class TransactionManager {$/;"	c	namespace:cmudb
TransactionState	include/concurrency/transaction.h	/^enum class TransactionState { GROWING, SHRINKING, COMMITTED, ABORTED };$/;"	g	namespace:cmudb
TreeView	sqlite/sqlite3.c	/^struct TreeView {$/;"	s	file:
TreeView	sqlite/sqlite3.c	/^typedef struct TreeView TreeView;$/;"	t	typeref:struct:TreeView	file:
Trigger	sqlite/sqlite3.c	/^struct Trigger {$/;"	s	file:
Trigger	sqlite/sqlite3.c	/^typedef struct Trigger Trigger;$/;"	t	typeref:struct:Trigger	file:
TriggerPrg	sqlite/sqlite3.c	/^struct TriggerPrg {$/;"	s	file:
TriggerPrg	sqlite/sqlite3.c	/^typedef struct TriggerPrg TriggerPrg;$/;"	t	typeref:struct:TriggerPrg	file:
TriggerStep	sqlite/sqlite3.c	/^struct TriggerStep {$/;"	s	file:
TriggerStep	sqlite/sqlite3.c	/^typedef struct TriggerStep TriggerStep;$/;"	t	typeref:struct:TriggerStep	file:
Trim	include/common/string_utility.h	/^  static inline void Trim(std::string &s) {$/;"	f	class:cmudb::StringUtility	typeref:typename:void
Tuple	include/table/tuple.h	/^  Tuple(RID rid) : allocated_(false), rid_(rid) {}$/;"	f	class:cmudb::Tuple
Tuple	include/table/tuple.h	/^  inline Tuple() : allocated_(false), rid_(RID()), size_(0), data_(nullptr) {}$/;"	f	class:cmudb::Tuple
Tuple	include/table/tuple.h	/^class Tuple {$/;"	c	namespace:cmudb
Tuple	table/tuple.cpp	/^Tuple::Tuple(const Tuple &other)$/;"	f	class:cmudb::Tuple
Tuple	table/tuple.cpp	/^Tuple::Tuple(std::vector<Value> values, Schema *schema) : allocated_(true) {$/;"	f	class:cmudb::Tuple
Type	include/type/type.h	/^  Type(TypeId type_id) : type_id_(type_id) {}$/;"	f	class:cmudb::Type
Type	include/type/type.h	/^class Type {$/;"	c	namespace:cmudb
TypeId	include/type/type_id.h	/^enum TypeId {$/;"	g	namespace:cmudb
TypeIdToString	type/type.cpp	/^std::string Type::TypeIdToString(const TypeId type_id) {$/;"	f	class:cmudb::Type	typeref:typename:std::string
TypeMismatchException	include/common/exception.h	/^  TypeMismatchException(std::string msg, const TypeId type_1,$/;"	f	class:cmudb::TypeMismatchException
TypeMismatchException	include/common/exception.h	/^class TypeMismatchException : public Exception {$/;"	c	namespace:cmudb
TypeUtil	include/type/type_util.h	/^class TypeUtil {$/;"	c	namespace:cmudb
UAUTH_Admin	sqlite/sqlite3.c	/^#define UAUTH_Admin /;"	d	file:
UAUTH_Fail	sqlite/sqlite3.c	/^#define UAUTH_Fail /;"	d	file:
UAUTH_Unknown	sqlite/sqlite3.c	/^#define UAUTH_Unknown /;"	d	file:
UAUTH_User	sqlite/sqlite3.c	/^#define UAUTH_User /;"	d	file:
UINT16_TYPE	sqlite/sqlite3.c	/^#  define UINT16_TYPE /;"	d	file:
UINT32_TYPE	sqlite/sqlite3.c	/^#  define UINT32_TYPE /;"	d	file:
UINT8_TYPE	sqlite/sqlite3.c	/^#  define UINT8_TYPE /;"	d	file:
UNUSED_PARAMETER	sqlite/shell.c	/^#define UNUSED_PARAMETER(/;"	d	file:
UNUSED_PARAMETER	sqlite/sqlite3.c	/^#define UNUSED_PARAMETER(/;"	d	file:
UNUSED_PARAMETER2	sqlite/sqlite3.c	/^#define UNUSED_PARAMETER2(/;"	d	file:
UPDATE	include/concurrency/transaction.h	/^enum class WType { INSERT = 0, DELETE, UPDATE };$/;"	e	enum:cmudb::WType
UPDATE	include/logging/log_record.h	/^  UPDATE,$/;"	e	enum:cmudb::LogRecordType
Undo	logging/log_recovery.cpp	/^void LogRecovery::Undo() {}$/;"	f	class:cmudb::LogRecovery	typeref:typename:void
UnknownTypeException	include/common/exception.h	/^  UnknownTypeException(int type, std::string msg)$/;"	f	class:cmudb::UnknownTypeException
UnknownTypeException	include/common/exception.h	/^class UnknownTypeException : public Exception {$/;"	c	namespace:cmudb
Unlock	concurrency/lock_manager.cpp	/^bool LockManager::Unlock(Transaction *txn, const RID &rid) {$/;"	f	class:cmudb::LockManager	typeref:typename:bool
UnpackedRecord	sqlite/sqlite3.c	/^struct UnpackedRecord {$/;"	s	file:
UnpackedRecord	sqlite/sqlite3.c	/^typedef struct UnpackedRecord UnpackedRecord;$/;"	t	typeref:struct:UnpackedRecord	file:
UnpinPage	buffer/buffer_pool_manager.cpp	/^bool BufferPoolManager::UnpinPage(page_id_t page_id, bool is_dirty) {$/;"	f	class:cmudb::BufferPoolManager	typeref:typename:bool
UpdateRecord	page/header_page.cpp	/^bool HeaderPage::UpdateRecord(const std::string &name,$/;"	f	class:cmudb::HeaderPage	typeref:typename:bool
UpdateRootPageId	index/b_plus_tree.cpp	/^void BPLUSTREE_TYPE::UpdateRootPageId(int insert_record) {$/;"	f	class:cmudb::BPLUSTREE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS void
UpdateTuple	include/vtable/virtual_table.h	/^  inline bool UpdateTuple(const Tuple &tuple, const RID &rid) {$/;"	f	class:cmudb::VirtualTable	typeref:typename:bool
UpdateTuple	page/table_page.cpp	/^bool TablePage::UpdateTuple(const Tuple &new_tuple, Tuple &old_tuple,$/;"	f	class:cmudb::TablePage	typeref:typename:bool
UpdateTuple	table/table_heap.cpp	/^bool TableHeap::UpdateTuple(const Tuple &tuple, const RID &rid,$/;"	f	class:cmudb::TableHeap	typeref:typename:bool
VARCHAR	include/type/type_id.h	/^  VARCHAR,$/;"	e	enum:cmudb::TypeId
VARLEN_COMPARE_FUNC	type/varlen_type.cpp	/^#define VARLEN_COMPARE_FUNC(/;"	d	file:
VDBE_DISPLAY_P4	sqlite/sqlite3.c	/^# define VDBE_DISPLAY_P4 /;"	d	file:
VDBE_MAGIC_DEAD	sqlite/sqlite3.c	/^#define VDBE_MAGIC_DEAD /;"	d	file:
VDBE_MAGIC_HALT	sqlite/sqlite3.c	/^#define VDBE_MAGIC_HALT /;"	d	file:
VDBE_MAGIC_INIT	sqlite/sqlite3.c	/^#define VDBE_MAGIC_INIT /;"	d	file:
VDBE_MAGIC_RESET	sqlite/sqlite3.c	/^#define VDBE_MAGIC_RESET /;"	d	file:
VDBE_MAGIC_RUN	sqlite/sqlite3.c	/^#define VDBE_MAGIC_RUN /;"	d	file:
VDBE_OFFSET_LINENO	sqlite/sqlite3.c	/^# define VDBE_OFFSET_LINENO(/;"	d	file:
VFUNCTION	sqlite/sqlite3.c	/^#define VFUNCTION(/;"	d	file:
VList	sqlite/sqlite3.c	/^typedef int VList;$/;"	t	typeref:typename:int	file:
VTable	sqlite/sqlite3.c	/^struct VTable {$/;"	s	file:
VTable	sqlite/sqlite3.c	/^typedef struct VTable VTable;$/;"	t	typeref:struct:VTable	file:
VVA_ONLY	sqlite/sqlite3.c	/^# define VVA_ONLY(/;"	d	file:
Val	include/type/value.h	/^  union Val {$/;"	u	class:cmudb::Value
ValMod	include/type/numeric_type.h	/^  static inline double ValMod(double x, double y) {$/;"	f	class:cmudb::NumericType	typeref:typename:double
Value	include/type/value.h	/^  Value(const TypeId type) : manage_data_(false), type_id_(type) {$/;"	f	class:cmudb::Value
Value	include/type/value.h	/^class Value {$/;"	c	namespace:cmudb
Value	type/value.cpp	/^Value::Value(TypeId type, const char *data, uint32_t len, bool manage_data)$/;"	f	class:cmudb::Value
Value	type/value.cpp	/^Value::Value(TypeId type, const std::string &data) : Value(type) {$/;"	f	class:cmudb::Value
Value	type/value.cpp	/^Value::Value(TypeId type, double d) : Value(type) {$/;"	f	class:cmudb::Value
Value	type/value.cpp	/^Value::Value(TypeId type, float f) : Value(type) {$/;"	f	class:cmudb::Value
Value	type/value.cpp	/^Value::Value(TypeId type, int16_t i) : Value(type) {$/;"	f	class:cmudb::Value
Value	type/value.cpp	/^Value::Value(TypeId type, int32_t i) : Value(type) {$/;"	f	class:cmudb::Value
Value	type/value.cpp	/^Value::Value(TypeId type, int64_t i) : Value(type) {$/;"	f	class:cmudb::Value
Value	type/value.cpp	/^Value::Value(TypeId type, int8_t i) : Value(type) {$/;"	f	class:cmudb::Value
Value	type/value.cpp	/^Value::Value(TypeId type, uint64_t i) : Value(type) {$/;"	f	class:cmudb::Value
Value	type/value.cpp	/^Value::Value(const Value &other) {$/;"	f	class:cmudb::Value
ValueAt	page/b_plus_tree_internal_page.cpp	/^ValueType B_PLUS_TREE_INTERNAL_PAGE_TYPE::ValueAt(int index) const { return 0; }$/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS ValueType
ValueIndex	page/b_plus_tree_internal_page.cpp	/^int B_PLUS_TREE_INTERNAL_PAGE_TYPE::ValueIndex(const ValueType &value) const {$/;"	f	class:cmudb::B_PLUS_TREE_INTERNAL_PAGE_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS int
ValueOutOfRangeException	include/common/exception.h	/^  ValueOutOfRangeException(const TypeId varType, const size_t length)$/;"	f	class:cmudb::ValueOutOfRangeException
ValueOutOfRangeException	include/common/exception.h	/^  ValueOutOfRangeException(const double value, const TypeId origType,$/;"	f	class:cmudb::ValueOutOfRangeException
ValueOutOfRangeException	include/common/exception.h	/^  ValueOutOfRangeException(const int64_t value, const TypeId origType,$/;"	f	class:cmudb::ValueOutOfRangeException
ValueOutOfRangeException	include/common/exception.h	/^class ValueOutOfRangeException : public Exception {$/;"	c	namespace:cmudb
VarlenType	include/type/varlen_type.h	/^class VarlenType : public Type {$/;"	c	namespace:cmudb
VarlenType	type/varlen_type.cpp	/^VarlenType::VarlenType(TypeId type) : Type(type) {}$/;"	f	class:cmudb::VarlenType
Vdbe	sqlite/sqlite3.c	/^struct Vdbe {$/;"	s	file:
Vdbe	sqlite/sqlite3.c	/^typedef struct Vdbe Vdbe;$/;"	t	typeref:struct:Vdbe	file:
VdbeComment	sqlite/sqlite3.c	/^# define VdbeComment(/;"	d	file:
VdbeCoverage	sqlite/sqlite3.c	/^# define VdbeCoverage(/;"	d	file:
VdbeCoverageAlwaysTaken	sqlite/sqlite3.c	/^# define VdbeCoverageAlwaysTaken(/;"	d	file:
VdbeCoverageIf	sqlite/sqlite3.c	/^# define VdbeCoverageIf(/;"	d	file:
VdbeCoverageNeverTaken	sqlite/sqlite3.c	/^# define VdbeCoverageNeverTaken(/;"	d	file:
VdbeCursor	sqlite/sqlite3.c	/^struct VdbeCursor {$/;"	s	file:
VdbeCursor	sqlite/sqlite3.c	/^typedef struct VdbeCursor VdbeCursor;$/;"	t	typeref:struct:VdbeCursor	file:
VdbeFrame	sqlite/sqlite3.c	/^struct VdbeFrame {$/;"	s	file:
VdbeFrame	sqlite/sqlite3.c	/^typedef struct VdbeFrame VdbeFrame;$/;"	t	typeref:struct:VdbeFrame	file:
VdbeFrameMem	sqlite/sqlite3.c	/^#define VdbeFrameMem(/;"	d	file:
VdbeMemDynamic	sqlite/sqlite3.c	/^#define VdbeMemDynamic(/;"	d	file:
VdbeModuleComment	sqlite/sqlite3.c	/^#   define VdbeModuleComment(/;"	d	file:
VdbeModuleComment	sqlite/sqlite3.c	/^# define VdbeModuleComment(/;"	d	file:
VdbeNoopComment	sqlite/sqlite3.c	/^# define VdbeNoopComment(/;"	d	file:
VdbeOp	sqlite/sqlite3.c	/^struct VdbeOp {$/;"	s	file:
VdbeOp	sqlite/sqlite3.c	/^typedef struct VdbeOp VdbeOp;$/;"	t	typeref:struct:VdbeOp	file:
VdbeOpList	sqlite/sqlite3.c	/^struct VdbeOpList {$/;"	s	file:
VdbeOpList	sqlite/sqlite3.c	/^typedef struct VdbeOpList VdbeOpList;$/;"	t	typeref:struct:VdbeOpList	file:
VdbeSorter	sqlite/sqlite3.c	/^typedef struct VdbeSorter VdbeSorter;$/;"	t	typeref:struct:VdbeSorter	file:
Victim	buffer/lru_replacer.cpp	/^template <typename T> bool LRUReplacer<T>::Victim(T &value) {$/;"	f	class:cmudb::LRUReplacer	typeref:typename:bool
VirtualTable	include/vtable/virtual_table.h	/^  VirtualTable(Schema *schema, BufferPoolManager *buffer_pool_manager,$/;"	f	class:cmudb::VirtualTable
VirtualTable	include/vtable/virtual_table.h	/^class VirtualTable {$/;"	c	namespace:cmudb
VisibleRowid	sqlite/sqlite3.c	/^#define VisibleRowid(/;"	d	file:
VtabBegin	vtable/virtual_table.cpp	/^int VtabBegin(sqlite3_vtab *pVTab) {$/;"	f	namespace:cmudb	typeref:typename:int
VtabBestIndex	vtable/virtual_table.cpp	/^int VtabBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo) {$/;"	f	namespace:cmudb	typeref:typename:int
VtabClose	vtable/virtual_table.cpp	/^int VtabClose(sqlite3_vtab_cursor *cur) {$/;"	f	namespace:cmudb	typeref:typename:int
VtabColumn	vtable/virtual_table.cpp	/^int VtabColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i) {$/;"	f	namespace:cmudb	typeref:typename:int
VtabCommit	vtable/virtual_table.cpp	/^int VtabCommit(sqlite3_vtab *pVTab) {$/;"	f	namespace:cmudb	typeref:typename:int
VtabConnect	vtable/virtual_table.cpp	/^int VtabConnect(sqlite3 *db, void *pAux, int argc, const char *const *argv,$/;"	f	namespace:cmudb	typeref:typename:int
VtabCreate	vtable/virtual_table.cpp	/^int VtabCreate(sqlite3 *db, void *pAux, int argc, const char *const *argv,$/;"	f	namespace:cmudb	typeref:typename:SQLITE_EXTENSION_INIT1 int
VtabCtx	sqlite/sqlite3.c	/^typedef struct VtabCtx VtabCtx;$/;"	t	typeref:struct:VtabCtx	file:
VtabDisconnect	vtable/virtual_table.cpp	/^int VtabDisconnect(sqlite3_vtab *pVtab) {$/;"	f	namespace:cmudb	typeref:typename:int
VtabEof	vtable/virtual_table.cpp	/^int VtabEof(sqlite3_vtab_cursor *cur) {$/;"	f	namespace:cmudb	typeref:typename:int
VtabFilter	vtable/virtual_table.cpp	/^int VtabFilter(sqlite3_vtab_cursor *pVtabCursor, int idxNum, const char *idxStr,$/;"	f	namespace:cmudb	typeref:typename:int
VtabNext	vtable/virtual_table.cpp	/^int VtabNext(sqlite3_vtab_cursor *cur) {$/;"	f	namespace:cmudb	typeref:typename:int
VtabOpen	vtable/virtual_table.cpp	/^int VtabOpen(sqlite3_vtab *pVtab, sqlite3_vtab_cursor **ppCursor) {$/;"	f	namespace:cmudb	typeref:typename:int
VtabRowid	vtable/virtual_table.cpp	/^int VtabRowid(sqlite3_vtab_cursor *cur, sqlite3_int64 *pRowid) {$/;"	f	namespace:cmudb	typeref:typename:int
VtabUpdate	vtable/virtual_table.cpp	/^int VtabUpdate(sqlite3_vtab *pVTab, int argc, sqlite3_value **argv,$/;"	f	namespace:cmudb	typeref:typename:int
VtableModule	vtable/virtual_table.cpp	/^sqlite3_module VtableModule = {$/;"	v	namespace:cmudb	typeref:typename:sqlite3_module
WHERE_DISTINCTBY	sqlite/sqlite3.c	/^#define WHERE_DISTINCTBY /;"	d	file:
WHERE_DISTINCT_NOOP	sqlite/sqlite3.c	/^#define WHERE_DISTINCT_NOOP /;"	d	file:
WHERE_DISTINCT_ORDERED	sqlite/sqlite3.c	/^#define WHERE_DISTINCT_ORDERED /;"	d	file:
WHERE_DISTINCT_UNIQUE	sqlite/sqlite3.c	/^#define WHERE_DISTINCT_UNIQUE /;"	d	file:
WHERE_DISTINCT_UNORDERED	sqlite/sqlite3.c	/^#define WHERE_DISTINCT_UNORDERED /;"	d	file:
WHERE_DUPLICATES_OK	sqlite/sqlite3.c	/^#define WHERE_DUPLICATES_OK /;"	d	file:
WHERE_GROUPBY	sqlite/sqlite3.c	/^#define WHERE_GROUPBY /;"	d	file:
WHERE_ONEPASS_DESIRED	sqlite/sqlite3.c	/^#define WHERE_ONEPASS_DESIRED /;"	d	file:
WHERE_ONEPASS_MULTIROW	sqlite/sqlite3.c	/^#define WHERE_ONEPASS_MULTIROW /;"	d	file:
WHERE_ORDERBY_LIMIT	sqlite/sqlite3.c	/^#define WHERE_ORDERBY_LIMIT /;"	d	file:
WHERE_ORDERBY_MAX	sqlite/sqlite3.c	/^#define WHERE_ORDERBY_MAX /;"	d	file:
WHERE_ORDERBY_MIN	sqlite/sqlite3.c	/^#define WHERE_ORDERBY_MIN /;"	d	file:
WHERE_ORDERBY_NORMAL	sqlite/sqlite3.c	/^#define WHERE_ORDERBY_NORMAL /;"	d	file:
WHERE_OR_SUBCLAUSE	sqlite/sqlite3.c	/^#define WHERE_OR_SUBCLAUSE /;"	d	file:
WHERE_SEEK_TABLE	sqlite/sqlite3.c	/^#define WHERE_SEEK_TABLE /;"	d	file:
WHERE_SEEK_UNIQ_TABLE	sqlite/sqlite3.c	/^#define WHERE_SEEK_UNIQ_TABLE /;"	d	file:
WHERE_SORTBYGROUP	sqlite/sqlite3.c	/^#define WHERE_SORTBYGROUP /;"	d	file:
WHERE_USE_LIMIT	sqlite/sqlite3.c	/^#define WHERE_USE_LIMIT /;"	d	file:
WHERE_WANT_DISTINCT	sqlite/sqlite3.c	/^#define WHERE_WANT_DISTINCT /;"	d	file:
WLatch	include/page/page.h	/^  inline void WLatch() { rwlatch_.WLock(); }$/;"	f	class:cmudb::Page	typeref:typename:void
WLock	include/common/rwmutex.h	/^  void WLock() {$/;"	f	class:cmudb::RWMutex	typeref:typename:void
WRC_Abort	sqlite/sqlite3.c	/^#define WRC_Abort /;"	d	file:
WRC_Continue	sqlite/sqlite3.c	/^#define WRC_Continue /;"	d	file:
WRC_Prune	sqlite/sqlite3.c	/^#define WRC_Prune /;"	d	file:
WType	include/concurrency/transaction.h	/^enum class WType { INSERT = 0, DELETE, UPDATE };$/;"	g	namespace:cmudb
WUnlatch	include/page/page.h	/^  inline void WUnlatch() { rwlatch_.WUnlock(); }$/;"	f	class:cmudb::Page	typeref:typename:void
WUnlock	include/common/rwmutex.h	/^  void WUnlock() {$/;"	f	class:cmudb::RWMutex	typeref:typename:void
Walker	sqlite/sqlite3.c	/^struct Walker {$/;"	s	file:
Walker	sqlite/sqlite3.c	/^typedef struct Walker Walker;$/;"	t	typeref:struct:Walker	file:
WhereInfo	sqlite/sqlite3.c	/^typedef struct WhereInfo WhereInfo;$/;"	t	typeref:struct:WhereInfo	file:
With	sqlite/sqlite3.c	/^struct With {$/;"	s	file:
With	sqlite/sqlite3.c	/^typedef struct With With;$/;"	t	typeref:struct:With	file:
WriteLog	disk/disk_manager.cpp	/^void DiskManager::WriteLog(char *log_data, int size) {$/;"	f	class:cmudb::DiskManager	typeref:typename:void
WritePage	disk/disk_manager.cpp	/^void DiskManager::WritePage(page_id_t page_id, const char *page_data) {$/;"	f	class:cmudb::DiskManager	typeref:typename:void
WriteRecord	include/concurrency/transaction.h	/^  WriteRecord(RID rid, WType wtype, const Tuple &tuple, TableHeap *table)$/;"	f	class:cmudb::WriteRecord
WriteRecord	include/concurrency/transaction.h	/^class WriteRecord {$/;"	c	namespace:cmudb
XN_EXPR	sqlite/sqlite3.c	/^#define XN_EXPR /;"	d	file:
XN_ROWID	sqlite/sqlite3.c	/^#define XN_ROWID /;"	d	file:
Y	sqlite/sqlite3.c	/^  int Y, M, D;        \/* Year, month, and day *\/$/;"	m	struct:DateTime	typeref:typename:int	file:
_BSD_SOURCE	sqlite/sqlite3.c	/^# define _BSD_SOURCE$/;"	d	file:
_CRT_RAND_S	sqlite/sqlite3.c	/^#  define _CRT_RAND_S$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	sqlite/shell.c	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_FILE_OFFSET_BITS	sqlite/shell.c	/^#   define _FILE_OFFSET_BITS /;"	d	file:
_FILE_OFFSET_BITS	sqlite/sqlite3.c	/^#   define _FILE_OFFSET_BITS /;"	d	file:
_FTS5_H	include/sqlite/sqlite3.h	/^#define _FTS5_H$/;"	d
_FTS5_H	sqlite/sqlite3.c	/^#define _FTS5_H$/;"	d	file:
_GNU_SOURCE	sqlite/sqlite3.c	/^# define _GNU_SOURCE$/;"	d	file:
_LARGEFILE_SOURCE	sqlite/shell.c	/^# define _LARGEFILE_SOURCE /;"	d	file:
_LARGEFILE_SOURCE	sqlite/sqlite3.c	/^# define _LARGEFILE_SOURCE /;"	d	file:
_LARGE_FILE	sqlite/shell.c	/^# define _LARGE_FILE /;"	d	file:
_LARGE_FILE	sqlite/sqlite3.c	/^# define _LARGE_FILE /;"	d	file:
_OS_COMMON_H_	sqlite/sqlite3.c	/^#define _OS_COMMON_H_$/;"	d	file:
_SQLITE3RTREE_H_	include/sqlite/sqlite3.h	/^#define _SQLITE3RTREE_H_$/;"	d
_SQLITE3RTREE_H_	sqlite/sqlite3.c	/^#define _SQLITE3RTREE_H_$/;"	d	file:
_SQLITE_OS_H_	sqlite/sqlite3.c	/^#define _SQLITE_OS_H_$/;"	d	file:
_USE_32BIT_TIME_T	sqlite/sqlite3.c	/^# define _USE_32BIT_TIME_T$/;"	d	file:
_XOPEN_SOURCE	sqlite/sqlite3.c	/^#  define _XOPEN_SOURCE /;"	d	file:
__FUNCTION__	include/common/logger.h	/^#define __FUNCTION__ /;"	d
__SQLITESESSION_H_	include/sqlite/sqlite3.h	/^#define __SQLITESESSION_H_ /;"	d
__SQLITESESSION_H_	sqlite/sqlite3.c	/^#define __SQLITESESSION_H_ /;"	d	file:
__anon6b93625c010a	include/type/value.h	/^  union {$/;"	u	class:cmudb::Value
__anon76f104fc110a	sqlite/sqlite3.c	/^  union {$/;"	u	struct:sqlite3	file:
__anon76f104fc120a	sqlite/sqlite3.c	/^  union {$/;"	u	struct:FuncDef	file:
__anon76f104fc130a	sqlite/sqlite3.c	/^  union {$/;"	u	struct:Expr	file:
__anon76f104fc140a	sqlite/sqlite3.c	/^  union {$/;"	u	struct:Expr	file:
__anon76f104fc150a	sqlite/sqlite3.c	/^    union {$/;"	u	struct:ExprList::ExprList_item	file:
__anon76f104fc1608	sqlite/sqlite3.c	/^      struct {$/;"	s	union:ExprList::ExprList_item::__anon76f104fc150a	file:
__anon76f104fc1708	sqlite/sqlite3.c	/^    struct {$/;"	s	struct:SrcList::SrcList_item	file:
__anon76f104fc180a	sqlite/sqlite3.c	/^    union {$/;"	u	struct:SrcList::SrcList_item	file:
__anon76f104fc1908	sqlite/sqlite3.c	/^typedef struct {$/;"	s	file:
__anon76f104fc1a0a	sqlite/sqlite3.c	/^  union {                                   \/* Extra data for callback *\/$/;"	u	struct:Walker	file:
__anon76f104fc1b0a	sqlite/sqlite3.c	/^  union {$/;"	u	struct:VdbeCursor	file:
__anon76f104fc1c08	sqlite/sqlite3.c	/^static const struct {$/;"	s	file:
__anon76f104fc1d08	sqlite/sqlite3.c	/^static struct {$/;"	s	file:
__anon76f104fc1e0a	sqlite/sqlite3.c	/^  union {$/;"	u	struct:Mem3Block	file:
__anon76f104fc1f08	sqlite/sqlite3.c	/^    struct {$/;"	s	union:Mem3Block::__anon76f104fc1e0a	file:
__anon76f104fc2008	sqlite/sqlite3.c	/^    struct {$/;"	s	union:Mem3Block::__anon76f104fc1e0a	file:
__anonc53fbaef010a	sqlite/shell.c	/^  union {$/;"	u	struct:SHA3Context	file:
__anonc53fbaef0208	sqlite/shell.c	/^    static const struct {$/;"	s	function:displayLinuxIoStats	file:
__anonc53fbaef0308	sqlite/shell.c	/^  static const struct { char *zSuffix; int iMult; } aMult[] = {$/;"	s	function:integerValue	file:
__anonc53fbaef0408	sqlite/shell.c	/^  static const struct { const char *zName; int ofst; } aField[] = {$/;"	s	function:shell_dbinfo_command	file:
__anonc53fbaef0508	sqlite/shell.c	/^  static const struct { const char *zName; const char *zSql; } aQuery[] = {$/;"	s	function:shell_dbinfo_command	file:
__anonc53fbaef0608	sqlite/shell.c	/^    static const struct {$/;"	s	function:do_meta_command	file:
__anonc53fbaef0708	sqlite/shell.c	/^    static const struct {$/;"	s	function:do_meta_command	file:
__anond83fa8b00102	include/common/string_utility.h	/^                                    [](int ch) { return !std::isspace(ch); }));$/;"	f	function:cmudb::StringUtility::LTrim	file:
__anond83fa8b00202	include/common/string_utility.h	/^                         [](int ch) { return !std::isspace(ch); })$/;"	f	function:cmudb::StringUtility::RTrim	file:
_all_whitespace	sqlite/shell.c	/^static int _all_whitespace(const char *z){$/;"	f	typeref:typename:int	file:
_ht	sqlite/sqlite3.c	/^  struct _ht {              \/* the hash table *\/$/;"	s	struct:Hash	file:
_sqliteZone_	sqlite/sqlite3.c	/^static malloc_zone_t* _sqliteZone_;$/;"	v	typeref:typename:malloc_zone_t *	file:
a	include/sqlite/sqlite3.h	/^const unsigned char *a;$/;"	m	struct:Fts5PhraseIter	typeref:typename:const unsigned char *
a	sqlite/sqlite3.c	/^  FuncDef *a[SQLITE_FUNC_HASH_SZ];       \/* Hash table for functions *\/$/;"	m	struct:FuncDefHash	typeref:typename:FuncDef * []	file:
a	sqlite/sqlite3.c	/^  const unsigned char *a;$/;"	m	struct:Fts5PhraseIter	typeref:typename:const unsigned char *	file:
a	sqlite/sqlite3.c	/^  } *a;$/;"	m	struct:IdList	typeref:struct:IdList::IdList_item *	file:
a	sqlite/sqlite3.c	/^  } a[1];                  \/* One slot for each expression in the list *\/$/;"	m	struct:ExprList	typeref:struct:ExprList::ExprList_item[1]	file:
a	sqlite/sqlite3.c	/^  } a[1];             \/* One entry for each identifier on the list *\/$/;"	m	struct:SrcList	typeref:struct:SrcList::SrcList_item[1]	file:
a	sqlite/sqlite3.c	/^  } a[1];$/;"	m	struct:With	typeref:struct:With::Cte[1]	file:
aAction	sqlite/sqlite3.c	/^  u8 aAction[2];        \/* ON DELETE and ON UPDATE actions, respectively *\/$/;"	m	struct:FKey	typeref:typename:u8[2]	file:
aAltMap	sqlite/sqlite3.c	/^  int *aAltMap;           \/* Mapping from table to index column numbers *\/$/;"	m	struct:VdbeCursor	typeref:typename:int *	file:
aAvgEq	sqlite/sqlite3.c	/^  tRowcnt *aAvgEq;         \/* Average nEq values for keys not in aSample *\/$/;"	m	struct:Index	typeref:typename:tRowcnt *	file:
aCol	sqlite/sqlite3.c	/^  Column *aCol;        \/* Information about each column *\/$/;"	m	struct:Table	typeref:typename:Column *	file:
aCol	sqlite/sqlite3.c	/^  } *aCol;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_col *	file:
aCol	sqlite/sqlite3.c	/^  } aCol[1];            \/* One entry for each of nCol columns *\/$/;"	m	struct:FKey	typeref:struct:FKey::sColMap[1]	file:
aColCache	sqlite/sqlite3.c	/^  } aColCache[SQLITE_N_COLCACHE];  \/* One for each column cache entry *\/$/;"	m	struct:Parse	typeref:struct:Parse::yColCache[]	file:
aColExpr	sqlite/sqlite3.c	/^  ExprList *aColExpr;      \/* Column expressions *\/$/;"	m	struct:Index	typeref:typename:ExprList *	file:
aColName	sqlite/sqlite3.c	/^  Mem *aColName;          \/* Column names to return *\/$/;"	m	struct:Vdbe	typeref:typename:Mem *	file:
aColl	sqlite/sqlite3.c	/^  CollSeq *aColl[1];  \/* Collating sequence for each term of the key *\/$/;"	m	struct:KeyInfo	typeref:typename:CollSeq * [1]	file:
aCollSeq	sqlite/sqlite3.c	/^  Hash aCollSeq;                \/* All collating sequences *\/$/;"	m	struct:sqlite3	typeref:typename:Hash	file:
aColmask	sqlite/sqlite3.c	/^  u32 aColmask[2];        \/* Masks of old.*, new.* columns accessed *\/$/;"	m	struct:TriggerPrg	typeref:typename:u32[2]	file:
aConstraint	include/sqlite/sqlite3.h	/^} *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint *
aConstraint	sqlite/sqlite3.c	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint *	file:
aConstraintUsage	include/sqlite/sqlite3.h	/^} *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage *
aConstraintUsage	sqlite/sqlite3.c	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage *	file:
aCoord	include/sqlite/sqlite3.h	/^sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_rtree_dbl *
aCoord	sqlite/sqlite3.c	/^  sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_rtree_dbl *	file:
aCounter	sqlite/sqlite3.c	/^  u32 aCounter[7];        \/* Counters used by sqlite3_stmt_status() *\/$/;"	m	struct:Vdbe	typeref:typename:u32[7]	file:
aCtrl	sqlite/sqlite3.c	/^  u8 *aCtrl;$/;"	m	struct:Mem5Global	typeref:typename:u8 *	file:
aDb	sqlite/sqlite3.c	/^  Db *aDb;                      \/* All backends *\/$/;"	m	struct:sqlite3	typeref:typename:Db *	file:
aDbStatic	sqlite/sqlite3.c	/^  Db aDbStatic[2];              \/* Static space for the 2 default backends *\/$/;"	m	struct:sqlite3	typeref:typename:Db[2]	file:
aExtension	sqlite/sqlite3.c	/^  void **aExtension;            \/* Array of shared library handles *\/$/;"	m	struct:sqlite3	typeref:typename:void **	file:
aFunc	sqlite/sqlite3.c	/^  Hash aFunc;                   \/* Hash table of connection functions *\/$/;"	m	struct:sqlite3	typeref:typename:Hash	file:
aFunc	sqlite/sqlite3.c	/^  } *aFunc;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_func *	file:
aLabel	sqlite/sqlite3.c	/^  int *aLabel;         \/* Space to hold the labels *\/$/;"	m	struct:Parse	typeref:typename:int *	file:
aLimit	sqlite/sqlite3.c	/^  int aLimit[SQLITE_N_LIMIT];   \/* Limits *\/$/;"	m	struct:sqlite3	typeref:typename:int[]	file:
aMem	sqlite/sqlite3.c	/^  Mem *aMem;              \/* Array of memory cells for parent frame *\/$/;"	m	struct:VdbeFrame	typeref:typename:Mem *	file:
aMem	sqlite/sqlite3.c	/^  Mem *aMem;              \/* The memory locations *\/$/;"	m	struct:Vdbe	typeref:typename:Mem *	file:
aMem	sqlite/sqlite3.c	/^  Mem *aMem;          \/* Values *\/$/;"	m	struct:UnpackedRecord	typeref:typename:Mem *	file:
aMem	sqlite/sqlite3.c	/^  sqlite3_value *aMem;    \/* First of nMem value in the unpacked pKey *\/$/;"	m	struct:BtreePayload	typeref:typename:sqlite3_value *	file:
aModule	sqlite/sqlite3.c	/^  Hash aModule;                 \/* populated by sqlite3_create_module() *\/$/;"	m	struct:sqlite3	typeref:typename:Hash	file:
aNew	sqlite/sqlite3.c	/^  Mem *aNew;                      \/* Array of new.* values *\/$/;"	m	struct:PreUpdate	typeref:typename:Mem *	file:
aOffset	sqlite/sqlite3.c	/^  u32 *aOffset;           \/* Pointer to aType[nField] *\/$/;"	m	struct:VdbeCursor	typeref:typename:u32 *	file:
aOnce	sqlite/sqlite3.c	/^  u8 *aOnce;                    \/* Array of OP_Once flags *\/$/;"	m	struct:SubProgram	typeref:typename:u8 *	file:
aOnce	sqlite/sqlite3.c	/^  u8 *aOnce;              \/* Bitmask used by OP_Once *\/$/;"	m	struct:VdbeFrame	typeref:typename:u8 *	file:
aOp	sqlite/sqlite3.c	/^  Op *aOp;                \/* Program instructions for parent frame *\/$/;"	m	struct:VdbeFrame	typeref:typename:Op *	file:
aOp	sqlite/sqlite3.c	/^  Op *aOp;                \/* Space to hold the virtual machine's program *\/$/;"	m	struct:Vdbe	typeref:typename:Op *	file:
aOp	sqlite/sqlite3.c	/^  VdbeOp *aOp;                  \/* Array of opcodes for sub-program *\/$/;"	m	struct:SubProgram	typeref:typename:VdbeOp *	file:
aOrderBy	include/sqlite/sqlite3.h	/^} *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby *
aOrderBy	sqlite/sqlite3.c	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby *	file:
aParam	include/sqlite/sqlite3.h	/^sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_rtree_dbl *
aParam	include/sqlite/sqlite3.h	/^sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	typeref:typename:sqlite3_rtree_dbl *
aParam	sqlite/sqlite3.c	/^  sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_rtree_dbl *	file:
aParam	sqlite/sqlite3.c	/^  sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	typeref:typename:sqlite3_rtree_dbl *	file:
aPool	sqlite/sqlite3.c	/^  Mem3Block *aPool;$/;"	m	struct:Mem3Global	typeref:typename:Mem3Block *	file:
aRecord	sqlite/sqlite3.c	/^  u8 *aRecord;                    \/* old.* database record *\/$/;"	m	struct:PreUpdate	typeref:typename:u8 *	file:
aRow	sqlite/sqlite3.c	/^  const u8 *aRow;         \/* Data for the current row, if all on one page *\/$/;"	m	struct:VdbeCursor	typeref:typename:const u8 *	file:
aSample	sqlite/sqlite3.c	/^  IndexSample *aSample;    \/* Samples of the left-most key *\/$/;"	m	struct:Index	typeref:typename:IndexSample *	file:
aScan	sqlite/sqlite3.c	/^  ScanStatus *aScan;      \/* Scan definitions for sqlite3_stmt_scanstatus() *\/$/;"	m	struct:Vdbe	typeref:typename:ScanStatus *	file:
aSession	sqlite/shell.c	/^  OpenSession aSession[4];  \/* Array of sessions.  [0] is in focus. *\/$/;"	m	struct:ShellState	typeref:typename:OpenSession[4]	file:
aSortOrder	sqlite/sqlite3.c	/^  u8 *aSortOrder;          \/* for each column: True==DESC, False==ASC *\/$/;"	m	struct:Index	typeref:typename:u8 *	file:
aSortOrder	sqlite/sqlite3.c	/^  u8 *aSortOrder;     \/* Sort order for each column. *\/$/;"	m	struct:KeyInfo	typeref:typename:u8 *	file:
aTableLock	sqlite/sqlite3.c	/^  TableLock *aTableLock; \/* Required table locks for shared-cache mode *\/$/;"	m	struct:Parse	typeref:typename:TableLock *	file:
aTempReg	sqlite/sqlite3.c	/^  int aTempReg[8];        \/* Holding area for temporary registers *\/$/;"	m	struct:Parse	typeref:typename:int[8]	file:
aType	sqlite/sqlite3.c	/^  u32 aType[1];           \/* Type values record decode.  MUST BE LAST *\/$/;"	m	struct:VdbeCursor	typeref:typename:u32[1]	file:
aVTrans	sqlite/sqlite3.c	/^  VTable **aVTrans;             \/* Virtual tables with open transactions *\/$/;"	m	struct:sqlite3	typeref:typename:VTable **	file:
aVar	sqlite/sqlite3.c	/^  Mem *aVar;              \/* Values for the OP_Variable opcode. *\/$/;"	m	struct:Vdbe	typeref:typename:Mem *	file:
aXformType	sqlite/sqlite3.c	/^} aXformType[] = {$/;"	v	typeref:typename:const struct __anon76f104fc1c08[]
accError	sqlite/sqlite3.c	/^  u8   accError;       \/* STRACCUM_NOMEM or STRACCUM_TOOBIG *\/$/;"	m	struct:StrAccum	typeref:typename:u8	file:
access	sqlite/shell.c	/^#  define access(/;"	d	file:
active_txn_	include/logging/log_recovery.h	/^  std::unordered_map<txn_id_t, lsn_t> active_txn_;$/;"	m	class:cmudb::LogRecovery	typeref:typename:std::unordered_map<txn_id_t,lsn_t>
actualWidth	sqlite/shell.c	/^  int actualWidth[100];  \/* Actual width of each column *\/$/;"	m	struct:ShellState	typeref:typename:int[100]	file:
addColOffset	sqlite/sqlite3.c	/^  int addColOffset;    \/* Offset in CREATE TABLE stmt to add a new column *\/$/;"	m	struct:Table	typeref:typename:int	file:
addrCrTab	sqlite/sqlite3.c	/^  int addrCrTab;       \/* Address of OP_CreateTable opcode on CREATE TABLE *\/$/;"	m	struct:Parse	typeref:typename:int	file:
addrExplain	sqlite/sqlite3.c	/^  int addrExplain;                \/* OP_Explain for loop *\/$/;"	m	struct:ScanStatus	typeref:typename:int	file:
addrFillSub	sqlite/sqlite3.c	/^    int addrFillSub;  \/* Address of subroutine to manifest a subquery *\/$/;"	m	struct:SrcList::SrcList_item	typeref:typename:int	file:
addrLoop	sqlite/sqlite3.c	/^  int addrLoop;                   \/* Address of "loops" counter *\/$/;"	m	struct:ScanStatus	typeref:typename:int	file:
addrOpenEphm	sqlite/sqlite3.c	/^  int addrOpenEphm[2];   \/* OP_OpenEphem opcodes related to this select *\/$/;"	m	struct:Select	typeref:typename:int[2]	file:
addrVisit	sqlite/sqlite3.c	/^  int addrVisit;                  \/* Address of "rows visited" counter *\/$/;"	m	struct:ScanStatus	typeref:typename:int	file:
adjustStats	sqlite/sqlite3.c	/^static void adjustStats(int iSize, int increment){$/;"	f	typeref:typename:void	file:
affinity	sqlite/sqlite3.c	/^  char affinity;         \/* The affinity of the column or 0 if not a column *\/$/;"	m	struct:Expr	typeref:typename:char	file:
affinity	sqlite/sqlite3.c	/^  char affinity;   \/* One of the SQLITE_AFF_... values *\/$/;"	m	struct:Column	typeref:typename:char	file:
aggregate_context	include/sqlite/sqlite3ext.h	/^  void * (*aggregate_context)(sqlite3_context*,int nBytes);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void * (*)(sqlite3_context *,int nBytes)
aggregate_count	include/sqlite/sqlite3ext.h	/^  int  (*aggregate_count)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_context *)
ai	sqlite/sqlite3.c	/^    int *ai;               \/* Used when p4type is P4_INTARRAY *\/$/;"	m	union:VdbeOp::p4union	typeref:typename:int *	file:
aiCol	sqlite/sqlite3.c	/^    int *aiCol;                               \/* array of column indexes *\/$/;"	m	union:Walker::__anon76f104fc1a0a	typeref:typename:int *	file:
aiColumn	sqlite/sqlite3.c	/^  i16 *aiColumn;           \/* Which columns are used by this index.  1st is 0 *\/$/;"	m	struct:Index	typeref:typename:i16 *	file:
aiFreelist	sqlite/sqlite3.c	/^  int aiFreelist[LOGMAX+1];$/;"	m	struct:Mem5Global	typeref:typename:int[]	file:
aiHash	sqlite/sqlite3.c	/^  u32 aiHash[N_HASH];        \/* For sizes MX_SMALL+1 and larger *\/$/;"	m	struct:Mem3Global	typeref:typename:u32[]	file:
aiIndent	sqlite/shell.c	/^  int *aiIndent;         \/* Array of indents used in MODE_Explain *\/$/;"	m	struct:ShellState	typeref:typename:int *	file:
aiRowEst	sqlite/sqlite3.c	/^  tRowcnt *aiRowEst;       \/* Non-logarithmic stat1 data for this index *\/$/;"	m	struct:Index	typeref:typename:tRowcnt *	file:
aiRowLogEst	sqlite/sqlite3.c	/^  LogEst *aiRowLogEst;     \/* From ANALYZE: Est. rows selected by each column *\/$/;"	m	struct:Index	typeref:typename:LogEst *	file:
aiSmall	sqlite/sqlite3.c	/^  u32 aiSmall[MX_SMALL-1];   \/* For sizes 2 through MX_SMALL, inclusive *\/$/;"	m	struct:Mem3Global	typeref:typename:u32[]	file:
alarmBusy	sqlite/sqlite3.c	/^  int alarmBusy;$/;"	m	struct:Mem3Global	typeref:typename:int	file:
allocated_	include/table/tuple.h	/^  bool allocated_; \/\/ is allocated?$/;"	m	class:cmudb::Tuple	typeref:typename:bool
anDLt	sqlite/sqlite3.c	/^  tRowcnt *anDLt;   \/* Est. number of distinct keys less than this sample *\/$/;"	m	struct:IndexSample	typeref:typename:tRowcnt *	file:
anEq	sqlite/sqlite3.c	/^  tRowcnt *anEq;    \/* Est. number of rows where the key equals this sample *\/$/;"	m	struct:IndexSample	typeref:typename:tRowcnt *	file:
anExec	sqlite/sqlite3.c	/^  i64 *anExec;            \/* Event counters from parent frame *\/$/;"	m	struct:VdbeFrame	typeref:typename:i64 *	file:
anExec	sqlite/sqlite3.c	/^  i64 *anExec;            \/* Number of times each op has been executed *\/$/;"	m	struct:Vdbe	typeref:typename:i64 *	file:
anLt	sqlite/sqlite3.c	/^  tRowcnt *anLt;    \/* Est. number of rows where key is less than this sample *\/$/;"	m	struct:IndexSample	typeref:typename:tRowcnt *	file:
anQueue	include/sqlite/sqlite3.h	/^unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:unsigned int *
anQueue	sqlite/sqlite3.c	/^  unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:unsigned int *	file:
anStat	sqlite/sqlite3.c	/^  int anStat[3];          \/* 0: hits.  1: size misses.  2: full misses *\/$/;"	m	struct:Lookaside	typeref:typename:int[3]	file:
apArg	sqlite/sqlite3.c	/^  Mem **apArg;            \/* Arguments to currently executing user function *\/$/;"	m	struct:Vdbe	typeref:typename:Mem **	file:
apArg	sqlite/sqlite3.c	/^  sqlite3_value **apArg;   \/* The argument values *\/$/;"	m	struct:PrintfArguments	typeref:typename:sqlite3_value **	file:
apCsr	sqlite/sqlite3.c	/^  VdbeCursor **apCsr;     \/* Array of Vdbe cursors for parent frame *\/$/;"	m	struct:VdbeFrame	typeref:typename:VdbeCursor **	file:
apCsr	sqlite/sqlite3.c	/^  VdbeCursor **apCsr;     \/* One element of this array for each open cursor *\/$/;"	m	struct:Vdbe	typeref:typename:VdbeCursor **	file:
apSqlParam	include/sqlite/sqlite3.h	/^sqlite3_value **apSqlParam;       \/* Original SQL values of parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_value **
apSqlParam	sqlite/sqlite3.c	/^  sqlite3_value **apSqlParam;       \/* Original SQL values of parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_value **	file:
apTrigger	sqlite/sqlite3.c	/^  Trigger *apTrigger[2];\/* Triggers for aAction[] actions *\/$/;"	m	struct:FKey	typeref:typename:Trigger * [2]	file:
apVtabLock	sqlite/sqlite3.c	/^  Table **apVtabLock;       \/* Pointer to virtual tables needing locking *\/$/;"	m	struct:Parse	typeref:typename:Table **	file:
appendText	sqlite/shell.c	/^static void appendText(ShellText *p, char const *zAppend, char quote){$/;"	f	typeref:typename:void	file:
argc	sqlite/sqlite3.c	/^  u8 argc;                \/* Number of arguments *\/$/;"	m	struct:sqlite3_context	typeref:typename:u8	file:
argv	sqlite/sqlite3.c	/^  sqlite3_value *argv[1]; \/* Argument set *\/$/;"	m	struct:sqlite3_context	typeref:typename:sqlite3_value * [1]	file:
argvIndex	include/sqlite/sqlite3.h	/^int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	typeref:typename:int
argvIndex	sqlite/sqlite3.c	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	typeref:typename:int	file:
array	include/page/b_plus_tree_internal_page.h	/^  MappingType array[0];$/;"	m	class:cmudb::BPlusTreeInternalPage	typeref:typename:MappingType[0]
array	include/page/b_plus_tree_leaf_page.h	/^  MappingType array[0];$/;"	m	class:cmudb::BPlusTreeLeafPage	typeref:typename:MappingType[0]
ascii_read_one_field	sqlite/shell.c	/^static char *SQLITE_CDECL ascii_read_one_field(ImportCtx *p){$/;"	f	typeref:typename:char * SQLITE_CDECL	file:
auth	sqlite/sqlite3.c	/^  sqlite3_userauth auth;        \/* User authentication information *\/$/;"	m	struct:sqlite3	typeref:typename:sqlite3_userauth	file:
authLevel	sqlite/sqlite3.c	/^  u8 authLevel;                 \/* Current authentication level *\/$/;"	m	struct:sqlite3_userauth	typeref:typename:u8	file:
autoCommit	sqlite/sqlite3.c	/^  u8 autoCommit;                \/* The auto-commit flag. *\/$/;"	m	struct:sqlite3	typeref:typename:u8	file:
autoEQP	sqlite/shell.c	/^  int autoEQP;           \/* Run EXPLAIN QUERY PLAN prior to seach SQL stmt *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
autoExplain	sqlite/shell.c	/^  int autoExplain;       \/* Automatically turn on .explain mode *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
auto_extension	include/sqlite/sqlite3ext.h	/^  int (*auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(void (*)(void))
azColl	sqlite/sqlite3.c	/^  const char **azColl;     \/* Array of collation sequence names for index *\/$/;"	m	struct:Index	typeref:typename:const char **	file:
azFilter	sqlite/shell.c	/^  char **azFilter;         \/* Array of xFilter rejection GLOB patterns *\/$/;"	m	struct:OpenSession	typeref:typename:char **	file:
azModuleArg	sqlite/sqlite3.c	/^  char **azModuleArg;  \/* 0: module 1: schema 2: vtab name 3...: args *\/$/;"	m	struct:Table	typeref:typename:char **	file:
b	include/sqlite/sqlite3.h	/^const unsigned char *b;$/;"	m	struct:Fts5PhraseIter	typeref:typename:const unsigned char *
b	sqlite/sqlite3.c	/^  const unsigned char *b;$/;"	m	struct:Fts5PhraseIter	typeref:typename:const unsigned char *	file:
bBenignMalloc	sqlite/sqlite3.c	/^  u8 bBenignMalloc;             \/* Do not require OOMs if true *\/$/;"	m	struct:sqlite3	typeref:typename:u8	file:
bConstraint	sqlite/sqlite3.c	/^  u8 bConstraint;           \/* True if constraints are supported *\/$/;"	m	struct:VTable	typeref:typename:u8	file:
bCoreMutex	sqlite/sqlite3.c	/^  int bCoreMutex;                   \/* True to enable core mutexing *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
bDisable	sqlite/sqlite3.c	/^  u32 bDisable;           \/* Only operate the lookaside when zero *\/$/;"	m	struct:Lookaside	typeref:typename:u32	file:
bFullMutex	sqlite/sqlite3.c	/^  int bFullMutex;                   \/* True to enable full mutexing *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
bIsReader	sqlite/sqlite3.c	/^  bft bIsReader:1;        \/* True for statements that read *\/$/;"	m	struct:Vdbe	typeref:typename:bft:1	file:
bLine	sqlite/sqlite3.c	/^  u8  bLine[100];         \/* Draw vertical in column i if bLine[i] is true *\/$/;"	m	struct:TreeView	typeref:typename:u8[100]	file:
bLocaltimeFault	sqlite/sqlite3.c	/^  int bLocaltimeFault;              \/* True to fail localtime() calls *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
bMalloced	sqlite/sqlite3.c	/^  u8 bMalloced;           \/* True if pStart obtained from sqlite3_malloc() *\/$/;"	m	struct:Lookaside	typeref:typename:u8	file:
bMemstat	sqlite/sqlite3.c	/^  int bMemstat;                     \/* True to enable memory status *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
bNotFirst	sqlite/shell.c	/^  int bNotFirst;      \/* True if one or more bytes already read *\/$/;"	m	struct:ImportCtx	typeref:typename:int	file:
bOpenUri	sqlite/sqlite3.c	/^  int bOpenUri;                     \/* True to interpret filenames as URIs *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
bSpanIsTab	sqlite/sqlite3.c	/^    unsigned bSpanIsTab :1; \/* zSpan holds DB.TABLE.COLUMN *\/$/;"	m	struct:ExprList::ExprList_item	typeref:typename:unsigned:1	file:
bSyncSet	sqlite/sqlite3.c	/^  u8 bSyncSet;         \/* True if "PRAGMA synchronous=N" has been run *\/$/;"	m	struct:Db	typeref:typename:u8	file:
bUnordered	sqlite/sqlite3.c	/^  unsigned bUnordered:1;   \/* Use this index for == or IN queries only *\/$/;"	m	struct:Index	typeref:typename:unsigned:1	file:
bUseCis	sqlite/sqlite3.c	/^  int bUseCis;                      \/* Use covering indices for full-scans *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
bVarOnly	sqlite/sqlite3.c	/^  int bVarOnly;       \/* Check for variable references only *\/$/;"	m	struct:DbFixer	typeref:typename:int	file:
backtrace	sqlite/sqlite3.c	/^# define backtrace(/;"	d	file:
backtrace_symbols_fd	sqlite/sqlite3.c	/^# define backtrace_symbols_fd(/;"	d	file:
backup_finish	include/sqlite/sqlite3ext.h	/^  int (*backup_finish)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_backup *)
backup_init	include/sqlite/sqlite3ext.h	/^  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite3_backup * (*)(sqlite3 *,const char *,sqlite3 *,const char *)
backup_pagecount	include/sqlite/sqlite3ext.h	/^  int (*backup_pagecount)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_backup *)
backup_remaining	include/sqlite/sqlite3ext.h	/^  int (*backup_remaining)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_backup *)
backup_step	include/sqlite/sqlite3ext.h	/^  int (*backup_step)(sqlite3_backup*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_backup *,int)
bail_on_error	sqlite/shell.c	/^static int bail_on_error = 0;$/;"	v	typeref:typename:int	file:
base_	include/vtable/virtual_table.h	/^  sqlite3_vtab base_;$/;"	m	class:cmudb::VirtualTable	typeref:typename:sqlite3_vtab
base_	include/vtable/virtual_table.h	/^  sqlite3_vtab_cursor base_; \/* Base class - must be first *\/$/;"	m	class:cmudb::Cursor	typeref:typename:sqlite3_vtab_cursor
begin	include/vtable/virtual_table.h	/^  inline TableIterator begin() { return table_heap_->begin(GetTransaction()); }$/;"	f	class:cmudb::VirtualTable	typeref:typename:TableIterator
begin	table/table_heap.cpp	/^TableIterator TableHeap::begin(Transaction *txn) {$/;"	f	class:cmudb::TableHeap	typeref:typename:TableIterator
beginTimer	sqlite/shell.c	/^static void beginTimer(void){$/;"	f	typeref:typename:void	file:
bft	sqlite/sqlite3.c	/^typedef unsigned bft;  \/* Bit Field Type *\/$/;"	t	typeref:typename:unsigned	file:
bigint	include/type/value.h	/^    int64_t bigint;$/;"	m	union:cmudb::Value::Val	typeref:typename:int64_t
bind_blob	include/sqlite/sqlite3ext.h	/^  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int,const void *,int n,void (*)(void *))
bind_blob64	include/sqlite/sqlite3ext.h	/^  int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int,const void *,sqlite3_uint64,void (*)(void *))
bind_double	include/sqlite/sqlite3ext.h	/^  int  (*bind_double)(sqlite3_stmt*,int,double);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int,double)
bind_int	include/sqlite/sqlite3ext.h	/^  int  (*bind_int)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int,int)
bind_int64	include/sqlite/sqlite3ext.h	/^  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int,sqlite_int64)
bind_null	include/sqlite/sqlite3ext.h	/^  int  (*bind_null)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int)
bind_parameter_count	include/sqlite/sqlite3ext.h	/^  int  (*bind_parameter_count)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *)
bind_parameter_index	include/sqlite/sqlite3ext.h	/^  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,const char * zName)
bind_parameter_name	include/sqlite/sqlite3ext.h	/^  const char * (*bind_parameter_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const char * (*)(sqlite3_stmt *,int)
bind_text	include/sqlite/sqlite3ext.h	/^  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int,const char *,int n,void (*)(void *))
bind_text16	include/sqlite/sqlite3ext.h	/^  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int,const void *,int,void (*)(void *))
bind_text64	include/sqlite/sqlite3ext.h	/^  int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int,const char *,sqlite3_uint64,void (*)(void *),unsigned char)
bind_value	include/sqlite/sqlite3ext.h	/^  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int,const sqlite3_value *)
bind_zeroblob	include/sqlite/sqlite3ext.h	/^  int (*bind_zeroblob)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int,int)
bind_zeroblob64	include/sqlite/sqlite3ext.h	/^  int (*bind_zeroblob64)(sqlite3_stmt*, int, sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int,sqlite3_uint64)
blob_bytes	include/sqlite/sqlite3ext.h	/^  int (*blob_bytes)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_blob *)
blob_close	include/sqlite/sqlite3ext.h	/^  int (*blob_close)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_blob *)
blob_open	include/sqlite/sqlite3ext.h	/^  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *,const char *,const char *,sqlite3_int64,int,sqlite3_blob **)
blob_read	include/sqlite/sqlite3ext.h	/^  int (*blob_read)(sqlite3_blob*,void*,int,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_blob *,void *,int,int)
blob_reopen	include/sqlite/sqlite3ext.h	/^  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_blob *,sqlite3_int64)
blob_write	include/sqlite/sqlite3ext.h	/^  int (*blob_write)(sqlite3_blob*,const void*,int,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_blob *,const void *,int,int)
boolean	include/type/value.h	/^    int8_t boolean;$/;"	m	union:cmudb::Value::Val	typeref:typename:int8_t
booleanValue	sqlite/shell.c	/^static int booleanValue(const char *zArg){$/;"	f	typeref:typename:int	file:
btreeMask	sqlite/sqlite3.c	/^  yDbMask btreeMask;      \/* Bitmask of db->aDb[] entries referenced *\/$/;"	m	struct:Vdbe	typeref:typename:yDbMask	file:
bucket	include/hash/extendible_hash.h	/^    bucket(int depth) : local_depth_(depth) {}$/;"	f	struct:cmudb::ExtendibleHash::bucket
bucket	include/hash/extendible_hash.h	/^  struct bucket {$/;"	s	class:cmudb::ExtendibleHash
bucket_nums_	include/hash/extendible_hash.h	/^  size_t bucket_nums_;$/;"	m	class:cmudb::ExtendibleHash	typeref:typename:size_t
bucket_ptr	hash/extendible_hash.cpp	/^  auto bucket_ptr = buckets_[index];$/;"	v	namespace:cmudb	typeref:typename:auto
buckets_	include/hash/extendible_hash.h	/^  std::vector<std::shared_ptr<bucket>> buckets_;$/;"	m	class:cmudb::ExtendibleHash	typeref:typename:std::vector<std::shared_ptr<bucket>>
buffer	vtable/virtual_table.cpp	/^  struct stat buffer;$/;"	v	namespace:cmudb	typeref:struct:stat
buffer_pool_manager_	include/index/b_plus_tree.h	/^  BufferPoolManager *buffer_pool_manager_;$/;"	m	class:cmudb::BPlusTree	typeref:typename:BufferPoolManager *
buffer_pool_manager_	include/logging/log_recovery.h	/^  BufferPoolManager *buffer_pool_manager_;$/;"	m	class:cmudb::LogRecovery	typeref:typename:BufferPoolManager *
buffer_pool_manager_	include/table/table_heap.h	/^  BufferPoolManager *buffer_pool_manager_;$/;"	m	class:cmudb::TableHeap	typeref:typename:BufferPoolManager *
buffer_pool_manager_	include/vtable/virtual_table.h	/^  BufferPoolManager *buffer_pool_manager_;$/;"	m	class:cmudb::StorageEngine	typeref:typename:BufferPoolManager *
buffer_used	disk/disk_manager.cpp	/^static char *buffer_used = nullptr;$/;"	v	namespace:cmudb	typeref:typename:char *	file:
busy	sqlite/sqlite3.c	/^    u8 busy;                    \/* TRUE if currently initializing *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	typeref:typename:u8	file:
busyHandler	sqlite/sqlite3.c	/^  BusyHandler busyHandler;      \/* Busy callback *\/$/;"	m	struct:sqlite3	typeref:typename:BusyHandler	file:
busyTimeout	sqlite/sqlite3.c	/^  int busyTimeout;              \/* Busy handler timeout, in msec *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
busy_handler	include/sqlite/sqlite3ext.h	/^  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,int (*)(void *,int),void *)
busy_timeout	include/sqlite/sqlite3ext.h	/^  int  (*busy_timeout)(sqlite3*,int ms);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,int ms)
cColSep	sqlite/shell.c	/^  int cColSep;        \/* The column separator character.  (Usually ",") *\/$/;"	m	struct:ImportCtx	typeref:typename:int	file:
cMode	sqlite/shell.c	/^  int cMode;             \/* temporary output mode for the current query *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
cRowSep	sqlite/shell.c	/^  int cRowSep;        \/* The row separator character.  (Usually "\\n") *\/$/;"	m	struct:ImportCtx	typeref:typename:int	file:
cTerm	sqlite/shell.c	/^  int cTerm;          \/* Character that terminated the most recent field *\/$/;"	m	struct:ImportCtx	typeref:typename:int	file:
cacheCtr	sqlite/sqlite3.c	/^  u32 cacheCtr;           \/* VdbeCursor row cache generation counter *\/$/;"	m	struct:Vdbe	typeref:typename:u32	file:
cacheStatus	sqlite/sqlite3.c	/^  u32 cacheStatus;        \/* Cache is valid if this matches Vdbe.cacheCtr *\/$/;"	m	struct:VdbeCursor	typeref:typename:u32	file:
cache_size	sqlite/sqlite3.c	/^  int cache_size;      \/* Number of pages to use in the cache *\/$/;"	m	struct:Schema	typeref:typename:int	file:
callback	sqlite/shell.c	/^static int callback(void *pArg, int nArg, char **azArg, char **azCol){$/;"	f	typeref:typename:int	file:
cancel_auto_extension	include/sqlite/sqlite3ext.h	/^  int (*cancel_auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(void (*)(void))
captureOutputCallback	sqlite/shell.c	/^static int captureOutputCallback(void *pArg, int nArg, char **azArg, char **az){$/;"	f	typeref:typename:int	file:
cdateFunc	sqlite/sqlite3.c	/^static void cdateFunc($/;"	f	typeref:typename:void	file:
chain	sqlite/sqlite3.c	/^    HashElem *chain;           \/* Pointer to first entry with this hash *\/$/;"	m	struct:Hash::_ht	typeref:typename:HashElem *	file:
changeCntOn	sqlite/sqlite3.c	/^  bft changeCntOn:1;      \/* True to update the change-counter *\/$/;"	m	struct:Vdbe	typeref:typename:bft:1	file:
changes	include/sqlite/sqlite3ext.h	/^  int  (*changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *)
checkSchema	sqlite/sqlite3.c	/^  u8 checkSchema;      \/* Causes schema cookie check after an error *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
ckBase	sqlite/sqlite3.c	/^  int ckBase;          \/* Base register of data during check constraints *\/$/;"	m	struct:Parse	typeref:typename:int	file:
clearYMD_HMS_TZ	sqlite/sqlite3.c	/^static void clearYMD_HMS_TZ(DateTime *p){$/;"	f	typeref:typename:void	file:
clear_bindings	include/sqlite/sqlite3ext.h	/^  int (*clear_bindings)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *)
close	include/sqlite/sqlite3ext.h	/^  int  (*close)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *)
close_v2	include/sqlite/sqlite3ext.h	/^  int (*close_v2)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *)
cmdline_option_value	sqlite/shell.c	/^static char *cmdline_option_value(int argc, char **argv, int i){$/;"	f	typeref:typename:char *	file:
cmudb	buffer/buffer_pool_manager.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	buffer/lru_replacer.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	catalog/column.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	catalog/schema.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	common/config.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	concurrency/lock_manager.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	concurrency/transaction_manager.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	disk/disk_manager.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	hash/extendible_hash.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	include/buffer/buffer_pool_manager.h	/^namespace cmudb {$/;"	n
cmudb	include/buffer/lru_replacer.h	/^namespace cmudb {$/;"	n
cmudb	include/buffer/replacer.h	/^namespace cmudb {$/;"	n
cmudb	include/catalog/column.h	/^namespace cmudb {$/;"	n
cmudb	include/catalog/schema.h	/^namespace cmudb {$/;"	n
cmudb	include/common/config.h	/^namespace cmudb {$/;"	n
cmudb	include/common/exception.h	/^namespace cmudb {$/;"	n
cmudb	include/common/logger.h	/^namespace cmudb {$/;"	n
cmudb	include/common/rid.h	/^namespace cmudb {$/;"	n
cmudb	include/common/rwmutex.h	/^namespace cmudb {$/;"	n
cmudb	include/common/string_utility.h	/^namespace cmudb {$/;"	n
cmudb	include/concurrency/lock_manager.h	/^namespace cmudb {$/;"	n
cmudb	include/concurrency/transaction.h	/^namespace cmudb {$/;"	n
cmudb	include/concurrency/transaction_manager.h	/^namespace cmudb {$/;"	n
cmudb	include/disk/disk_manager.h	/^namespace cmudb {$/;"	n
cmudb	include/hash/extendible_hash.h	/^namespace cmudb {$/;"	n
cmudb	include/hash/hash_table.h	/^namespace cmudb {$/;"	n
cmudb	include/index/b_plus_tree.h	/^namespace cmudb {$/;"	n
cmudb	include/index/b_plus_tree_index.h	/^namespace cmudb {$/;"	n
cmudb	include/index/generic_key.h	/^namespace cmudb {$/;"	n
cmudb	include/index/index.h	/^namespace cmudb {$/;"	n
cmudb	include/index/index_iterator.h	/^namespace cmudb {$/;"	n
cmudb	include/logging/log_manager.h	/^namespace cmudb {$/;"	n
cmudb	include/logging/log_record.h	/^namespace cmudb {$/;"	n
cmudb	include/logging/log_recovery.h	/^namespace cmudb {$/;"	n
cmudb	include/page/b_plus_tree_internal_page.h	/^namespace cmudb {$/;"	n
cmudb	include/page/b_plus_tree_leaf_page.h	/^namespace cmudb {$/;"	n
cmudb	include/page/b_plus_tree_page.h	/^namespace cmudb {$/;"	n
cmudb	include/page/header_page.h	/^namespace cmudb {$/;"	n
cmudb	include/page/page.h	/^namespace cmudb {$/;"	n
cmudb	include/page/table_page.h	/^namespace cmudb {$/;"	n
cmudb	include/table/table_heap.h	/^namespace cmudb {$/;"	n
cmudb	include/table/table_iterator.h	/^namespace cmudb {$/;"	n
cmudb	include/table/tuple.h	/^namespace cmudb {$/;"	n
cmudb	include/type/bigint_type.h	/^namespace cmudb {$/;"	n
cmudb	include/type/boolean_type.h	/^namespace cmudb {$/;"	n
cmudb	include/type/decimal_type.h	/^namespace cmudb {$/;"	n
cmudb	include/type/integer_parent_type.h	/^namespace cmudb {$/;"	n
cmudb	include/type/integer_type.h	/^namespace cmudb {$/;"	n
cmudb	include/type/limits.h	/^namespace cmudb {$/;"	n
cmudb	include/type/numeric_type.h	/^namespace cmudb {$/;"	n
cmudb	include/type/smallint_type.h	/^namespace cmudb {$/;"	n
cmudb	include/type/tinyint_type.h	/^namespace cmudb {$/;"	n
cmudb	include/type/type.h	/^namespace cmudb {$/;"	n
cmudb	include/type/type_id.h	/^namespace cmudb {$/;"	n
cmudb	include/type/type_util.h	/^namespace cmudb {$/;"	n
cmudb	include/type/value.h	/^namespace cmudb {$/;"	n
cmudb	include/type/varlen_type.h	/^namespace cmudb {$/;"	n
cmudb	include/vtable/virtual_table.h	/^namespace cmudb {$/;"	n
cmudb	index/b_plus_tree.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	index/b_plus_tree_index.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	index/index_iterator.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	logging/log_manager.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	logging/log_recovery.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	page/b_plus_tree_internal_page.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	page/b_plus_tree_leaf_page.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	page/b_plus_tree_page.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	page/header_page.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	page/table_page.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	table/table_heap.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	table/table_iterator.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	table/tuple.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	type/bigint_type.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	type/boolean_type.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	type/decimal_type.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	type/integer_parent_type.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	type/integer_type.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	type/smallint_type.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	type/tinyint_type.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	type/type.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	type/value.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	type/varlen_type.cpp	/^namespace cmudb {$/;"	n	file:
cmudb	vtable/virtual_table.cpp	/^namespace cmudb {$/;"	n	file:
cnt	sqlite/shell.c	/^  int cnt;               \/* Number of records displayed so far *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
cnt	sqlite/sqlite3.c	/^  int cnt;    \/* Number of entries without a matching leave *\/$/;"	m	struct:sqlite3_debug_mutex	typeref:typename:int	file:
cnt	sqlite/sqlite3.c	/^  u32 cnt;                 \/* Number of times this instruction was executed *\/$/;"	m	struct:VdbeOp	typeref:typename:u32	file:
colFlags	sqlite/sqlite3.c	/^  u8 colFlags;     \/* Boolean properties.  See COLFLAG_ defines below *\/$/;"	m	struct:Column	typeref:typename:u8	file:
colNamesSet	sqlite/sqlite3.c	/^  u8 colNamesSet;      \/* TRUE after OP_ColumnName has been issued to pVdbe *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
colSeparator	sqlite/shell.c	/^  char colSeparator[20]; \/* Column separator character for several modes *\/$/;"	m	struct:ShellState	typeref:typename:char[20]	file:
colUsed	include/sqlite/sqlite3.h	/^sqlite3_uint64 colUsed;    \/* Input: Mask of columns used by statement *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:sqlite3_uint64
colUsed	sqlite/sqlite3.c	/^    Bitmask colUsed;  \/* Bit N (1<<N) set if column N of pTab is used *\/$/;"	m	struct:SrcList::SrcList_item	typeref:typename:Bitmask	file:
colUsed	sqlite/sqlite3.c	/^  sqlite3_uint64 colUsed;    \/* Input: Mask of columns used by statement *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:sqlite3_uint64	file:
colWidth	sqlite/shell.c	/^  int colWidth[100];     \/* Requested width of each column when in column mode*\/$/;"	m	struct:ShellState	typeref:typename:int[100]	file:
colWidth	sqlite/shell.c	/^  int colWidth[100];  \/* Column widths prior to ".explain on" *\/$/;"	m	struct:SavedModeInfo	typeref:typename:int[100]	file:
collation_needed	include/sqlite/sqlite3ext.h	/^  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,void *,void (*)(void *,sqlite3 *,int eTextRep,const char *))
collation_needed16	include/sqlite/sqlite3ext.h	/^  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,void *,void (*)(void *,sqlite3 *,int eTextRep,const void *))
column_blob	include/sqlite/sqlite3ext.h	/^  const void * (*column_blob)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const void * (*)(sqlite3_stmt *,int iCol)
column_bytes	include/sqlite/sqlite3ext.h	/^  int  (*column_bytes)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int iCol)
column_bytes16	include/sqlite/sqlite3ext.h	/^  int  (*column_bytes16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int iCol)
column_count	include/sqlite/sqlite3ext.h	/^  int  (*column_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt * pStmt)
column_database_name	include/sqlite/sqlite3ext.h	/^  const char * (*column_database_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const char * (*)(sqlite3_stmt *,int)
column_database_name16	include/sqlite/sqlite3ext.h	/^  const void * (*column_database_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const void * (*)(sqlite3_stmt *,int)
column_decltype	include/sqlite/sqlite3ext.h	/^  const char * (*column_decltype)(sqlite3_stmt*,int i);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const char * (*)(sqlite3_stmt *,int i)
column_decltype16	include/sqlite/sqlite3ext.h	/^  const void * (*column_decltype16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const void * (*)(sqlite3_stmt *,int)
column_double	include/sqlite/sqlite3ext.h	/^  double  (*column_double)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	typeref:typename:double (*)(sqlite3_stmt *,int iCol)
column_int	include/sqlite/sqlite3ext.h	/^  int  (*column_int)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int iCol)
column_int64	include/sqlite/sqlite3ext.h	/^  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite_int64 (*)(sqlite3_stmt *,int iCol)
column_name	include/catalog/column.h	/^  std::string column_name;$/;"	m	class:cmudb::Column	typeref:typename:std::string
column_name	include/sqlite/sqlite3ext.h	/^  const char * (*column_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const char * (*)(sqlite3_stmt *,int)
column_name16	include/sqlite/sqlite3ext.h	/^  const void * (*column_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const void * (*)(sqlite3_stmt *,int)
column_offset	include/catalog/column.h	/^  int32_t column_offset = -1;$/;"	m	class:cmudb::Column	typeref:typename:int32_t
column_origin_name	include/sqlite/sqlite3ext.h	/^  const char * (*column_origin_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const char * (*)(sqlite3_stmt *,int)
column_origin_name16	include/sqlite/sqlite3ext.h	/^  const void * (*column_origin_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const void * (*)(sqlite3_stmt *,int)
column_table_name	include/sqlite/sqlite3ext.h	/^  const char * (*column_table_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const char * (*)(sqlite3_stmt *,int)
column_table_name16	include/sqlite/sqlite3ext.h	/^  const void * (*column_table_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const void * (*)(sqlite3_stmt *,int)
column_text	include/sqlite/sqlite3ext.h	/^  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const unsigned char * (*)(sqlite3_stmt *,int iCol)
column_text16	include/sqlite/sqlite3ext.h	/^  const void * (*column_text16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const void * (*)(sqlite3_stmt *,int iCol)
column_type	include/catalog/column.h	/^  TypeId column_type; \/\/  = TypeId::INVALID;$/;"	m	class:cmudb::Column	typeref:typename:TypeId
column_type	include/sqlite/sqlite3ext.h	/^  int  (*column_type)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int iCol)
column_value	include/sqlite/sqlite3ext.h	/^  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite3_value * (*)(sqlite3_stmt *,int iCol)
columns	include/catalog/schema.h	/^  std::vector<Column> columns;$/;"	m	class:cmudb::Schema	typeref:typename:std::vector<Column>
commit_hook	include/sqlite/sqlite3ext.h	/^  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void * (*)(sqlite3 *,int (*)(void *),void *)
comparator_	include/index/b_plus_tree.h	/^  KeyComparator comparator_;$/;"	m	class:cmudb::BPlusTree	typeref:typename:KeyComparator
comparator_	include/index/b_plus_tree_index.h	/^  KeyComparator comparator_;$/;"	m	class:cmudb::BPlusTreeIndex	typeref:typename:KeyComparator
compileoption_get	include/sqlite/sqlite3ext.h	/^  const char *(*compileoption_get)(int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const char * (*)(int)
compileoption_used	include/sqlite/sqlite3ext.h	/^  int (*compileoption_used)(const char*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(const char *)
complete	include/sqlite/sqlite3ext.h	/^  int  (*complete)(const char*sql);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(const char * sql)
complete16	include/sqlite/sqlite3ext.h	/^  int  (*complete16)(const void*sql);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(const void * sql)
computeHMS	sqlite/sqlite3.c	/^static void computeHMS(DateTime *p){$/;"	f	typeref:typename:void	file:
computeJD	sqlite/sqlite3.c	/^static void computeJD(DateTime *p){$/;"	f	typeref:typename:void	file:
computeYMD	sqlite/sqlite3.c	/^static void computeYMD(DateTime *p){$/;"	f	typeref:typename:void	file:
computeYMD_HMS	sqlite/sqlite3.c	/^static void computeYMD_HMS(DateTime *p){$/;"	f	typeref:typename:void	file:
cond_t	include/common/rwmutex.h	/^  typedef std::condition_variable cond_t;$/;"	t	class:cmudb::RWMutex	typeref:typename:std::condition_variable
const_varlen	include/type/value.h	/^    const char *const_varlen;$/;"	m	union:cmudb::Value::Val	typeref:typename:const char *
constraintName	sqlite/sqlite3.c	/^  Token constraintName;\/* Name of the constraint currently being parsed *\/$/;"	m	struct:Parse	typeref:typename:Token	file:
container_	include/index/b_plus_tree_index.h	/^  BPlusTree<KeyType, ValueType, KeyComparator> container_;$/;"	m	class:cmudb::BPlusTreeIndex	typeref:typename:BPlusTree<KeyType,ValueType,KeyComparator>
context_db_handle	include/sqlite/sqlite3ext.h	/^  sqlite3 *(*context_db_handle)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite3 * (*)(sqlite3_context *)
continuePrompt	sqlite/shell.c	/^static char continuePrompt[20]; \/* Continuation prompt. default: "   ...> " *\/$/;"	v	typeref:typename:char[20]	file:
cookieMask	sqlite/sqlite3.c	/^  yDbMask cookieMask;  \/* Bitmask of schema verified databases *\/$/;"	m	struct:Parse	typeref:typename:yDbMask	file:
costMult	sqlite/sqlite3.c	/^  LogEst costMult;     \/* Cost multiplier for using this table *\/$/;"	m	struct:Table	typeref:typename:LogEst	file:
count	sqlite/sqlite3.c	/^    int count;                 \/* Number of entries with this hash *\/$/;"	m	struct:Hash::_ht	typeref:typename:int	file:
count	sqlite/sqlite3.c	/^  unsigned int count;       \/* Number of entries in this table *\/$/;"	m	struct:Hash	typeref:typename:unsigned int	file:
createSelftestTable	sqlite/shell.c	/^static void createSelftestTable(ShellState *p){$/;"	f	typeref:typename:void	file:
create_collation	include/sqlite/sqlite3ext.h	/^  int  (*create_collation)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *,int,void *,int (*)(void *,int,const void *,int,const void *))
create_collation16	include/sqlite/sqlite3ext.h	/^  int  (*create_collation16)(sqlite3*,const void*,int,void*,$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const void *,int,void *,int (*)(void *,int,const void *,int,const void *))
create_collation_v2	include/sqlite/sqlite3ext.h	/^  int (*create_collation_v2)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *,int,void *,int (*)(void *,int,const void *,int,const void *),void (*)(void *))
create_function	include/sqlite/sqlite3ext.h	/^  int  (*create_function)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *,int,int,void *,void (* xFunc)(sqlite3_context *,int,sqlite3_value **),void (* xStep)(sqlite3_context *,int,sqlite3_value **),void (* xFinal)(sqlite3_context *))
create_function16	include/sqlite/sqlite3ext.h	/^  int  (*create_function16)(sqlite3*,const void*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const void *,int,int,void *,void (* xFunc)(sqlite3_context *,int,sqlite3_value **),void (* xStep)(sqlite3_context *,int,sqlite3_value **),void (* xFinal)(sqlite3_context *))
create_function_v2	include/sqlite/sqlite3ext.h	/^  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *,int,int,void *,void (* xFunc)(sqlite3_context *,int,sqlite3_value **),void (* xStep)(sqlite3_context *,int,sqlite3_value **),void (* xFinal)(sqlite3_context *),void (* xDestroy)(void *))
create_module	include/sqlite/sqlite3ext.h	/^  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *,const sqlite3_module *,void *)
create_module_v2	include/sqlite/sqlite3ext.h	/^  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *,const sqlite3_module *,void *,void (* xDestroy)(void *))
csv_read_one_field	sqlite/shell.c	/^static char *SQLITE_CDECL csv_read_one_field(ImportCtx *p){$/;"	f	typeref:typename:char * SQLITE_CDECL	file:
ctimeFunc	sqlite/sqlite3.c	/^static void ctimeFunc($/;"	f	typeref:typename:void	file:
ctimestampFunc	sqlite/sqlite3.c	/^static void ctimestampFunc($/;"	f	typeref:typename:void	file:
ctrlCode	sqlite/shell.c	/^      int ctrlCode;            \/* Integer code for that option *\/$/;"	m	struct:do_meta_command::__anonc53fbaef0708	typeref:typename:int	file:
currentCount	sqlite/sqlite3.c	/^  u32 currentCount;   \/* Current number of distinct checkouts *\/$/;"	m	struct:Mem5Global	typeref:typename:u32	file:
currentOut	sqlite/sqlite3.c	/^  u32 currentOut;     \/* Current checkout, including internal fragmentation *\/$/;"	m	struct:Mem5Global	typeref:typename:u32	file:
currentTimeFunc	sqlite/sqlite3.c	/^static void currentTimeFunc($/;"	f	typeref:typename:void	file:
cv_	include/logging/log_manager.h	/^  std::condition_variable cv_;$/;"	m	class:cmudb::LogManager	typeref:typename:std::condition_variable
cycles	sqlite/sqlite3.c	/^  u64 cycles;              \/* Total time spent executing this instruction *\/$/;"	m	struct:VdbeOp	typeref:typename:u64	file:
data	include/index/generic_key.h	/^  char data[KeySize];$/;"	m	class:cmudb::GenericKey	typeref:typename:char[]
data	sqlite/sqlite3.c	/^  void *data;                  \/* Data associated with this element *\/$/;"	m	struct:HashElem	typeref:typename:void *	file:
data_	include/page/page.h	/^  char data_[PAGE_SIZE]; \/\/ actual data$/;"	m	class:cmudb::Page	typeref:typename:char[]
data_	include/table/tuple.h	/^  char *data_;$/;"	m	class:cmudb::Tuple	typeref:typename:char *
data_count	include/sqlite/sqlite3ext.h	/^  int  (*data_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt * pStmt)
dateFunc	sqlite/sqlite3.c	/^static void dateFunc($/;"	f	typeref:typename:void	file:
datetimeError	sqlite/sqlite3.c	/^static void datetimeError(DateTime *p){$/;"	f	typeref:typename:void	file:
datetimeFunc	sqlite/sqlite3.c	/^static void datetimeFunc($/;"	f	typeref:typename:void	file:
db	sqlite/shell.c	/^  sqlite3 *db;           \/* The database *\/$/;"	m	struct:ShellState	typeref:typename:sqlite3 *	file:
db	sqlite/sqlite3.c	/^  sqlite3 *db;              \/* Database connection associated with this table *\/$/;"	m	struct:VTable	typeref:typename:sqlite3 *	file:
db	sqlite/sqlite3.c	/^  sqlite3 *db;            \/* The database connection that owns this statement *\/$/;"	m	struct:Vdbe	typeref:typename:sqlite3 *	file:
db	sqlite/sqlite3.c	/^  sqlite3 *db;         \/* Optional database for lookaside.  Can be NULL *\/$/;"	m	struct:StrAccum	typeref:typename:sqlite3 *	file:
db	sqlite/sqlite3.c	/^  sqlite3 *db;         \/* The main database structure *\/$/;"	m	struct:Parse	typeref:typename:sqlite3 *	file:
db	sqlite/sqlite3.c	/^  sqlite3 *db;        \/* The associated database connection *\/$/;"	m	struct:sqlite3_value	typeref:typename:sqlite3 *	file:
db	sqlite/sqlite3.c	/^  sqlite3 *db;        \/* The database being initialized *\/$/;"	m	struct:__anon76f104fc1908	typeref:typename:sqlite3 *	file:
db	sqlite/sqlite3.c	/^  sqlite3 *db;        \/* The database connection *\/$/;"	m	struct:KeyInfo	typeref:typename:sqlite3 *	file:
dbOptFlags	sqlite/sqlite3.c	/^  u16 dbOptFlags;               \/* Flags to enable\/disable optimizations *\/$/;"	m	struct:sqlite3	typeref:typename:u16	file:
db_cacheflush	include/sqlite/sqlite3ext.h	/^  int (*db_cacheflush)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *)
db_config	include/sqlite/sqlite3ext.h	/^  int (*db_config)(sqlite3*,int,...);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,int,...)
db_file_name	vtable/virtual_table.cpp	/^  std::string db_file_name = "vtable.db";$/;"	v	namespace:cmudb	typeref:typename:std::string
db_filename	include/sqlite/sqlite3ext.h	/^  const char *(*db_filename)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const char * (*)(sqlite3 *,const char *)
db_handle	include/sqlite/sqlite3ext.h	/^  sqlite3 * (*db_handle)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite3 * (*)(sqlite3_stmt *)
db_int	sqlite/shell.c	/^static int db_int(ShellState *p, const char *zSql){$/;"	f	typeref:typename:int	file:
db_io_	include/disk/disk_manager.h	/^  std::fstream db_io_;$/;"	m	class:cmudb::DiskManager	typeref:typename:std::fstream
db_mutex	include/sqlite/sqlite3ext.h	/^  sqlite3_mutex *(*db_mutex)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite3_mutex * (*)(sqlite3 *)
db_readonly	include/sqlite/sqlite3ext.h	/^  int (*db_readonly)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *)
db_release_memory	include/sqlite/sqlite3ext.h	/^  int (*db_release_memory)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *)
db_status	include/sqlite/sqlite3ext.h	/^  int (*db_status)(sqlite3*,int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,int,int *,int *,int)
debugMutexAlloc	sqlite/sqlite3.c	/^static sqlite3_mutex *debugMutexAlloc(int id){$/;"	f	typeref:typename:sqlite3_mutex *	file:
debugMutexEnd	sqlite/sqlite3.c	/^static int debugMutexEnd(void){ return SQLITE_OK; }$/;"	f	typeref:typename:int	file:
debugMutexEnter	sqlite/sqlite3.c	/^static void debugMutexEnter(sqlite3_mutex *pX){$/;"	f	typeref:typename:void	file:
debugMutexFree	sqlite/sqlite3.c	/^static void debugMutexFree(sqlite3_mutex *pX){$/;"	f	typeref:typename:void	file:
debugMutexHeld	sqlite/sqlite3.c	/^static int debugMutexHeld(sqlite3_mutex *pX){$/;"	f	typeref:typename:int	file:
debugMutexInit	sqlite/sqlite3.c	/^static int debugMutexInit(void){ return SQLITE_OK; }$/;"	f	typeref:typename:int	file:
debugMutexLeave	sqlite/sqlite3.c	/^static void debugMutexLeave(sqlite3_mutex *pX){$/;"	f	typeref:typename:void	file:
debugMutexNotheld	sqlite/sqlite3.c	/^static int debugMutexNotheld(sqlite3_mutex *pX){$/;"	f	typeref:typename:int	file:
debugMutexTry	sqlite/sqlite3.c	/^static int debugMutexTry(sqlite3_mutex *pX){$/;"	f	typeref:typename:int	file:
decimal	include/type/value.h	/^    double decimal;$/;"	m	union:cmudb::Value::Val	typeref:typename:double
declareVtab	sqlite/sqlite3.c	/^  u8 declareVtab;           \/* True if inside sqlite3_declare_vtab() *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
declare_vtab	include/sqlite/sqlite3ext.h	/^  int (*declare_vtab)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *)
default_rc	sqlite/sqlite3.c	/^  i8 default_rc;      \/* Comparison result if keys are equal *\/$/;"	m	struct:UnpackedRecord	typeref:typename:i8	file:
deferredMoveto	sqlite/sqlite3.c	/^  u8 deferredMoveto;      \/* A call to sqlite3BtreeMoveto() is needed *\/$/;"	m	struct:VdbeCursor	typeref:typename:u8	file:
delete_rid_	include/logging/log_record.h	/^  RID delete_rid_;$/;"	m	class:cmudb::LogRecord	typeref:typename:RID
delete_tuple_	include/logging/log_record.h	/^  Tuple delete_tuple_;$/;"	m	class:cmudb::LogRecord	typeref:typename:Tuple
deleted_page_set_	include/concurrency/transaction.h	/^  std::shared_ptr<std::unordered_set<page_id_t>> deleted_page_set_;$/;"	m	class:cmudb::Transaction	typeref:typename:std::shared_ptr<std::unordered_set<page_id_t>>
desc	include/sqlite/sqlite3.h	/^unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	typeref:typename:unsigned char
desc	sqlite/sqlite3.c	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	typeref:typename:unsigned char	file:
dfltLockMode	sqlite/sqlite3.c	/^  u8 dfltLockMode;              \/* Default locking-mode for attached dbs *\/$/;"	m	struct:sqlite3	typeref:typename:u8	file:
directMode	sqlite/sqlite3.c	/^  u8 directMode;          \/* Direct rendering mode means take data directly$/;"	m	struct:AggInfo	typeref:typename:u8	file:
disableLookaside	sqlite/sqlite3.c	/^  u8 disableLookaside; \/* Number of times lookaside has been disabled *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
disableTriggers	sqlite/sqlite3.c	/^  u8 disableTriggers;  \/* True to disable triggers *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
disable_debug_trace_modes	sqlite/shell.c	/^static void disable_debug_trace_modes(void){$/;"	f	typeref:typename:void	file:
disable_simulated_io_errors	sqlite/sqlite3.c	/^# define disable_simulated_io_errors(/;"	d	file:
disallow	sqlite/sqlite3.c	/^  int disallow; \/* Do not allow memory allocation *\/$/;"	m	struct:__anon76f104fc1d08	typeref:typename:int	file:
disk_manager_	include/buffer/buffer_pool_manager.h	/^  DiskManager *disk_manager_;$/;"	m	class:cmudb::BufferPoolManager	typeref:typename:DiskManager *
disk_manager_	include/logging/log_manager.h	/^  DiskManager *disk_manager_;$/;"	m	class:cmudb::LogManager	typeref:typename:DiskManager *
disk_manager_	include/logging/log_recovery.h	/^  DiskManager *disk_manager_;$/;"	m	class:cmudb::LogRecovery	typeref:typename:DiskManager *
disk_manager_	include/vtable/virtual_table.h	/^  DiskManager *disk_manager_;$/;"	m	class:cmudb::StorageEngine	typeref:typename:DiskManager *
displayLinuxIoStats	sqlite/shell.c	/^static void displayLinuxIoStats(FILE *out){$/;"	f	typeref:typename:void	file:
displayStatLine	sqlite/shell.c	/^static void displayStatLine($/;"	f	typeref:typename:void	file:
display_scanstats	sqlite/shell.c	/^static void display_scanstats($/;"	f	typeref:typename:void	file:
display_stats	sqlite/shell.c	/^static int display_stats($/;"	f	typeref:typename:int	file:
do_meta_command	sqlite/shell.c	/^static int do_meta_command(char *zLine, ShellState *p){$/;"	f	typeref:typename:int	file:
doingRerun	sqlite/sqlite3.c	/^  bft doingRerun:1;       \/* True if rerunning after an auto-reprepare *\/$/;"	m	struct:Vdbe	typeref:typename:bft:1	file:
done	sqlite/sqlite3.c	/^    unsigned done :1;       \/* A flag to indicate when processing is finished *\/$/;"	m	struct:ExprList::ExprList_item	typeref:typename:unsigned:1	file:
double	include/sqlite/sqlite3.h	/^# define double /;"	d
double	sqlite/sqlite3.c	/^# define double /;"	d	file:
dump_callback	sqlite/shell.c	/^static int dump_callback(void *pArg, int nArg, char **azArg, char **azNotUsed){$/;"	f	typeref:typename:int	file:
eCode	sqlite/sqlite3.c	/^  u8 eCode;                                 \/* A small processing code *\/$/;"	m	struct:Walker	typeref:typename:u8	file:
eCurType	sqlite/sqlite3.c	/^  u8 eCurType;            \/* One of the CURTYPE_* values above *\/$/;"	m	struct:VdbeCursor	typeref:typename:u8	file:
eDest	sqlite/sqlite3.c	/^  u8 eDest;            \/* How to dispose of the results.  On of SRT_* above. *\/$/;"	m	struct:SelectDest	typeref:typename:u8	file:
eOrconf	sqlite/sqlite3.c	/^  u8 eOrconf;          \/* Default ON CONFLICT policy for trigger steps *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
eParentWithin	include/sqlite/sqlite3.h	/^int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int
eParentWithin	sqlite/sqlite3.c	/^  int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int	file:
eSubtype	sqlite/sqlite3.c	/^  u8  eSubtype;       \/* Subtype for this value *\/$/;"	m	struct:sqlite3_value	typeref:typename:u8	file:
eTriggerOp	sqlite/sqlite3.c	/^  u8 eTriggerOp;       \/* TK_UPDATE, TK_INSERT or TK_DELETE *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
eType	sqlite/sqlite3.c	/^  u8 eType;                           \/* Allocation type code *\/$/;"	m	struct:MemBlockHdr	typeref:typename:u8	file:
eType	sqlite/sqlite3.c	/^  u8 eType;           \/* Transformation type code *\/$/;"	m	struct:__anon76f104fc1c08	typeref:typename:u8	file:
eWithin	include/sqlite/sqlite3.h	/^int eWithin;                      \/* OUT: Visiblity *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int
eWithin	sqlite/sqlite3.c	/^  int eWithin;                      \/* OUT: Visiblity *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int	file:
elem_type_id	include/type/value.h	/^    TypeId elem_type_id;$/;"	m	union:cmudb::Value::__anon6b93625c010a	typeref:typename:TypeId
enableTimer	sqlite/shell.c	/^static int enableTimer = 0;$/;"	v	typeref:typename:int	file:
enable_shared_cache	include/sqlite/sqlite3ext.h	/^  int  (*enable_shared_cache)(int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(int)
enable_simulated_io_errors	sqlite/sqlite3.c	/^# define enable_simulated_io_errors(/;"	d	file:
enc	sqlite/sqlite3.c	/^  u8  enc;            \/* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE *\/$/;"	m	struct:sqlite3_value	typeref:typename:u8	file:
enc	sqlite/sqlite3.c	/^  u8 enc;                       \/* Text encoding *\/$/;"	m	struct:sqlite3	typeref:typename:u8	file:
enc	sqlite/sqlite3.c	/^  u8 enc;               \/* Text encoding handled by xCmp() *\/$/;"	m	struct:CollSeq	typeref:typename:u8	file:
enc	sqlite/sqlite3.c	/^  u8 enc;              \/* Text encoding used by this database *\/$/;"	m	struct:Schema	typeref:typename:u8	file:
enc	sqlite/sqlite3.c	/^  u8 enc;             \/* Text encoding - one of the SQLITE_UTF* values *\/$/;"	m	struct:KeyInfo	typeref:typename:u8	file:
end	include/vtable/virtual_table.h	/^  inline TableIterator end() { return table_heap_->end(); }$/;"	f	class:cmudb::VirtualTable	typeref:typename:TableIterator
end	table/table_heap.cpp	/^TableIterator TableHeap::end() {$/;"	f	class:cmudb::TableHeap	typeref:typename:TableIterator
endTimer	sqlite/shell.c	/^static void endTimer(void){$/;"	f	typeref:typename:void	file:
eqSeen	sqlite/sqlite3.c	/^  u8 eqSeen;          \/* True if an equality comparison has been seen *\/$/;"	m	struct:UnpackedRecord	typeref:typename:u8	file:
errCode	sqlite/sqlite3.c	/^  int errCode;                  \/* Most recent error code (SQLITE_*) *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
errCode	sqlite/sqlite3.c	/^  u8 errCode;         \/* Error detected by xRecordCompare (CORRUPT or NOMEM) *\/$/;"	m	struct:UnpackedRecord	typeref:typename:u8	file:
errMask	sqlite/sqlite3.c	/^  int errMask;                  \/* & result codes with this before returning *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
errcode	include/sqlite/sqlite3ext.h	/^  int  (*errcode)(sqlite3*db);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 * db)
errmsg	include/sqlite/sqlite3ext.h	/^  const char * (*errmsg)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const char * (*)(sqlite3 *)
errmsg16	include/sqlite/sqlite3ext.h	/^  const void * (*errmsg16)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const void * (*)(sqlite3 *)
errorAction	sqlite/sqlite3.c	/^  u8 errorAction;         \/* Recovery action to do in case of an error *\/$/;"	m	struct:Vdbe	typeref:typename:u8	file:
errstr	include/sqlite/sqlite3ext.h	/^  const char *(*errstr)(int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const char * (*)(int)
estimatedCost	include/sqlite/sqlite3.h	/^double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:double
estimatedCost	sqlite/sqlite3.c	/^  double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:double	file:
estimatedRows	include/sqlite/sqlite3.h	/^sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:sqlite3_int64
estimatedRows	sqlite/sqlite3.c	/^  sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:sqlite3_int64	file:
exclusive_lock_set_	include/concurrency/transaction.h	/^  std::shared_ptr<std::unordered_set<RID>> exclusive_lock_set_;$/;"	m	class:cmudb::Transaction	typeref:typename:std::shared_ptr<std::unordered_set<RID>>
exec	include/sqlite/sqlite3ext.h	/^  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *,sqlite3_callback,void *,char **)
exec_prepared_stmt	sqlite/shell.c	/^static void exec_prepared_stmt($/;"	f	typeref:typename:void	file:
expanded_sql	include/sqlite/sqlite3ext.h	/^  char *(*expanded_sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:char * (*)(sqlite3_stmt *)
expired	include/sqlite/sqlite3ext.h	/^  int  (*expired)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *)
expired	sqlite/sqlite3.c	/^  bft expired:1;          \/* True if the VM needs to be recompiled *\/$/;"	m	struct:Vdbe	typeref:typename:bft:1	file:
explain	sqlite/sqlite3.c	/^  bft explain:2;          \/* True if EXPLAIN present on SQL command *\/$/;"	m	struct:Vdbe	typeref:typename:bft:2	file:
explain	sqlite/sqlite3.c	/^  u8 explain;               \/* True if the EXPLAIN flag is found on the query *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
explain_data_delete	sqlite/shell.c	/^static void explain_data_delete(ShellState *p){$/;"	f	typeref:typename:void	file:
explain_data_prepare	sqlite/shell.c	/^static void explain_data_prepare(ShellState *p, sqlite3_stmt *pSql){$/;"	f	typeref:typename:void	file:
expmask	sqlite/sqlite3.c	/^  u32 expmask;            \/* Binding to these vars invalidates VM *\/$/;"	m	struct:Vdbe	typeref:typename:u32	file:
extended_errcode	include/sqlite/sqlite3ext.h	/^  int (*extended_errcode)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *)
extended_result_codes	include/sqlite/sqlite3ext.h	/^  int (*extended_result_codes)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,int)
fErrorOrAux	sqlite/sqlite3.c	/^  u8 fErrorOrAux;         \/* isError!=0 or pVdbe->pAuxData modified *\/$/;"	m	struct:sqlite3_context	typeref:typename:u8	file:
fg	sqlite/sqlite3.c	/^    } fg;$/;"	m	struct:SrcList::SrcList_item	typeref:struct:SrcList::SrcList_item::__anon76f104fc1708	file:
file_control	include/sqlite/sqlite3ext.h	/^  int (*file_control)(sqlite3*,const char*,int,void*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *,int,void *)
file_format	sqlite/sqlite3.c	/^  u8 file_format;      \/* Schema format version for this file *\/$/;"	m	struct:Schema	typeref:typename:u8	file:
file_name_	include/disk/disk_manager.h	/^  std::string file_name_;$/;"	m	class:cmudb::DiskManager	typeref:typename:std::string
finalize	include/sqlite/sqlite3ext.h	/^  int  (*finalize)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt * pStmt)
find_home_dir	sqlite/shell.c	/^static char *find_home_dir(int clearFlag){$/;"	f	typeref:typename:char *	file:
first	sqlite/sqlite3.c	/^  HashElem *first;          \/* The first element of the array *\/$/;"	m	struct:Hash	typeref:typename:HashElem *	file:
first_page_id_	include/table/table_heap.h	/^  page_id_t first_page_id_;$/;"	m	class:cmudb::TableHeap	typeref:typename:page_id_t
fixed_length	include/catalog/column.h	/^  int32_t fixed_length;$/;"	m	class:cmudb::Column	typeref:typename:int32_t
fkeyHash	sqlite/sqlite3.c	/^  Hash fkeyHash;       \/* All foreign keys by referenced table name *\/$/;"	m	struct:Schema	typeref:typename:Hash	file:
flags	sqlite/sqlite3.c	/^  int flags;                    \/* Miscellaneous flags. See below *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
flags	sqlite/sqlite3.c	/^  u16 flags;                     \/* PGHDR flags defined below *\/$/;"	m	struct:PgHdr	typeref:typename:u16	file:
flags	sqlite/sqlite3.c	/^  u16 flags;          \/* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. *\/$/;"	m	struct:sqlite3_value	typeref:typename:u16	file:
flags	sqlite/sqlite3.c	/^  u32 flags;             \/* Various flags.  EP_* See below *\/$/;"	m	struct:Expr	typeref:typename:u32	file:
float	sqlite/sqlite3.c	/^# define float /;"	d	file:
flush_buffer_	include/logging/log_manager.h	/^  char *flush_buffer_;$/;"	m	class:cmudb::LogManager	typeref:typename:char *
flush_log_	include/disk/disk_manager.h	/^  bool flush_log_;$/;"	m	class:cmudb::DiskManager	typeref:typename:bool
flush_log_f_	include/disk/disk_manager.h	/^  std::future<void> *flush_log_f_;$/;"	m	class:cmudb::DiskManager	typeref:typename:std::future<void> *
flush_thread_	include/logging/log_manager.h	/^  std::thread *flush_thread_;$/;"	m	class:cmudb::LogManager	typeref:typename:std::thread *
free	include/sqlite/sqlite3ext.h	/^  void  (*free)(void*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(void *)
freeColumnList	sqlite/shell.c	/^static void freeColumnList(char **azCol){$/;"	f	typeref:typename:void	file:
freeText	sqlite/shell.c	/^static void freeText(ShellText *p){$/;"	f	typeref:typename:void	file:
free_list_	include/buffer/buffer_pool_manager.h	/^  std::list<Page *> *free_list_; \/\/ to find a free page for replacement$/;"	m	class:cmudb::BufferPoolManager	typeref:typename:std::list<Page * > *
free_table	include/sqlite/sqlite3ext.h	/^  void  (*free_table)(char**result);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(char ** result)
ftKernelBegin	sqlite/shell.c	/^static FILETIME ftKernelBegin;$/;"	v	typeref:typename:FILETIME	file:
ftUserBegin	sqlite/shell.c	/^static FILETIME ftUserBegin;$/;"	v	typeref:typename:FILETIME	file:
ftWallBegin	sqlite/shell.c	/^static sqlite3_int64 ftWallBegin;$/;"	v	typeref:typename:sqlite3_int64	file:
fts5_api	include/sqlite/sqlite3.h	/^struct fts5_api {$/;"	s
fts5_api	include/sqlite/sqlite3.h	/^typedef struct fts5_api fts5_api;$/;"	t	typeref:struct:fts5_api
fts5_api	sqlite/sqlite3.c	/^struct fts5_api {$/;"	s	file:
fts5_api	sqlite/sqlite3.c	/^typedef struct fts5_api fts5_api;$/;"	t	typeref:struct:fts5_api	file:
fts5_extension_function	include/sqlite/sqlite3.h	/^typedef void (*fts5_extension_function)($/;"	t	typeref:typename:void (*)(const Fts5ExtensionApi * pApi,Fts5Context * pFts,sqlite3_context * pCtx,int nVal,sqlite3_value ** apVal)
fts5_extension_function	sqlite/sqlite3.c	/^typedef void (*fts5_extension_function)($/;"	t	typeref:typename:void (*)(const Fts5ExtensionApi * pApi,Fts5Context * pFts,sqlite3_context * pCtx,int nVal,sqlite3_value ** apVal)	file:
fts5_tokenizer	include/sqlite/sqlite3.h	/^struct fts5_tokenizer {$/;"	s
fts5_tokenizer	include/sqlite/sqlite3.h	/^typedef struct fts5_tokenizer fts5_tokenizer;$/;"	t	typeref:struct:fts5_tokenizer
fts5_tokenizer	sqlite/sqlite3.c	/^struct fts5_tokenizer {$/;"	s	file:
fts5_tokenizer	sqlite/sqlite3.c	/^typedef struct fts5_tokenizer fts5_tokenizer;$/;"	t	typeref:struct:fts5_tokenizer	file:
funcFlags	sqlite/sqlite3.c	/^  u16 funcFlags;       \/* Some combination of SQLITE_FUNC_* *\/$/;"	m	struct:FuncDef	typeref:typename:u16	file:
get2byteInt	sqlite/shell.c	/^static unsigned int get2byteInt(unsigned char *a){$/;"	f	typeref:typename:unsigned int	file:
get4byteInt	sqlite/shell.c	/^static unsigned int get4byteInt(unsigned char *a){$/;"	f	typeref:typename:unsigned int	file:
getDigits	sqlite/sqlite3.c	/^static int getDigits(const char *zDate, const char *zFormat, ...){$/;"	f	typeref:typename:int	file:
getProcessTimesAddr	sqlite/shell.c	/^static GETPROCTIMES getProcessTimesAddr = NULL;$/;"	v	typeref:typename:GETPROCTIMES	file:
getVarint	sqlite/sqlite3.c	/^#define getVarint /;"	d	file:
getVarint32	sqlite/sqlite3.c	/^#define getVarint32(/;"	d	file:
get_autocommit	include/sqlite/sqlite3ext.h	/^  int  (*get_autocommit)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *)
get_auxdata	include/sqlite/sqlite3ext.h	/^  void * (*get_auxdata)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void * (*)(sqlite3_context *,int)
get_table	include/sqlite/sqlite3ext.h	/^  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *,char ***,int *,int *,char **)
getrusage	sqlite/shell.c	/^#define getrusage(/;"	d	file:
globalDb	sqlite/shell.c	/^static sqlite3 *globalDb = 0;$/;"	v	typeref:typename:sqlite3 *	file:
global_depth_	include/hash/extendible_hash.h	/^  int global_depth_;$/;"	m	class:cmudb::ExtendibleHash	typeref:typename:int
global_recover	include/sqlite/sqlite3ext.h	/^  int  (*global_recover)(void);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(void)
global_transaction_	include/vtable/virtual_table.h	/^Transaction *global_transaction_ = nullptr;$/;"	v	namespace:cmudb	typeref:typename:Transaction *
h	sqlite/sqlite3.c	/^  int h, m;           \/* Hour and minutes *\/$/;"	m	struct:DateTime	typeref:typename:int	file:
hProcess	sqlite/shell.c	/^static HANDLE hProcess;$/;"	v	typeref:typename:HANDLE	file:
hasCompound	sqlite/sqlite3.c	/^  u8 hasCompound;      \/* Need to invoke convertCompoundSelectToSubquery() *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
hasStat1	sqlite/sqlite3.c	/^  unsigned hasStat1:1;     \/* aiRowLogEst values come from sqlite_stat1 *\/$/;"	m	struct:Index	typeref:typename:unsigned:1	file:
hasTimer	sqlite/shell.c	/^static int hasTimer(void){$/;"	f	typeref:typename:int	file:
hash	include/common/rid.h	/^template <> struct hash<cmudb::RID> {$/;"	s	namespace:std
hash_step_vformat	sqlite/shell.c	/^static void hash_step_vformat($/;"	f	typeref:typename:void	file:
hdr	sqlite/sqlite3.c	/^    } hdr;$/;"	m	union:Mem3Block::__anon76f104fc1e0a	typeref:struct:Mem3Block::__anon76f104fc1e0a::__anon76f104fc1f08	file:
head_	include/buffer/lru_replacer.h	/^  shared_ptr<Node> head_;$/;"	m	class:cmudb::LRUReplacer	typeref:typename:shared_ptr<Node>
header_page_id	vtable/virtual_table.cpp	/^    page_id_t header_page_id;$/;"	v	namespace:cmudb	typeref:typename:page_id_t
hexDigitValue	sqlite/shell.c	/^static int hexDigitValue(char c){$/;"	f	typeref:typename:int	file:
hidden	include/sqlite/sqlite3.h	/^unsigned char hidden[48];$/;"	m	struct:sqlite3_snapshot	typeref:typename:unsigned char[48]
hidden	sqlite/sqlite3.c	/^  unsigned char hidden[48];$/;"	m	struct:sqlite3_snapshot	typeref:typename:unsigned char[48]	file:
ht	sqlite/sqlite3.c	/^  } *ht;$/;"	m	struct:Hash	typeref:struct:Hash::_ht *	file:
htsize	sqlite/sqlite3.c	/^  unsigned int htsize;      \/* Number of buckets in the hash table *\/$/;"	m	struct:Hash	typeref:typename:unsigned int	file:
i	sqlite/sqlite3.c	/^    i64 i;              \/* Integer value used when MEM_Int is set in flags *\/$/;"	m	union:sqlite3_value::MemValue	typeref:typename:i64	file:
i	sqlite/sqlite3.c	/^    int i;                 \/* Integer value if p4type==P4_INT32 *\/$/;"	m	union:VdbeOp::p4union	typeref:typename:int	file:
i16	sqlite/sqlite3.c	/^typedef INT16_TYPE i16;            \/* 2-byte signed integer *\/$/;"	t	typeref:typename:INT16_TYPE	file:
i64	sqlite/sqlite3.c	/^typedef sqlite_int64 i64;          \/* 8-byte signed integer *\/$/;"	t	typeref:typename:sqlite_int64	file:
i8	sqlite/sqlite3.c	/^typedef INT8_TYPE i8;              \/* 1-byte signed integer *\/$/;"	t	typeref:typename:INT8_TYPE	file:
iAgg	sqlite/sqlite3.c	/^  i16 iAgg;              \/* Which entry in pAggInfo->aCol[] or ->aFunc[] *\/$/;"	m	struct:Expr	typeref:typename:i16	file:
iAlias	sqlite/sqlite3.c	/^        u16 iAlias;           \/* Index into Parse.aAlias[] for zName *\/$/;"	m	struct:ExprList::ExprList_item::__anon76f104fc150a::__anon76f104fc1608	typeref:typename:u16	file:
iAuxArg	sqlite/sqlite3.c	/^  int iAuxArg;                    \/* Index of function argument. *\/$/;"	m	struct:AuxData	typeref:typename:int	file:
iAuxOp	sqlite/sqlite3.c	/^  int iAuxOp;                     \/* Instruction number of OP_Function opcode *\/$/;"	m	struct:AuxData	typeref:typename:int	file:
iBegin	sqlite/shell.c	/^static sqlite3_int64 iBegin;  \/* Wall-clock time at start *\/$/;"	v	typeref:typename:sqlite3_int64	file:
iCacheCnt	sqlite/sqlite3.c	/^  int iCacheCnt;       \/* Counter used to generate aColCache[].lru values *\/$/;"	m	struct:Parse	typeref:typename:int	file:
iCacheLevel	sqlite/sqlite3.c	/^  int iCacheLevel;     \/* ColCache valid when aColCache[].iLevel<=iCacheLevel *\/$/;"	m	struct:Parse	typeref:typename:int	file:
iColumn	include/sqlite/sqlite3.h	/^int iColumn;              \/* Column constrained.  -1 for ROWID *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	typeref:typename:int
iColumn	include/sqlite/sqlite3.h	/^int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	typeref:typename:int
iColumn	sqlite/sqlite3.c	/^     int iColumn;              \/* Column constrained.  -1 for ROWID *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	typeref:typename:int	file:
iColumn	sqlite/sqlite3.c	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	typeref:typename:int	file:
iColumn	sqlite/sqlite3.c	/^    i16 iColumn;          \/* Table column number *\/$/;"	m	struct:Parse::yColCache	typeref:typename:i16	file:
iColumn	sqlite/sqlite3.c	/^    int iColumn;             \/* Column number within the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	typeref:typename:int	file:
iColumn	sqlite/sqlite3.c	/^  ynVar iColumn;         \/* TK_COLUMN: column index.  -1 for rowid.$/;"	m	struct:Expr	typeref:typename:ynVar	file:
iConstExprReg	sqlite/sqlite3.c	/^      int iConstExprReg;      \/* Register in which Expr value is cached *\/$/;"	m	union:ExprList::ExprList_item::__anon76f104fc150a	typeref:typename:int	file:
iCur	sqlite/sqlite3.c	/^    int iCur;                                 \/* A cursor number *\/$/;"	m	union:Walker::__anon76f104fc1a0a	typeref:typename:int	file:
iCurrentTime	sqlite/sqlite3.c	/^  i64 iCurrentTime;       \/* Value of julianday('now') for this statement *\/$/;"	m	struct:Vdbe	typeref:typename:i64	file:
iCursor	sqlite/sqlite3.c	/^    int iCursor;      \/* The VDBE cursor number used to access this table *\/$/;"	m	struct:SrcList::SrcList_item	typeref:typename:int	file:
iDb	sqlite/sqlite3.c	/^    u8 iDb;                     \/* Which db file is being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	typeref:typename:u8	file:
iDb	sqlite/sqlite3.c	/^  i8 iDb;                 \/* Index of cursor database in db->aDb[] (or -1) *\/$/;"	m	struct:VdbeCursor	typeref:typename:i8	file:
iDb	sqlite/sqlite3.c	/^  int iDb;              \/* Index in sqlite3.aDb[] of database holding pTab *\/$/;"	m	struct:AutoincInfo	typeref:typename:int	file:
iDb	sqlite/sqlite3.c	/^  int iDb;            \/* 0 for main database.  1 for TEMP, 2.. for ATTACHed *\/$/;"	m	struct:__anon76f104fc1908	typeref:typename:int	file:
iDistinct	sqlite/sqlite3.c	/^    int iDistinct;           \/* Ephemeral table used to enforce DISTINCT *\/$/;"	m	struct:AggInfo::AggInfo_func	typeref:typename:int	file:
iForeGuard	sqlite/sqlite3.c	/^  int iForeGuard;                     \/* Guard word for sanity *\/$/;"	m	struct:MemBlockHdr	typeref:typename:int	file:
iFrom	sqlite/sqlite3.c	/^    int iFrom;            \/* Index of column in pFrom *\/$/;"	m	struct:FKey::sColMap	typeref:typename:int	file:
iGeneration	sqlite/sqlite3.c	/^  int iGeneration;     \/* Generation counter.  Incremented with each change *\/$/;"	m	struct:Schema	typeref:typename:int	file:
iHdrOffset	sqlite/sqlite3.c	/^  u32 iHdrOffset;         \/* Offset to next unparsed byte of the header *\/$/;"	m	struct:VdbeCursor	typeref:typename:u32	file:
iIndent	sqlite/shell.c	/^  int iIndent;           \/* Index of current op in aiIndent[] *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
iJD	sqlite/sqlite3.c	/^  sqlite3_int64 iJD;  \/* The julian day number times 86400000 *\/$/;"	m	struct:DateTime	typeref:typename:sqlite3_int64	file:
iKey1	sqlite/sqlite3.c	/^  i64 iKey1;                      \/* First key value passed to hook *\/$/;"	m	struct:PreUpdate	typeref:typename:i64	file:
iKey2	sqlite/sqlite3.c	/^  i64 iKey2;                      \/* Second key value passed to hook *\/$/;"	m	struct:PreUpdate	typeref:typename:i64	file:
iLevel	include/sqlite/sqlite3.h	/^int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int
iLevel	sqlite/sqlite3.c	/^    int iLevel;           \/* Nesting level *\/$/;"	m	struct:Parse::yColCache	typeref:typename:int	file:
iLevel	sqlite/sqlite3.c	/^  int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int	file:
iLevel	sqlite/sqlite3.c	/^  int iLevel;             \/* Which level of the tree we are on *\/$/;"	m	struct:TreeView	typeref:typename:int	file:
iLimit	sqlite/sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	typeref:typename:int	file:
iMaster	sqlite/sqlite3.c	/^  u32 iMaster;$/;"	m	struct:Mem3Global	typeref:typename:u32	file:
iMem	sqlite/sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_col	typeref:typename:int	file:
iMem	sqlite/sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_func	typeref:typename:int	file:
iMult	sqlite/shell.c	/^  static const struct { char *zSuffix; int iMult; } aMult[] = {$/;"	m	struct:integerValue::__anonc53fbaef0308	typeref:typename:int	file:
iNewReg	sqlite/sqlite3.c	/^  int iNewReg;                    \/* Register for new.* values *\/$/;"	m	struct:PreUpdate	typeref:typename:int	file:
iNextSelectId	sqlite/sqlite3.c	/^  int iNextSelectId;        \/* Next available select ID for EXPLAIN output *\/$/;"	m	struct:Parse	typeref:typename:int	file:
iOffset	sqlite/sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	typeref:typename:int	file:
iOnceResetThreshold	sqlite/sqlite3.c	/^  int iOnceResetThreshold;          \/* When to reset OP_Once counters *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
iOp	sqlite/sqlite3.c	/^  int iOp;                \/* Instruction number of OP_Function *\/$/;"	m	struct:sqlite3_context	typeref:typename:int	file:
iOrderByCol	sqlite/sqlite3.c	/^        u16 iOrderByCol;      \/* For ORDER BY, column number in result set *\/$/;"	m	struct:ExprList::ExprList_item::__anon76f104fc150a::__anon76f104fc1608	typeref:typename:u16	file:
iPKey	sqlite/sqlite3.c	/^  i16 iPKey;           \/* If not negative, use aCol[iPKey] as the rowid *\/$/;"	m	struct:Table	typeref:typename:i16	file:
iPkSortOrder	sqlite/sqlite3.c	/^  u8 iPkSortOrder;          \/* ASC or DESC for INTEGER PRIMARY KEY *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
iRangeReg	sqlite/sqlite3.c	/^  int iRangeReg;       \/* First register in temporary register block *\/$/;"	m	struct:Parse	typeref:typename:int	file:
iReg	sqlite/sqlite3.c	/^    int iReg;             \/* Reg with value of this column. 0 means none. *\/$/;"	m	struct:Parse::yColCache	typeref:typename:int	file:
iRightJoinTable	sqlite/sqlite3.c	/^  i16 iRightJoinTable;   \/* If EP_FromJoin, the right table of the join *\/$/;"	m	struct:Expr	typeref:typename:i16	file:
iRowid	include/sqlite/sqlite3.h	/^sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_int64
iRowid	sqlite/sqlite3.c	/^  sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_int64	file:
iSDParm	sqlite/sqlite3.c	/^  int iSDParm;         \/* A parameter used by the eDest disposal method *\/$/;"	m	struct:SelectDest	typeref:typename:int	file:
iSavepoint	sqlite/sqlite3.c	/^  int iSavepoint;           \/* Depth of the SAVEPOINT stack *\/$/;"	m	struct:VTable	typeref:typename:int	file:
iSdst	sqlite/sqlite3.c	/^  int iSdst;           \/* Base register where results are written *\/$/;"	m	struct:SelectDest	typeref:typename:int	file:
iSelectID	sqlite/sqlite3.c	/^  int iSelectID;                  \/* The "Select-ID" for this loop *\/$/;"	m	struct:ScanStatus	typeref:typename:int	file:
iSelectId	sqlite/sqlite3.c	/^    u8 iSelectId;     \/* If pSelect!=0, the id of the sub-select in EQP *\/$/;"	m	struct:SrcList::SrcList_item	typeref:typename:u8	file:
iSelectId	sqlite/sqlite3.c	/^  int iSelectId;            \/* ID of current select for EXPLAIN output *\/$/;"	m	struct:Parse	typeref:typename:int	file:
iSelfTab	sqlite/sqlite3.c	/^  int iSelfTab;        \/* Table of an index whose exprs are being coded *\/$/;"	m	struct:Parse	typeref:typename:int	file:
iSize	sqlite/sqlite3.c	/^  i64 iSize;                          \/* Size of this allocation *\/$/;"	m	struct:MemBlockHdr	typeref:typename:i64	file:
iSorterColumn	sqlite/sqlite3.c	/^    int iSorterColumn;       \/* Column number in the sorting index *\/$/;"	m	struct:AggInfo::AggInfo_col	typeref:typename:int	file:
iSrcLine	sqlite/sqlite3.c	/^  int iSrcLine;            \/* Source-code line that generated this opcode *\/$/;"	m	struct:VdbeOp	typeref:typename:int	file:
iStatement	sqlite/sqlite3.c	/^  int iStatement;         \/* Statement number (or 0 if has not opened stmt) *\/$/;"	m	struct:Vdbe	typeref:typename:int	file:
iSysErrno	sqlite/sqlite3.c	/^  int iSysErrno;                \/* Errno value from last system error *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
iTable	sqlite/sqlite3.c	/^    int iTable;              \/* Cursor number of the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	typeref:typename:int	file:
iTable	sqlite/sqlite3.c	/^    int iTable;           \/* Table cursor number *\/$/;"	m	struct:Parse::yColCache	typeref:typename:int	file:
iTable	sqlite/sqlite3.c	/^  int iTable;            \/* TK_COLUMN: cursor number of table holding column$/;"	m	struct:Expr	typeref:typename:int	file:
iTermOffset	include/sqlite/sqlite3.h	/^int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	typeref:typename:int
iTermOffset	sqlite/sqlite3.c	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	typeref:typename:int	file:
iValue	sqlite/sqlite3.c	/^    int iValue;            \/* Non-negative integer value if EP_IntValue *\/$/;"	m	union:Expr::__anon76f104fc130a	typeref:typename:int	file:
iVersion	include/sqlite/sqlite3.h	/^int iVersion;                   \/* Currently always set to 2 *\/$/;"	m	struct:fts5_api	typeref:typename:int
iVersion	include/sqlite/sqlite3.h	/^int iVersion;                   \/* Currently always set to 3 *\/$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int
iVersion	include/sqlite/sqlite3.h	/^int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:int
iVersion	include/sqlite/sqlite3.h	/^int iVersion;$/;"	m	struct:sqlite3_io_methods	typeref:typename:int
iVersion	include/sqlite/sqlite3.h	/^int iVersion;$/;"	m	struct:sqlite3_module	typeref:typename:int
iVersion	include/sqlite/sqlite3.h	/^int iVersion;$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:int
iVersion	sqlite/sqlite3.c	/^  int iVersion;                   \/* Currently always set to 2 *\/$/;"	m	struct:fts5_api	typeref:typename:int	file:
iVersion	sqlite/sqlite3.c	/^  int iVersion;                   \/* Currently always set to 3 *\/$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int	file:
iVersion	sqlite/sqlite3.c	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:int	file:
iVersion	sqlite/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods	typeref:typename:int	file:
iVersion	sqlite/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_module	typeref:typename:int	file:
iVersion	sqlite/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:int	file:
id	sqlite/sqlite3.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	typeref:typename:int	file:
id	sqlite/sqlite3.c	/^  int id;     \/* The mutex type *\/$/;"	m	struct:sqlite3_debug_mutex	typeref:typename:int	file:
idx	sqlite/sqlite3.c	/^    int idx;          \/* Index in some Table.aCol[] of a column named zName *\/$/;"	m	struct:IdList::IdList_item	typeref:typename:int	file:
idxFlags	include/sqlite/sqlite3.h	/^int idxFlags;              \/* Mask of SQLITE_INDEX_SCAN_* flags *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int
idxFlags	sqlite/sqlite3.c	/^  int idxFlags;              \/* Mask of SQLITE_INDEX_SCAN_* flags *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int	file:
idxHash	sqlite/sqlite3.c	/^  Hash idxHash;        \/* All (named) indices indexed by name *\/$/;"	m	struct:Schema	typeref:typename:Hash	file:
idxNum	include/sqlite/sqlite3.h	/^int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int
idxNum	sqlite/sqlite3.c	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int	file:
idxStr	include/sqlite/sqlite3.h	/^char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:char *
idxStr	sqlite/sqlite3.c	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:char *	file:
idxType	sqlite/sqlite3.c	/^  unsigned idxType:2;      \/* 1==UNIQUE, 2==PRIMARY KEY, 0==CREATE INDEX *\/$/;"	m	struct:Index	typeref:typename:unsigned:2	file:
import_append_char	sqlite/shell.c	/^static void import_append_char(ImportCtx *p, int c){$/;"	f	typeref:typename:void	file:
imposterTable	sqlite/sqlite3.c	/^    u8 imposterTable;           \/* Building an imposter table *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	typeref:typename:u8	file:
in	sqlite/shell.c	/^  FILE *in;           \/* Read the CSV text from this input stream *\/$/;"	m	struct:ImportCtx	typeref:typename:FILE *	file:
inProgress	sqlite/sqlite3.c	/^  int inProgress;                   \/* True while initialization in progress *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
index	hash/extendible_hash.cpp	/^  auto index = hashKey(key);$/;"	v	namespace:cmudb	typeref:typename:auto
index_	include/vtable/virtual_table.h	/^  Index *index_ = nullptr;$/;"	m	class:cmudb::VirtualTable	typeref:typename:Index *
index_name_	include/index/b_plus_tree.h	/^  std::string index_name_;$/;"	m	class:cmudb::BPlusTree	typeref:typename:std::string
init	sqlite/sqlite3.c	/^  } init;$/;"	m	struct:sqlite3	typeref:struct:sqlite3::sqlite3InitInfo	file:
initText	sqlite/shell.c	/^static void initText(ShellText *p){$/;"	f	typeref:typename:void	file:
insert_rid_	include/logging/log_record.h	/^  RID insert_rid_;$/;"	m	class:cmudb::LogRecord	typeref:typename:RID
insert_tuple_	include/logging/log_record.h	/^  Tuple insert_tuple_;$/;"	m	class:cmudb::LogRecord	typeref:typename:Tuple
integer	include/type/value.h	/^    int32_t integer;$/;"	m	union:cmudb::Value::Val	typeref:typename:int32_t
integerValue	sqlite/shell.c	/^static sqlite3_int64 integerValue(const char *zArg){$/;"	f	typeref:typename:sqlite3_int64	file:
interrupt_handler	sqlite/shell.c	/^static void interrupt_handler(int NotUsed){$/;"	f	typeref:typename:void	file:
interruptx	include/sqlite/sqlite3ext.h	/^  void  (*interruptx)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3 *)
iotrace	sqlite/shell.c	/^static FILE *iotrace = 0;$/;"	v	typeref:typename:FILE *	file:
iotracePrintf	sqlite/shell.c	/^static void SQLITE_CDECL iotracePrintf(const char *zFormat, ...){$/;"	f	typeref:typename:void SQLITE_CDECL	file:
isCorrelated	sqlite/sqlite3.c	/^      unsigned isCorrelated :1;  \/* True if sub-query is correlated *\/$/;"	m	struct:SrcList::SrcList_item::__anon76f104fc1708	typeref:typename:unsigned:1	file:
isCovering	sqlite/sqlite3.c	/^  unsigned isCovering:1;   \/* True if this is a covering index *\/$/;"	m	struct:Index	typeref:typename:unsigned:1	file:
isDate	sqlite/sqlite3.c	/^static int isDate($/;"	f	typeref:typename:int	file:
isDeferred	sqlite/sqlite3.c	/^  u8 isDeferred;       \/* True if constraint checking is deferred till COMMIT *\/$/;"	m	struct:FKey	typeref:typename:u8	file:
isEof	include/vtable/virtual_table.h	/^  inline bool isEof() {$/;"	f	class:cmudb::Cursor	typeref:typename:bool
isEphemeral	sqlite/sqlite3.c	/^  Bool isEphemeral:1;     \/* True for an ephemeral table *\/$/;"	m	struct:VdbeCursor	typeref:typename:Bool:1	file:
isError	sqlite/sqlite3.c	/^  char isError;       \/* An overflow has occurred *\/$/;"	m	struct:DateTime	typeref:typename:char	file:
isError	sqlite/sqlite3.c	/^  int isError;            \/* Error code returned by the function. *\/$/;"	m	struct:sqlite3_context	typeref:typename:int	file:
isIndexedBy	sqlite/sqlite3.c	/^      unsigned isIndexedBy :1;   \/* True if there is an INDEXED BY clause *\/$/;"	m	struct:SrcList::SrcList_item::__anon76f104fc1708	typeref:typename:unsigned:1	file:
isInit	sqlite/sqlite3.c	/^  int isInit;                       \/* True after initialization has finished *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
isInterrupted	sqlite/sqlite3.c	/^    volatile int isInterrupted; \/* True if sqlite3_interrupt has been called *\/$/;"	m	union:sqlite3::__anon76f104fc110a	typeref:typename:volatile int	file:
isMallocInit	sqlite/sqlite3.c	/^  int isMallocInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
isMalloced	sqlite/sqlite3.c	/^#define isMalloced(/;"	d	file:
isMultiWrite	sqlite/sqlite3.c	/^  u8 isMultiWrite;     \/* True if statement may modify\/insert multiple rows *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
isMutexInit	sqlite/sqlite3.c	/^  int isMutexInit;                  \/* True after mutexes are initialized *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
isNumber	sqlite/shell.c	/^static int isNumber(const char *z, int *realnum){$/;"	f	typeref:typename:int	file:
isOrdered	sqlite/sqlite3.c	/^  Bool isOrdered:1;       \/* True if the table is not BTREE_UNORDERED *\/$/;"	m	struct:VdbeCursor	typeref:typename:Bool:1	file:
isPCacheInit	sqlite/sqlite3.c	/^  int isPCacheInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
isRecursive	sqlite/sqlite3.c	/^      unsigned isRecursive :1;   \/* True for recursive reference in WITH *\/$/;"	m	struct:SrcList::SrcList_item::__anon76f104fc1708	typeref:typename:unsigned:1	file:
isResized	sqlite/sqlite3.c	/^  unsigned isResized:1;    \/* True if resizeIndexObject() has been called *\/$/;"	m	struct:Index	typeref:typename:unsigned:1	file:
isTabFunc	sqlite/sqlite3.c	/^      unsigned isTabFunc :1;     \/* True if table-valued-function syntax *\/$/;"	m	struct:SrcList::SrcList_item::__anon76f104fc1708	typeref:typename:unsigned:1	file:
isTable	sqlite/sqlite3.c	/^  u8 isTable;             \/* True for rowid tables.  False for indexes *\/$/;"	m	struct:VdbeCursor	typeref:typename:u8	file:
isTransactionSavepoint	sqlite/sqlite3.c	/^  u8 isTransactionSavepoint;    \/* True if the outermost savepoint is a TS *\/$/;"	m	struct:sqlite3	typeref:typename:u8	file:
is_dirty_	include/page/page.h	/^  bool is_dirty_ = false;$/;"	m	class:cmudb::Page	typeref:typename:bool
is_file_exist	vtable/virtual_table.cpp	/^  bool is_file_exist = (stat(db_file_name.c_str(), &buffer) == 0);$/;"	v	namespace:cmudb	typeref:typename:bool
is_index_scan_	include/vtable/virtual_table.h	/^  bool is_index_scan_ = false;$/;"	m	class:cmudb::Cursor	typeref:typename:bool
is_inlined	include/catalog/column.h	/^  bool is_inlined = false;$/;"	m	class:cmudb::Column	typeref:typename:bool
isatty	sqlite/shell.c	/^# define isatty(/;"	d	file:
isatty	sqlite/shell.c	/^#define isatty(/;"	d	file:
item_size_	include/hash/extendible_hash.h	/^  size_t item_size_;$/;"	m	class:cmudb::ExtendibleHash	typeref:typename:size_t
iter	hash/extendible_hash.cpp	/^  auto iter = bucket_ptr->map_.find(key);$/;"	v	namespace:cmudb	typeref:typename:auto
ixMask	sqlite/shell.c	/^  unsigned ixMask;       \/* Insert next input into u.x[nLoaded^ixMask]. *\/$/;"	m	struct:SHA3Context	typeref:typename:unsigned	file:
jointype	sqlite/sqlite3.c	/^      u8 jointype;      \/* Type of join between this table and the previous *\/$/;"	m	struct:SrcList::SrcList_item::__anon76f104fc1708	typeref:typename:u8	file:
juliandayFunc	sqlite/sqlite3.c	/^static void juliandayFunc($/;"	f	typeref:typename:void	file:
kTypes	include/type/type.h	/^  static Type *kTypes[14];$/;"	m	class:cmudb::Type	typeref:typename:Type * [14]
kTypes	type/type.cpp	/^Type *Type::kTypes[] = {$/;"	m	class:cmudb::Type	typeref:typename:Type * []
keyConf	sqlite/sqlite3.c	/^  u8 keyConf;          \/* What to do in case of uniqueness conflict on iPKey *\/$/;"	m	struct:Table	typeref:typename:u8	file:
key_attrs_	include/index/index.h	/^  const std::vector<int> key_attrs_;$/;"	m	class:cmudb::IndexMetadata	typeref:typename:const std::vector<int>
key_schema_	include/index/generic_key.h	/^  Schema *key_schema_;$/;"	m	class:cmudb::GenericComparator	typeref:typename:Schema *
key_schema_	include/index/index.h	/^  Schema *key_schema_;$/;"	m	class:cmudb::IndexMetadata	typeref:typename:Schema *
keyinfo	sqlite/sqlite3.c	/^  KeyInfo keyinfo;$/;"	m	struct:PreUpdate	typeref:typename:KeyInfo	file:
lastRowid	sqlite/sqlite3.c	/^  i64 lastRowid;                \/* ROWID of most recent insert (see above) *\/$/;"	m	struct:sqlite3	typeref:typename:i64	file:
lastRowid	sqlite/sqlite3.c	/^  i64 lastRowid;          \/* Last insert rowid (sqlite3.lastRowid) *\/$/;"	m	struct:VdbeFrame	typeref:typename:i64	file:
last_insert_rowid	include/sqlite/sqlite3ext.h	/^  sqlite_int64  (*last_insert_rowid)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite_int64 (*)(sqlite3 *)
latch_	include/buffer/buffer_pool_manager.h	/^  std::mutex latch_;             \/\/ to protect shared data structure$/;"	m	class:cmudb::BufferPoolManager	typeref:typename:std::mutex
latch_	include/buffer/lru_replacer.h	/^  mutex latch_;$/;"	m	class:cmudb::LRUReplacer	typeref:typename:mutex
latch_	include/hash/extendible_hash.h	/^    std::mutex latch_;$/;"	m	struct:cmudb::ExtendibleHash::bucket	typeref:typename:std::mutex
latch_	include/hash/extendible_hash.h	/^  std::mutex latch_;$/;"	m	class:cmudb::ExtendibleHash	typeref:typename:std::mutex
latch_	include/logging/log_manager.h	/^  std::mutex latch_;$/;"	m	class:cmudb::LogManager	typeref:typename:std::mutex
len	include/type/value.h	/^    uint32_t len;$/;"	m	union:cmudb::Value::__anon6b93625c010a	typeref:typename:uint32_t
length	include/catalog/schema.h	/^  int32_t length;$/;"	m	class:cmudb::Schema	typeref:typename:int32_t
libversion	include/sqlite/sqlite3ext.h	/^  const char * (*libversion)(void);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const char * (*)(void)
libversion_number	include/sqlite/sqlite3ext.h	/^  int  (*libversion_number)(void);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(void)
likely	sqlite/sqlite3.c	/^#define likely(/;"	d	file:
limit	include/sqlite/sqlite3ext.h	/^  int (*limit)(sqlite3*,int,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,int,int)
limitCode	sqlite/shell.c	/^      int limitCode;            \/* Integer code for that limit *\/$/;"	m	struct:do_meta_command::__anonc53fbaef0608	typeref:typename:int	file:
line_contains_semicolon	sqlite/shell.c	/^static int line_contains_semicolon(const char *z, int N){$/;"	f	typeref:typename:int	file:
line_is_command_terminator	sqlite/shell.c	/^static int line_is_command_terminator(const char *zLine){$/;"	f	typeref:typename:int	file:
line_is_complete	sqlite/shell.c	/^static int line_is_complete(char *zSql, int nSql){$/;"	f	typeref:typename:int	file:
lintDotCommand	sqlite/shell.c	/^static int lintDotCommand($/;"	f	typeref:typename:int	file:
lintFkeyIndexes	sqlite/shell.c	/^static int lintFkeyIndexes($/;"	f	typeref:typename:int	file:
list	sqlite/sqlite3.c	/^    } list;$/;"	m	union:Mem3Block::__anon76f104fc1e0a	typeref:struct:Mem3Block::__anon76f104fc1e0a::__anon76f104fc2008	file:
load_extension	include/sqlite/sqlite3ext.h	/^  int (*load_extension)(sqlite3*,const char*,const char*,char**);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *,const char *,char **)
local_depth_	include/hash/extendible_hash.h	/^    int local_depth_;$/;"	m	struct:cmudb::ExtendibleHash::bucket	typeref:typename:int
local_getline	sqlite/shell.c	/^static char *local_getline(char *zLine, FILE *in){$/;"	f	typeref:typename:char *	file:
localtimeOffset	sqlite/sqlite3.c	/^static sqlite3_int64 localtimeOffset($/;"	f	typeref:typename:sqlite3_int64	file:
lock	hash/extendible_hash.cpp	/^  lock_guard<mutex> lock(bucket_ptr->latch_);$/;"	v	namespace:cmudb	typeref:typename:lock_guard<mutex>
lockMask	sqlite/sqlite3.c	/^  yDbMask lockMask;       \/* Subset of btreeMask that requires a lock *\/$/;"	m	struct:Vdbe	typeref:typename:yDbMask	file:
lock_manager_	include/concurrency/transaction_manager.h	/^  LockManager *lock_manager_;$/;"	m	class:cmudb::TransactionManager	typeref:typename:LockManager *
lock_manager_	include/table/table_heap.h	/^  LockManager *lock_manager_;$/;"	m	class:cmudb::TableHeap	typeref:typename:LockManager *
lock_manager_	include/vtable/virtual_table.h	/^  LockManager *lock_manager_;$/;"	m	class:cmudb::StorageEngine	typeref:typename:LockManager *
log	include/sqlite/sqlite3ext.h	/^  void (*log)(int,const char*,...);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(int,const char *,...)
log_buffer_	include/logging/log_manager.h	/^  char *log_buffer_;$/;"	m	class:cmudb::LogManager	typeref:typename:char *
log_buffer_	include/logging/log_recovery.h	/^  char *log_buffer_;$/;"	m	class:cmudb::LogRecovery	typeref:typename:char *
log_io_	include/disk/disk_manager.h	/^  std::fstream log_io_;$/;"	m	class:cmudb::DiskManager	typeref:typename:std::fstream
log_manager_	include/buffer/buffer_pool_manager.h	/^  LogManager *log_manager_;$/;"	m	class:cmudb::BufferPoolManager	typeref:typename:LogManager *
log_manager_	include/concurrency/transaction_manager.h	/^  LogManager *log_manager_;$/;"	m	class:cmudb::TransactionManager	typeref:typename:LogManager *
log_manager_	include/table/table_heap.h	/^  LogManager *log_manager_;$/;"	m	class:cmudb::TableHeap	typeref:typename:LogManager *
log_manager_	include/vtable/virtual_table.h	/^  LogManager *log_manager_;$/;"	m	class:cmudb::StorageEngine	typeref:typename:LogManager *
log_name_	include/disk/disk_manager.h	/^  std::string log_name_;$/;"	m	class:cmudb::DiskManager	typeref:typename:std::string
log_record_type_	include/logging/log_record.h	/^  LogRecordType log_record_type_ = LogRecordType::INVALID;$/;"	m	class:cmudb::LogRecord	typeref:typename:LogRecordType
lookaside	sqlite/sqlite3.c	/^  Lookaside lookaside;          \/* Lookaside malloc configuration *\/$/;"	m	struct:sqlite3	typeref:typename:Lookaside	file:
lru	sqlite/sqlite3.c	/^    int lru;              \/* Least recently used entry has the smallest value *\/$/;"	m	struct:Parse::yColCache	typeref:typename:int	file:
lsn_	include/logging/log_record.h	/^  lsn_t lsn_ = INVALID_LSN;$/;"	m	class:cmudb::LogRecord	typeref:typename:lsn_t
lsn_	include/page/b_plus_tree_page.h	/^  lsn_t lsn_;$/;"	m	class:cmudb::BPlusTreePage	typeref:typename:lsn_t
lsn_mapping_	include/logging/log_recovery.h	/^  std::unordered_map<lsn_t, int> lsn_mapping_;$/;"	m	class:cmudb::LogRecovery	typeref:typename:std::unordered_map<lsn_t,int>
lsn_t	include/common/config.h	/^typedef int32_t lsn_t;     \/\/ log sequence number type$/;"	t	namespace:cmudb	typeref:typename:int32_t
m	sqlite/sqlite3.c	/^  int h, m;           \/* Hour and minutes *\/$/;"	m	struct:DateTime	typeref:typename:int	file:
m	sqlite/sqlite3.c	/^  sqlite3_mem_methods m;            \/* Low-level memory allocation interface *\/$/;"	m	struct:Sqlite3Config	typeref:typename:sqlite3_mem_methods	file:
mTrace	sqlite/sqlite3.c	/^  u8 mTrace;                    \/* zero or more SQLITE_TRACE flags *\/$/;"	m	struct:sqlite3	typeref:typename:u8	file:
magic	sqlite/sqlite3.c	/^  u32 magic;                    \/* Magic number for detect library misuse *\/$/;"	m	struct:sqlite3	typeref:typename:u32	file:
magic	sqlite/sqlite3.c	/^  u32 magic;              \/* Magic number for sanity checking *\/$/;"	m	struct:Vdbe	typeref:typename:u32	file:
main	sqlite/shell.c	/^int SQLITE_CDECL main(int argc, char **argv){$/;"	f	typeref:typename:int SQLITE_CDECL
mainPrompt	sqlite/shell.c	/^static char mainPrompt[20];     \/* First line prompt. default: "sqlite> "*\/$/;"	v	typeref:typename:char[20]	file:
main_init	sqlite/shell.c	/^static void main_init(ShellState *data) {$/;"	f	typeref:typename:void	file:
malloc	include/sqlite/sqlite3ext.h	/^  void *(*malloc)(int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void * (*)(int)
malloc64	include/sqlite/sqlite3ext.h	/^  void *(*malloc64)(sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void * (*)(sqlite3_uint64)
mallocFailed	sqlite/sqlite3.c	/^  u8 mallocFailed;              \/* True if we have seen a malloc failure *\/$/;"	m	struct:sqlite3	typeref:typename:u8	file:
manage_data_	include/type/value.h	/^  bool manage_data_;$/;"	m	class:cmudb::Value	typeref:typename:bool
map_	include/buffer/lru_replacer.h	/^  unordered_map<T, shared_ptr<Node>> map_;$/;"	m	class:cmudb::LRUReplacer	typeref:typename:unordered_map<T,shared_ptr<Node>>
map_	include/hash/extendible_hash.h	/^    std::map<K, V> map_;$/;"	m	struct:cmudb::ExtendibleHash::bucket	typeref:typename:std::map<K,V>
maskUsed	sqlite/sqlite3.c	/^  u64 maskUsed;           \/* Mask of columns used by this cursor *\/$/;"	m	struct:VdbeCursor	typeref:typename:u64	file:
maxCount	sqlite/sqlite3.c	/^  u32 maxCount;       \/* Maximum instantaneous currentCount *\/$/;"	m	struct:Mem5Global	typeref:typename:u32	file:
maxOut	sqlite/sqlite3.c	/^  u32 maxOut;         \/* Maximum instantaneous currentOut *\/$/;"	m	struct:Mem5Global	typeref:typename:u32	file:
maxRequest	sqlite/sqlite3.c	/^  u32 maxRequest;     \/* Largest allocation (exclusive of internal frag) *\/$/;"	m	struct:Mem5Global	typeref:typename:u32	file:
max_readers_	include/common/rwmutex.h	/^  static const uint32_t max_readers_ = UINT_MAX;$/;"	m	class:cmudb::RWMutex	typeref:typename:const uint32_t
max_size_	include/page/b_plus_tree_page.h	/^  int max_size_;$/;"	m	class:cmudb::BPlusTreePage	typeref:typename:int
mayAbort	sqlite/sqlite3.c	/^  u8 mayAbort;         \/* True if statement may throw an ABORT exception *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
mem	sqlite/sqlite3.c	/^} mem;$/;"	v	typeref:struct:__anon76f104fc1d08
mem3	sqlite/sqlite3.c	/^#define mem3 /;"	d	file:
mem3	sqlite/sqlite3.c	/^} mem3 = { 97535575 };$/;"	v	typeref:struct:Mem3Global
mem5	sqlite/sqlite3.c	/^#define mem5 /;"	d	file:
mem5	sqlite/sqlite3.c	/^} mem5;$/;"	v	typeref:struct:Mem5Global
memIsValid	sqlite/sqlite3.c	/^#define memIsValid(/;"	d	file:
memcpy	sqlite/sqlite3.c	/^# define memcpy(/;"	d	file:
memory_highwater	include/sqlite/sqlite3ext.h	/^  sqlite3_int64 (*memory_highwater)(int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite3_int64 (*)(int)
memory_used	include/sqlite/sqlite3ext.h	/^  sqlite3_int64 (*memory_used)(void);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite3_int64 (*)(void)
memsys3Checkout	sqlite/sqlite3.c	/^static void *memsys3Checkout(u32 i, u32 nBlock){$/;"	f	typeref:typename:void *	file:
memsys3Enter	sqlite/sqlite3.c	/^static void memsys3Enter(void){$/;"	f	typeref:typename:void	file:
memsys3Free	sqlite/sqlite3.c	/^static void memsys3Free(void *pPrior){$/;"	f	typeref:typename:void	file:
memsys3FreeUnsafe	sqlite/sqlite3.c	/^static void memsys3FreeUnsafe(void *pOld){$/;"	f	typeref:typename:void	file:
memsys3FromMaster	sqlite/sqlite3.c	/^static void *memsys3FromMaster(u32 nBlock){$/;"	f	typeref:typename:void *	file:
memsys3Init	sqlite/sqlite3.c	/^static int memsys3Init(void *NotUsed){$/;"	f	typeref:typename:int	file:
memsys3Leave	sqlite/sqlite3.c	/^static void memsys3Leave(void){$/;"	f	typeref:typename:void	file:
memsys3Link	sqlite/sqlite3.c	/^static void memsys3Link(u32 i){$/;"	f	typeref:typename:void	file:
memsys3LinkIntoList	sqlite/sqlite3.c	/^static void memsys3LinkIntoList(u32 i, u32 *pRoot){$/;"	f	typeref:typename:void	file:
memsys3Malloc	sqlite/sqlite3.c	/^static void *memsys3Malloc(int nBytes){$/;"	f	typeref:typename:void *	file:
memsys3MallocUnsafe	sqlite/sqlite3.c	/^static void *memsys3MallocUnsafe(int nByte){$/;"	f	typeref:typename:void *	file:
memsys3Merge	sqlite/sqlite3.c	/^static void memsys3Merge(u32 *pRoot){$/;"	f	typeref:typename:void	file:
memsys3OutOfMemory	sqlite/sqlite3.c	/^static void memsys3OutOfMemory(int nByte){$/;"	f	typeref:typename:void	file:
memsys3Realloc	sqlite/sqlite3.c	/^static void *memsys3Realloc(void *pPrior, int nBytes){$/;"	f	typeref:typename:void *	file:
memsys3Roundup	sqlite/sqlite3.c	/^static int memsys3Roundup(int n){$/;"	f	typeref:typename:int	file:
memsys3Shutdown	sqlite/sqlite3.c	/^static void memsys3Shutdown(void *NotUsed){$/;"	f	typeref:typename:void	file:
memsys3Size	sqlite/sqlite3.c	/^static int memsys3Size(void *p){$/;"	f	typeref:typename:int	file:
memsys3Unlink	sqlite/sqlite3.c	/^static void memsys3Unlink(u32 i){$/;"	f	typeref:typename:void	file:
memsys3UnlinkFromList	sqlite/sqlite3.c	/^static void memsys3UnlinkFromList(u32 i, u32 *pRoot){$/;"	f	typeref:typename:void	file:
memsys5Enter	sqlite/sqlite3.c	/^static void memsys5Enter(void){$/;"	f	typeref:typename:void	file:
memsys5Free	sqlite/sqlite3.c	/^static void memsys5Free(void *pPrior){$/;"	f	typeref:typename:void	file:
memsys5FreeUnsafe	sqlite/sqlite3.c	/^static void memsys5FreeUnsafe(void *pOld){$/;"	f	typeref:typename:void	file:
memsys5Init	sqlite/sqlite3.c	/^static int memsys5Init(void *NotUsed){$/;"	f	typeref:typename:int	file:
memsys5Leave	sqlite/sqlite3.c	/^static void memsys5Leave(void){$/;"	f	typeref:typename:void	file:
memsys5Link	sqlite/sqlite3.c	/^static void memsys5Link(int i, int iLogsize){$/;"	f	typeref:typename:void	file:
memsys5Log	sqlite/sqlite3.c	/^static int memsys5Log(int iValue){$/;"	f	typeref:typename:int	file:
memsys5Malloc	sqlite/sqlite3.c	/^static void *memsys5Malloc(int nBytes){$/;"	f	typeref:typename:void *	file:
memsys5MallocUnsafe	sqlite/sqlite3.c	/^static void *memsys5MallocUnsafe(int nByte){$/;"	f	typeref:typename:void *	file:
memsys5Realloc	sqlite/sqlite3.c	/^static void *memsys5Realloc(void *pPrior, int nBytes){$/;"	f	typeref:typename:void *	file:
memsys5Roundup	sqlite/sqlite3.c	/^static int memsys5Roundup(int n){$/;"	f	typeref:typename:int	file:
memsys5Shutdown	sqlite/sqlite3.c	/^static void memsys5Shutdown(void *NotUsed){$/;"	f	typeref:typename:void	file:
memsys5Size	sqlite/sqlite3.c	/^static int memsys5Size(void *p){$/;"	f	typeref:typename:int	file:
memsys5Unlink	sqlite/sqlite3.c	/^static void memsys5Unlink(int i, int iLogsize){$/;"	f	typeref:typename:void	file:
metadata_	include/index/index.h	/^  IndexMetadata *metadata_;$/;"	m	class:cmudb::Index	typeref:typename:IndexMetadata *
minWriteFileFormat	sqlite/sqlite3.c	/^  u8 minWriteFileFormat;  \/* Minimum file format for writable database files *\/$/;"	m	struct:Vdbe	typeref:typename:u8	file:
mnMaster	sqlite/sqlite3.c	/^  u32 mnMaster;$/;"	m	struct:Mem3Global	typeref:typename:u32	file:
mnReg	sqlite/sqlite3.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	typeref:typename:int	file:
mnReq	sqlite/sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
mode	sqlite/shell.c	/^  int mode;              \/* An output mode setting *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
mode	sqlite/shell.c	/^  int mode;           \/* Mode prior to ".explain on" *\/$/;"	m	struct:SavedModeInfo	typeref:typename:int	file:
modeDescr	sqlite/shell.c	/^static const char *modeDescr[] = {$/;"	v	typeref:typename:const char * []	file:
movetoTarget	sqlite/sqlite3.c	/^  i64 movetoTarget;       \/* Argument to the deferred sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	typeref:typename:i64	file:
mprintf	include/sqlite/sqlite3ext.h	/^  char * (*mprintf)(const char*,...);$/;"	m	struct:sqlite3_api_routines	typeref:typename:char * (*)(const char *,...)
msize	include/sqlite/sqlite3ext.h	/^  sqlite3_uint64 (*msize)(void*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite3_uint64 (*)(void *)
mutex	sqlite/sqlite3.c	/^  pthread_mutex_t mutex;     \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	typeref:typename:pthread_mutex_t	file:
mutex	sqlite/sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Connection mutex *\/$/;"	m	struct:sqlite3	typeref:typename:sqlite3_mutex *	file:
mutex	sqlite/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem3Global	typeref:typename:sqlite3_mutex *	file:
mutex	sqlite/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem5Global	typeref:typename:sqlite3_mutex *	file:
mutex	sqlite/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:__anon76f104fc1d08	typeref:typename:sqlite3_mutex *	file:
mutex	sqlite/sqlite3.c	/^  sqlite3_mutex_methods mutex;      \/* Low-level mutex interface *\/$/;"	m	struct:Sqlite3Config	typeref:typename:sqlite3_mutex_methods	file:
mutexIsInit	sqlite/sqlite3.c	/^static SQLITE_WSD int mutexIsInit = 0;$/;"	v	typeref:typename:SQLITE_WSD int	file:
mutex_	include/common/rwmutex.h	/^  mutex_t mutex_;$/;"	m	class:cmudb::RWMutex	typeref:typename:mutex_t
mutex_alloc	include/sqlite/sqlite3ext.h	/^  sqlite3_mutex *(*mutex_alloc)(int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite3_mutex * (*)(int)
mutex_enter	include/sqlite/sqlite3ext.h	/^  void (*mutex_enter)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_mutex *)
mutex_free	include/sqlite/sqlite3ext.h	/^  void (*mutex_free)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_mutex *)
mutex_leave	include/sqlite/sqlite3ext.h	/^  void (*mutex_leave)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_mutex *)
mutex_t	include/common/rwmutex.h	/^  typedef std::mutex mutex_t;$/;"	t	class:cmudb::RWMutex	typeref:typename:std::mutex
mutex_try	include/sqlite/sqlite3ext.h	/^  int (*mutex_try)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_mutex *)
mxAlloc	sqlite/sqlite3.c	/^  u32  mxAlloc;        \/* Maximum allowed allocation.  0 for no malloc usage *\/$/;"	m	struct:StrAccum	typeref:typename:u32	file:
mxCurrent	sqlite/sqlite3.c	/^  int mxCurrent[NCSIZE];   \/* Highwater mark for nCurrent *\/$/;"	m	struct:__anon76f104fc1d08	typeref:typename:int[]	file:
mxLevel	include/sqlite/sqlite3.h	/^int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int
mxLevel	sqlite/sqlite3.c	/^  int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int	file:
mxMmap	sqlite/sqlite3.c	/^  sqlite3_int64 mxMmap;             \/* Maximum value for szMmap *\/$/;"	m	struct:Sqlite3Config	typeref:typename:sqlite3_int64	file:
mxOut	sqlite/sqlite3.c	/^  int mxOut;              \/* Highwater mark for nOut *\/$/;"	m	struct:Lookaside	typeref:typename:int	file:
mxParserStack	sqlite/sqlite3.c	/^  int mxParserStack;                \/* maximum depth of the parser stack *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
mxPathname	include/sqlite/sqlite3.h	/^int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:int
mxPathname	sqlite/sqlite3.c	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:int	file:
mxReg	sqlite/sqlite3.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	typeref:typename:int	file:
mxReq	sqlite/sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
mxStrlen	sqlite/sqlite3.c	/^  int mxStrlen;                     \/* Maximum string length *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
mxValue	sqlite/sqlite3.c	/^  sqlite3StatValueType mxValue[10];   \/* Maximum value *\/$/;"	m	struct:sqlite3StatType	typeref:typename:sqlite3StatValueType[10]	file:
n	sqlite/shell.c	/^  int n;              \/* Number of bytes in z *\/$/;"	m	struct:ImportCtx	typeref:typename:int	file:
n	sqlite/shell.c	/^  int n;$/;"	m	struct:ShellText	typeref:typename:int	file:
n	sqlite/sqlite3.c	/^    int n;                                    \/* A counter *\/$/;"	m	union:Walker::__anon76f104fc1a0a	typeref:typename:int	file:
n	sqlite/sqlite3.c	/^  int n;              \/* Number of characters in string value, excluding '\\0' *\/$/;"	m	struct:sqlite3_value	typeref:typename:int	file:
n	sqlite/sqlite3.c	/^  int n;            \/* Size of record in bytes *\/$/;"	m	struct:IndexSample	typeref:typename:int	file:
n	sqlite/sqlite3.c	/^  unsigned int n;    \/* Number of characters in this token *\/$/;"	m	struct:Token	typeref:typename:unsigned int	file:
nAccumulator	sqlite/sqlite3.c	/^  int nAccumulator;       \/* Number of columns that show through to the output.$/;"	m	struct:AggInfo	typeref:typename:int	file:
nAlloc	sqlite/shell.c	/^  int nAlloc;         \/* Space allocated for z[] *\/$/;"	m	struct:ImportCtx	typeref:typename:int	file:
nAlloc	sqlite/shell.c	/^  int nAlloc;$/;"	m	struct:ShellText	typeref:typename:int	file:
nAlloc	sqlite/sqlite3.c	/^  int nAlloc;            \/* Number of a[] slots allocated *\/$/;"	m	struct:ExprList	typeref:typename:int	file:
nAlloc	sqlite/sqlite3.c	/^  int nAlloc[NCSIZE];      \/* Total number of allocations *\/$/;"	m	struct:__anon76f104fc1d08	typeref:typename:int[]	file:
nAlloc	sqlite/sqlite3.c	/^  u32  nAlloc;         \/* Amount of space allocated in zText *\/$/;"	m	struct:StrAccum	typeref:typename:u32	file:
nAlloc	sqlite/sqlite3.c	/^  u32 nAlloc;      \/* Number of entries allocated in a[] below *\/$/;"	m	struct:SrcList	typeref:typename:u32	file:
nAlloc	sqlite/sqlite3.c	/^  u64 nAlloc;         \/* Total number of calls to malloc *\/$/;"	m	struct:Mem5Global	typeref:typename:u64	file:
nArg	sqlite/sqlite3.c	/^  i8 nArg;             \/* Number of arguments.  -1 means unlimited *\/$/;"	m	struct:FuncDef	typeref:typename:i8	file:
nArg	sqlite/sqlite3.c	/^  int nArg;                \/* Total number of arguments *\/$/;"	m	struct:PrintfArguments	typeref:typename:int	file:
nAuthPW	sqlite/sqlite3.c	/^  int nAuthPW;                  \/* Size of the zAuthPW in bytes *\/$/;"	m	struct:sqlite3_userauth	typeref:typename:int	file:
nBacktrace	sqlite/sqlite3.c	/^  char nBacktrace;                    \/* Number of backtraces on this alloc *\/$/;"	m	struct:MemBlockHdr	typeref:typename:char	file:
nBacktrace	sqlite/sqlite3.c	/^  int nBacktrace;$/;"	m	struct:__anon76f104fc1d08	typeref:typename:int	file:
nBacktraceSlots	sqlite/sqlite3.c	/^  char nBacktraceSlots;               \/* Available backtrace slots *\/$/;"	m	struct:MemBlockHdr	typeref:typename:char	file:
nBlock	sqlite/sqlite3.c	/^  int nBlock;      \/* Number of szAtom sized blocks in zPool *\/$/;"	m	struct:Mem5Global	typeref:typename:int	file:
nBusy	sqlite/sqlite3.c	/^  int nBusy;                 \/* Incremented with each busy call *\/$/;"	m	struct:BusyHandler	typeref:typename:int	file:
nChange	sqlite/sqlite3.c	/^  int nChange;                  \/* Value returned by sqlite3_changes() *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
nChange	sqlite/sqlite3.c	/^  int nChange;            \/* Number of db changes made since last reset *\/$/;"	m	struct:Vdbe	typeref:typename:int	file:
nChange	sqlite/sqlite3.c	/^  int nChange;            \/* Statement changes (Vdbe.nChange)     *\/$/;"	m	struct:VdbeFrame	typeref:typename:int	file:
nChar	sqlite/sqlite3.c	/^  u32  nChar;          \/* Length of the string so far *\/$/;"	m	struct:StrAccum	typeref:typename:u32	file:
nCheck	sqlite/shell.c	/^  int nCheck;            \/* Number of ".check" commands run *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
nChildCsr	sqlite/sqlite3.c	/^  int nChildCsr;          \/* Number of cursors for child frame *\/$/;"	m	struct:VdbeFrame	typeref:typename:int	file:
nChildMem	sqlite/sqlite3.c	/^  int nChildMem;          \/* Number of memory cells for child frame *\/$/;"	m	struct:VdbeFrame	typeref:typename:int	file:
nCol	sqlite/sqlite3.c	/^  i16 nCol;            \/* Number of columns in this table *\/$/;"	m	struct:Table	typeref:typename:i16	file:
nCol	sqlite/sqlite3.c	/^  int nCol;         \/* Number of columns in this key *\/$/;"	m	struct:FKey	typeref:typename:int	file:
nColCache	sqlite/sqlite3.c	/^  u8 nColCache;        \/* Number of entries in aColCache[] *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
nColumn	sqlite/sqlite3.c	/^  int nColumn;            \/* Number of used entries in aCol[] *\/$/;"	m	struct:AggInfo	typeref:typename:int	file:
nColumn	sqlite/sqlite3.c	/^  u16 nColumn;             \/* Number of columns stored in the index *\/$/;"	m	struct:Index	typeref:typename:u16	file:
nConstraint	include/sqlite/sqlite3.h	/^int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int
nConstraint	sqlite/sqlite3.c	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int	file:
nCoord	include/sqlite/sqlite3.h	/^int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int
nCoord	sqlite/sqlite3.c	/^  int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int	file:
nCsr	sqlite/sqlite3.c	/^  int nCsr;                     \/* Number of cursors required *\/$/;"	m	struct:SubProgram	typeref:typename:int	file:
nCte	sqlite/sqlite3.c	/^  int nCte;                       \/* Number of CTEs in the WITH clause *\/$/;"	m	struct:With	typeref:typename:int	file:
nCurrent	sqlite/sqlite3.c	/^  int nCurrent[NCSIZE];    \/* Current number of allocations *\/$/;"	m	struct:__anon76f104fc1d08	typeref:typename:int[]	file:
nCursor	sqlite/sqlite3.c	/^  int nCursor;            \/* Number of entries in apCsr *\/$/;"	m	struct:VdbeFrame	typeref:typename:int	file:
nCursor	sqlite/sqlite3.c	/^  int nCursor;            \/* Number of slots in apCsr[] *\/$/;"	m	struct:Vdbe	typeref:typename:int	file:
nData	sqlite/sqlite3.c	/^  int nData;              \/* Size of pData.  0 if none. *\/$/;"	m	struct:BtreePayload	typeref:typename:int	file:
nDb	sqlite/sqlite3.c	/^  int nDb;                      \/* Number of backends currently in use *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
nDbChange	sqlite/sqlite3.c	/^  int nDbChange;          \/* Value of db->nChange *\/$/;"	m	struct:VdbeFrame	typeref:typename:int	file:
nDeferredCons	sqlite/sqlite3.c	/^  i64 nDeferredCons;                  \/* Number of deferred fk violations *\/$/;"	m	struct:Savepoint	typeref:typename:i64	file:
nDeferredCons	sqlite/sqlite3.c	/^  i64 nDeferredCons;            \/* Net deferred constraints this transaction. *\/$/;"	m	struct:sqlite3	typeref:typename:i64	file:
nDeferredImmCons	sqlite/sqlite3.c	/^  i64 nDeferredImmCons;               \/* Number of deferred imm fk. *\/$/;"	m	struct:Savepoint	typeref:typename:i64	file:
nDeferredImmCons	sqlite/sqlite3.c	/^  i64 nDeferredImmCons;         \/* Net deferred immediate constraints *\/$/;"	m	struct:sqlite3	typeref:typename:i64	file:
nErr	sqlite/shell.c	/^  int nErr;              \/* Number of errors seen *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
nErr	sqlite/sqlite3.c	/^  int nErr;            \/* Number of errors encountered while resolving names *\/$/;"	m	struct:NameContext	typeref:typename:int	file:
nErr	sqlite/sqlite3.c	/^  int nErr;            \/* Number of errors seen *\/$/;"	m	struct:Parse	typeref:typename:int	file:
nEst	sqlite/sqlite3.c	/^  LogEst nEst;                    \/* Estimated output rows per loop *\/$/;"	m	struct:ScanStatus	typeref:typename:LogEst	file:
nExpr	sqlite/sqlite3.c	/^  int nExpr;             \/* Number of expressions on the list *\/$/;"	m	struct:ExprList	typeref:typename:int	file:
nExtension	sqlite/sqlite3.c	/^  int nExtension;               \/* Number of loaded extensions *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
nField	sqlite/sqlite3.c	/^  i16 nField;             \/* Number of fields in the header *\/$/;"	m	struct:VdbeCursor	typeref:typename:i16	file:
nField	sqlite/sqlite3.c	/^  u16 nField;         \/* Number of entries in apMem[] *\/$/;"	m	struct:UnpackedRecord	typeref:typename:u16	file:
nField	sqlite/sqlite3.c	/^  u16 nField;         \/* Number of key columns in the index *\/$/;"	m	struct:KeyInfo	typeref:typename:u16	file:
nFilter	sqlite/shell.c	/^  int nFilter;             \/* Number of xFilter rejection GLOB patterns *\/$/;"	m	struct:OpenSession	typeref:typename:int	file:
nFkConstraint	sqlite/sqlite3.c	/^  i64 nFkConstraint;      \/* Number of imm. FK constraints this VM *\/$/;"	m	struct:Vdbe	typeref:typename:i64	file:
nFrame	sqlite/sqlite3.c	/^  int nFrame;             \/* Number of frames in pFrame list *\/$/;"	m	struct:Vdbe	typeref:typename:int	file:
nFunc	sqlite/sqlite3.c	/^  int nFunc;              \/* Number of entries in aFunc[] *\/$/;"	m	struct:AggInfo	typeref:typename:int	file:
nHdrParsed	sqlite/sqlite3.c	/^  u16 nHdrParsed;         \/* Number of header fields parsed so far *\/$/;"	m	struct:VdbeCursor	typeref:typename:u16	file:
nHeap	sqlite/sqlite3.c	/^  int nHeap;                        \/* Size of pHeap[] *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
nHeight	sqlite/sqlite3.c	/^  int nHeight;              \/* Expression tree height of current sub-select *\/$/;"	m	struct:Parse	typeref:typename:int	file:
nHeight	sqlite/sqlite3.c	/^  int nHeight;           \/* Height of the tree headed by this node *\/$/;"	m	struct:Expr	typeref:typename:int	file:
nId	sqlite/sqlite3.c	/^  int nId;         \/* Number of identifiers on the list *\/$/;"	m	struct:IdList	typeref:typename:int	file:
nIndent	sqlite/shell.c	/^  int nIndent;           \/* Size of array aiIndent[] *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
nKey	sqlite/sqlite3.c	/^  sqlite3_int64 nKey;     \/* Size of pKey for indexes.  PRIMARY KEY for tabs *\/$/;"	m	struct:BtreePayload	typeref:typename:sqlite3_int64	file:
nKeyCol	sqlite/sqlite3.c	/^  u16 nKeyCol;             \/* Number of columns forming the key *\/$/;"	m	struct:Index	typeref:typename:u16	file:
nLabel	sqlite/sqlite3.c	/^  int nLabel;          \/* Number of labels used *\/$/;"	m	struct:Parse	typeref:typename:int	file:
nLine	sqlite/shell.c	/^  int nLine;          \/* Current line number *\/$/;"	m	struct:ImportCtx	typeref:typename:int	file:
nLoaded	sqlite/shell.c	/^  unsigned nLoaded;      \/* Input bytes loaded into u.x[] so far this cycle *\/$/;"	m	struct:SHA3Context	typeref:typename:unsigned	file:
nLookaside	sqlite/sqlite3.c	/^  int nLookaside;                   \/* Default lookaside buffer count *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
nMaxArg	sqlite/sqlite3.c	/^  int nMaxArg;         \/* Max args passed to user function by sub-program *\/$/;"	m	struct:Parse	typeref:typename:int	file:
nMaxSorterMmap	sqlite/sqlite3.c	/^  int nMaxSorterMmap;           \/* Maximum size of regions mapped by sorter *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
nMem	sqlite/sqlite3.c	/^  int nMem;                     \/* Number of memory cells required *\/$/;"	m	struct:SubProgram	typeref:typename:int	file:
nMem	sqlite/sqlite3.c	/^  int nMem;               \/* Number of entries in aMem *\/$/;"	m	struct:VdbeFrame	typeref:typename:int	file:
nMem	sqlite/sqlite3.c	/^  int nMem;               \/* Number of memory locations currently allocated *\/$/;"	m	struct:Vdbe	typeref:typename:int	file:
nMem	sqlite/sqlite3.c	/^  int nMem;            \/* Number of memory cells used so far *\/$/;"	m	struct:Parse	typeref:typename:int	file:
nMem	sqlite/sqlite3.c	/^  u16 nMem;               \/* Number of aMem[] value.  Might be zero *\/$/;"	m	struct:BtreePayload	typeref:typename:u16	file:
nModuleArg	sqlite/sqlite3.c	/^  int nModuleArg;      \/* Number of arguments to the module *\/$/;"	m	struct:Table	typeref:typename:int	file:
nName	sqlite/sqlite3.c	/^  u8 nName;           \/* Length of th name *\/$/;"	m	struct:__anon76f104fc1c08	typeref:typename:u8	file:
nOp	sqlite/sqlite3.c	/^  int nOp;                      \/* Elements in aOp[] *\/$/;"	m	struct:SubProgram	typeref:typename:int	file:
nOp	sqlite/sqlite3.c	/^  int nOp;                \/* Number of instructions in the program *\/$/;"	m	struct:Vdbe	typeref:typename:int	file:
nOp	sqlite/sqlite3.c	/^  int nOp;                \/* Size of aOp array *\/$/;"	m	struct:VdbeFrame	typeref:typename:int	file:
nOpAlloc	sqlite/sqlite3.c	/^  int nOpAlloc;        \/* Number of slots allocated for Vdbe.aOp[] *\/$/;"	m	struct:Parse	typeref:typename:int	file:
nOrderBy	include/sqlite/sqlite3.h	/^int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int
nOrderBy	sqlite/sqlite3.c	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int	file:
nOut	sqlite/sqlite3.c	/^  int nOut;               \/* Number of buffers currently checked out *\/$/;"	m	struct:Lookaside	typeref:typename:int	file:
nPage	sqlite/sqlite3.c	/^  int nPage;                        \/* Number of pages in pPage[] *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
nParam	include/sqlite/sqlite3.h	/^int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int
nParam	include/sqlite/sqlite3.h	/^int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	typeref:typename:int
nParam	sqlite/sqlite3.c	/^  int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:int	file:
nParam	sqlite/sqlite3.c	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	typeref:typename:int	file:
nPool	sqlite/sqlite3.c	/^  u32 nPool;$/;"	m	struct:Mem3Global	typeref:typename:u32	file:
nProgressOps	sqlite/sqlite3.c	/^  unsigned nProgressOps;        \/* Number of opcodes for progress callback *\/$/;"	m	struct:sqlite3	typeref:typename:unsigned	file:
nQueryLoop	sqlite/sqlite3.c	/^  u32 nQueryLoop;      \/* Est number of iterations of a query (10*log2(N)) *\/$/;"	m	struct:Parse	typeref:typename:u32	file:
nRangeReg	sqlite/sqlite3.c	/^  int nRangeReg;       \/* Size of the temporary register block *\/$/;"	m	struct:Parse	typeref:typename:int	file:
nRate	sqlite/shell.c	/^  unsigned nRate;        \/* Bytes of input accepted per Keccak iteration *\/$/;"	m	struct:SHA3Context	typeref:typename:unsigned	file:
nRef	include/sqlite/sqlite3.h	/^int nRef;                       \/* Number of open cursors *\/$/;"	m	struct:sqlite3_vtab	typeref:typename:int
nRef	sqlite/sqlite3.c	/^  i16 nRef;                      \/* Number of users of this page *\/$/;"	m	struct:PgHdr	typeref:typename:i16	file:
nRef	sqlite/sqlite3.c	/^  int nRef;                       \/* Number of open cursors *\/$/;"	m	struct:sqlite3_vtab	typeref:typename:int	file:
nRef	sqlite/sqlite3.c	/^  int nRef;                 \/* Number of pointers to this structure *\/$/;"	m	struct:VTable	typeref:typename:int	file:
nRef	sqlite/sqlite3.c	/^  int nRef;            \/* Number of names resolved by this context *\/$/;"	m	struct:NameContext	typeref:typename:int	file:
nRef	sqlite/sqlite3.c	/^  int nRef;$/;"	m	struct:FuncDestructor	typeref:typename:int	file:
nRef	sqlite/sqlite3.c	/^  u32 nRef;           \/* Number of references to this KeyInfo object *\/$/;"	m	struct:KeyInfo	typeref:typename:u32	file:
nRef	sqlite/sqlite3.c	/^  volatile int nRef;         \/* Number of entrances *\/$/;"	m	struct:sqlite3_mutex	typeref:typename:volatile int	file:
nRefInitMutex	sqlite/sqlite3.c	/^  int nRefInitMutex;                \/* Number of users of pInitMutex *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
nResColumn	sqlite/sqlite3.c	/^  u16 nResColumn;         \/* Number of columns in one row of the result set *\/$/;"	m	struct:Vdbe	typeref:typename:u16	file:
nRowEst0	sqlite/sqlite3.c	/^  tRowcnt nRowEst0;        \/* Non-logarithmic number of rows in the index *\/$/;"	m	struct:Index	typeref:typename:tRowcnt	file:
nRowLogEst	sqlite/sqlite3.c	/^  LogEst nRowLogEst;   \/* Estimated rows in table - from sqlite_stat1 table *\/$/;"	m	struct:Table	typeref:typename:LogEst	file:
nSample	sqlite/sqlite3.c	/^  int nSample;             \/* Number of elements in aSample[] *\/$/;"	m	struct:Index	typeref:typename:int	file:
nSampleCol	sqlite/sqlite3.c	/^  int nSampleCol;          \/* Size of IndexSample.anEq[] and so on *\/$/;"	m	struct:Index	typeref:typename:int	file:
nSavepoint	sqlite/sqlite3.c	/^  int nSavepoint;               \/* Number of non-transaction savepoints *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
nScan	sqlite/sqlite3.c	/^  int nScan;              \/* Entries in aScan[] *\/$/;"	m	struct:Vdbe	typeref:typename:int	file:
nScratch	sqlite/sqlite3.c	/^  int nScratch;                     \/* Number of scratch buffers *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
nSdst	sqlite/sqlite3.c	/^  int nSdst;           \/* Number of registers allocated *\/$/;"	m	struct:SelectDest	typeref:typename:int	file:
nSelect	sqlite/sqlite3.c	/^  int nSelect;         \/* Number of SELECT statements seen *\/$/;"	m	struct:Parse	typeref:typename:int	file:
nSelectIndent	sqlite/sqlite3.c	/^  int nSelectIndent;   \/* How far to indent SELECTTRACE() output *\/$/;"	m	struct:Parse	typeref:typename:int	file:
nSelectRow	sqlite/sqlite3.c	/^  LogEst nSelectRow;     \/* Estimated number of result rows *\/$/;"	m	struct:Select	typeref:typename:LogEst	file:
nSession	sqlite/shell.c	/^  int nSession;             \/* Number of active sessions *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
nSortingColumn	sqlite/sqlite3.c	/^  int nSortingColumn;     \/* Number of columns in the sorting index *\/$/;"	m	struct:AggInfo	typeref:typename:int	file:
nSqlExec	sqlite/sqlite3.c	/^  u8 nSqlExec;                  \/* Number of pending OP_SqlExec opcodes *\/$/;"	m	struct:sqlite3	typeref:typename:u8	file:
nSrc	sqlite/sqlite3.c	/^  int nSrc;        \/* Number of tables or subqueries in the FROM clause *\/$/;"	m	struct:SrcList	typeref:typename:int	file:
nStatement	sqlite/sqlite3.c	/^  int nStatement;               \/* Number of nested statement-transactions  *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
nStmtDefCons	sqlite/sqlite3.c	/^  i64 nStmtDefCons;       \/* Number of def. constraints when stmt started *\/$/;"	m	struct:Vdbe	typeref:typename:i64	file:
nStmtDefImmCons	sqlite/sqlite3.c	/^  i64 nStmtDefImmCons;    \/* Number of def. imm constraints when stmt started *\/$/;"	m	struct:Vdbe	typeref:typename:i64	file:
nStmtSpill	sqlite/sqlite3.c	/^  int nStmtSpill;                   \/* Stmt-journal spill-to-disk threshold *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
nTab	sqlite/sqlite3.c	/^  int nTab;            \/* Number of previously allocated VDBE cursors *\/$/;"	m	struct:Parse	typeref:typename:int	file:
nTabRef	sqlite/sqlite3.c	/^  u32 nTabRef;         \/* Number of pointers to this Table *\/$/;"	m	struct:Table	typeref:typename:u32	file:
nTableLock	sqlite/sqlite3.c	/^  int nTableLock;        \/* Number of locks in aTableLock *\/$/;"	m	struct:Parse	typeref:typename:int	file:
nTempReg	sqlite/sqlite3.c	/^  u8 nTempReg;         \/* Number of temporary registers in aTempReg[] *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
nTitle	sqlite/sqlite3.c	/^  int nTitle;        \/* Bytes of zTitle to save.  Includes '\\0' and padding *\/$/;"	m	struct:__anon76f104fc1d08	typeref:typename:int	file:
nTitle	sqlite/sqlite3.c	/^  u8 nTitle;                          \/* Bytes of title; includes '\\0' *\/$/;"	m	struct:MemBlockHdr	typeref:typename:u8	file:
nTotalChange	sqlite/sqlite3.c	/^  int nTotalChange;             \/* Value returned by sqlite3_total_changes() *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
nUsed	sqlite/sqlite3.c	/^  int nUsed;               \/* Number of arguments used so far *\/$/;"	m	struct:PrintfArguments	typeref:typename:int	file:
nVDestroy	sqlite/sqlite3.c	/^  int nVDestroy;                \/* Number of active OP_VDestroy operations *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
nVTrans	sqlite/sqlite3.c	/^  int nVTrans;                  \/* Allocated size of aVTrans *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
nVar	sqlite/sqlite3.c	/^  ynVar nVar;               \/* Number of '?' variables seen in the SQL so far *\/$/;"	m	struct:Parse	typeref:typename:ynVar	file:
nVar	sqlite/sqlite3.c	/^  ynVar nVar;             \/* Number of entries in aVar[] *\/$/;"	m	struct:Vdbe	typeref:typename:ynVar	file:
nVdbeActive	sqlite/sqlite3.c	/^  int nVdbeActive;              \/* Number of VDBEs currently running *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
nVdbeExec	sqlite/sqlite3.c	/^  int nVdbeExec;                \/* Number of nested calls to VdbeExec() *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
nVdbeRead	sqlite/sqlite3.c	/^  int nVdbeRead;                \/* Number of active VDBEs that read or write *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
nVdbeWrite	sqlite/sqlite3.c	/^  int nVdbeWrite;               \/* Number of active VDBEs that read and write *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
nVtabLock	sqlite/sqlite3.c	/^  int nVtabLock;            \/* Number of virtual tables to lock *\/$/;"	m	struct:Parse	typeref:typename:int	file:
nXField	sqlite/sqlite3.c	/^  u16 nXField;        \/* Number of columns beyond the key columns *\/$/;"	m	struct:KeyInfo	typeref:typename:u16	file:
nZero	sqlite/sqlite3.c	/^    int nZero;          \/* Used when bit MEM_Zero is set in flags *\/$/;"	m	union:sqlite3_value::MemValue	typeref:typename:int	file:
nZero	sqlite/sqlite3.c	/^  int nZero;              \/* Extra zero data appended after pData,nData *\/$/;"	m	struct:BtreePayload	typeref:typename:int	file:
name_	include/index/index.h	/^  std::string name_;$/;"	m	class:cmudb::IndexMetadata	typeref:typename:std::string
ncFlags	sqlite/sqlite3.c	/^  u16 ncFlags;         \/* Zero or more NC_* flags defined below *\/$/;"	m	struct:NameContext	typeref:typename:u16	file:
needCsvQuote	sqlite/shell.c	/^static const char needCsvQuote[] = {$/;"	v	typeref:typename:const char[]	file:
needToFreeIdxStr	include/sqlite/sqlite3.h	/^int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int
needToFreeIdxStr	sqlite/sqlite3.c	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int	file:
nested	sqlite/sqlite3.c	/^  u8 nested;           \/* Number of nested calls to the parser\/code generator *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
neverCorrupt	sqlite/sqlite3.c	/^  int neverCorrupt;                 \/* Database is always well-formed *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
newTnum	sqlite/sqlite3.c	/^    int newTnum;                \/* Rootpage of table being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	typeref:typename:int	file:
new_tuple_	include/logging/log_record.h	/^  Tuple new_tuple_;$/;"	m	class:cmudb::LogRecord	typeref:typename:Tuple
newmask	sqlite/sqlite3.c	/^  u32 newmask;         \/* Mask of new.* columns referenced *\/$/;"	m	struct:Parse	typeref:typename:u32	file:
next	include/buffer/lru_replacer.h	/^    Node *next;$/;"	m	struct:cmudb::LRUReplacer::Node	typeref:typename:Node *
next	sqlite/sqlite3.c	/^      u32 next;       \/* Index in mem3.aPool[] of next free chunk *\/$/;"	m	struct:Mem3Block::__anon76f104fc1e0a::__anon76f104fc2008	typeref:typename:u32	file:
next	sqlite/sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	typeref:typename:HashElem *	file:
next	sqlite/sqlite3.c	/^  int next;       \/* Index of next free chunk *\/$/;"	m	struct:Mem5Link	typeref:typename:int	file:
nextAutovac	sqlite/sqlite3.c	/^  signed char nextAutovac;      \/* Autovac setting after VACUUM if >=0 *\/$/;"	m	struct:sqlite3	typeref:typename:signed char	file:
nextPagesize	sqlite/sqlite3.c	/^  int nextPagesize;             \/* Pagesize after VACUUM if >0 *\/$/;"	m	struct:sqlite3	typeref:typename:int	file:
next_lsn_	include/logging/log_manager.h	/^  std::atomic<lsn_t> next_lsn_;$/;"	m	class:cmudb::LogManager	typeref:typename:std::atomic<lsn_t>
next_page_id_	include/disk/disk_manager.h	/^  std::atomic<page_id_t> next_page_id_;$/;"	m	class:cmudb::DiskManager	typeref:typename:std::atomic<page_id_t>
next_page_id_	include/page/b_plus_tree_leaf_page.h	/^  page_id_t next_page_id_;$/;"	m	class:cmudb::BPlusTreeLeafPage	typeref:typename:page_id_t
next_stmt	include/sqlite/sqlite3ext.h	/^  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite3_stmt * (*)(sqlite3 *,sqlite3_stmt *)
next_txn_id_	include/concurrency/transaction_manager.h	/^  std::atomic<txn_id_t> next_txn_id_;$/;"	m	class:cmudb::TransactionManager	typeref:typename:std::atomic<txn_id_t>
noSkipScan	sqlite/sqlite3.c	/^  unsigned noSkipScan:1;   \/* Do not try to use skip-scan if true *\/$/;"	m	struct:Index	typeref:typename:unsigned:1	file:
noopMutexAlloc	sqlite/sqlite3.c	/^static sqlite3_mutex *noopMutexAlloc(int id){$/;"	f	typeref:typename:sqlite3_mutex *	file:
noopMutexEnd	sqlite/sqlite3.c	/^static int noopMutexEnd(void){ return SQLITE_OK; }$/;"	f	typeref:typename:int	file:
noopMutexEnter	sqlite/sqlite3.c	/^static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	typeref:typename:void	file:
noopMutexFree	sqlite/sqlite3.c	/^static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	typeref:typename:void	file:
noopMutexInit	sqlite/sqlite3.c	/^static int noopMutexInit(void){ return SQLITE_OK; }$/;"	f	typeref:typename:int	file:
noopMutexLeave	sqlite/sqlite3.c	/^static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	typeref:typename:void	file:
noopMutexTry	sqlite/sqlite3.c	/^static int noopMutexTry(sqlite3_mutex *p){$/;"	f	typeref:typename:int	file:
normalMode	sqlite/shell.c	/^  int normalMode;        \/* Output mode before ".explain on" *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
notIndexed	sqlite/sqlite3.c	/^      unsigned notIndexed :1;    \/* True if there is a NOT INDEXED clause *\/$/;"	m	struct:SrcList::SrcList_item::__anon76f104fc1708	typeref:typename:unsigned:1	file:
notNull	sqlite/sqlite3.c	/^  u8 notNull;      \/* An OE_ code for handling a NOT NULL constraint *\/$/;"	m	struct:Column	typeref:typename:u8	file:
notUsed1	sqlite/sqlite3.c	/^    double notUsed1;            \/* Spacer *\/$/;"	m	union:sqlite3::__anon76f104fc110a	typeref:typename:double	file:
nowValue	sqlite/sqlite3.c	/^  sqlite3StatValueType nowValue[10];  \/* Current value *\/$/;"	m	struct:sqlite3StatType	typeref:typename:sqlite3StatValueType[10]	file:
nullRow	sqlite/sqlite3.c	/^  u8 nullRow;             \/* True if pointing to a row with no data *\/$/;"	m	struct:VdbeCursor	typeref:typename:u8	file:
nullValue	sqlite/shell.c	/^  char nullValue[20];    \/* The text to print when a NULL comes back from$/;"	m	struct:ShellState	typeref:typename:char[20]	file:
num_flushes_	include/disk/disk_manager.h	/^  int num_flushes_;$/;"	m	class:cmudb::DiskManager	typeref:typename:int
offset_	include/logging/log_recovery.h	/^  int offset_;$/;"	m	class:cmudb::LogRecovery	typeref:typename:int
offset_	include/vtable/virtual_table.h	/^  int offset_ = 0;$/;"	m	class:cmudb::Cursor	typeref:typename:int
offsetof	sqlite/sqlite3.c	/^#define offsetof(/;"	d	file:
ofst	sqlite/shell.c	/^  static const struct { const char *zName; int ofst; } aField[] = {$/;"	m	struct:shell_dbinfo_command::__anonc53fbaef0408	typeref:typename:int	file:
okConstFactor	sqlite/sqlite3.c	/^  u8 okConstFactor;    \/* OK to factor out constants *\/$/;"	m	struct:Parse	typeref:typename:u8	file:
old_tuple_	include/logging/log_record.h	/^  Tuple old_tuple_;$/;"	m	class:cmudb::LogRecord	typeref:typename:Tuple
oldmask	sqlite/sqlite3.c	/^  u32 oldmask;         \/* Mask of old.* columns referenced *\/$/;"	m	struct:Parse	typeref:typename:u32	file:
omit	include/sqlite/sqlite3.h	/^unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	typeref:typename:unsigned char
omit	sqlite/sqlite3.c	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	typeref:typename:unsigned char	file:
onError	sqlite/sqlite3.c	/^  u8 onError;              \/* OE_Abort, OE_Ignore, OE_Replace, or OE_None *\/$/;"	m	struct:Index	typeref:typename:u8	file:
one_input_line	sqlite/shell.c	/^static char *one_input_line(FILE *in, char *zPrior, int isContinuation){$/;"	f	typeref:typename:char *	file:
op	include/sqlite/sqlite3.h	/^unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	typeref:typename:unsigned char
op	sqlite/sqlite3.c	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	typeref:typename:unsigned char	file:
op	sqlite/sqlite3.c	/^  int op;                         \/* One of SQLITE_INSERT, UPDATE, DELETE *\/$/;"	m	struct:PreUpdate	typeref:typename:int	file:
op	sqlite/sqlite3.c	/^  u8 op;                  \/* One of TK_DELETE, TK_UPDATE, TK_INSERT         *\/$/;"	m	struct:Trigger	typeref:typename:u8	file:
op	sqlite/sqlite3.c	/^  u8 op;                 \/* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT *\/$/;"	m	struct:Select	typeref:typename:u8	file:
op	sqlite/sqlite3.c	/^  u8 op;                 \/* Operation performed by this node *\/$/;"	m	struct:Expr	typeref:typename:u8	file:
op	sqlite/sqlite3.c	/^  u8 op;               \/* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT *\/$/;"	m	struct:TriggerStep	typeref:typename:u8	file:
op2	sqlite/sqlite3.c	/^  u8 op2;                \/* TK_REGISTER: original value of Expr.op$/;"	m	struct:Expr	typeref:typename:u8	file:
opcode	sqlite/sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOp	typeref:typename:u8	file:
opcode	sqlite/sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOpList	typeref:typename:u8	file:
open	include/sqlite/sqlite3ext.h	/^  int  (*open)(const char*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(const char *,sqlite3 **)
open16	include/sqlite/sqlite3ext.h	/^  int  (*open16)(const void*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(const void *,sqlite3 **)
openFlags	sqlite/sqlite3.c	/^  unsigned int openFlags;       \/* Flags passed to sqlite3_vfs.xOpen() *\/$/;"	m	struct:sqlite3	typeref:typename:unsigned int	file:
open_db	sqlite/shell.c	/^static void open_db(ShellState *p, int keepAlive){$/;"	f	typeref:typename:void	file:
open_v2	include/sqlite/sqlite3ext.h	/^  int (*open_v2)(const char*,sqlite3**,int,const char*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(const char *,sqlite3 **,int,const char *)
operator !=	catalog/schema.cpp	/^bool Schema::operator!=(const Schema &other) const { return !(*this == other); }$/;"	f	class:cmudb::Schema	typeref:typename:bool
operator !=	include/catalog/column.h	/^  bool operator!=(const Column &other) const { return !(*this == other); }$/;"	f	class:cmudb::Column	typeref:typename:bool
operator !=	include/table/table_iterator.h	/^  inline bool operator!=(const TableIterator &itr) const {$/;"	f	class:cmudb::TableIterator	typeref:typename:bool
operator ()	include/common/rid.h	/^  size_t operator()(const cmudb::RID &obj) const {$/;"	f	struct:std::hash	typeref:typename:size_t
operator ()	include/index/generic_key.h	/^  inline int operator()(const GenericKey<KeySize> &lhs,$/;"	f	class:cmudb::GenericComparator	typeref:typename:int
operator *	table/table_iterator.cpp	/^const Tuple &TableIterator::operator*() {$/;"	f	class:cmudb::TableIterator	typeref:typename:const Tuple &
operator ++	include/vtable/virtual_table.h	/^  Cursor &operator++() {$/;"	f	class:cmudb::Cursor	typeref:typename:Cursor &
operator ++	table/table_iterator.cpp	/^TableIterator &TableIterator::operator++() {$/;"	f	class:cmudb::TableIterator	typeref:typename:TableIterator &
operator ++	table/table_iterator.cpp	/^TableIterator TableIterator::operator++(int) {$/;"	f	class:cmudb::TableIterator	typeref:typename:TableIterator
operator ->	table/table_iterator.cpp	/^Tuple *TableIterator::operator->() {$/;"	f	class:cmudb::TableIterator	typeref:typename:Tuple *
operator <<	include/common/rid.h	/^  friend std::ostream &operator<<(std::ostream &os, const RID &rid) {$/;"	f	namespace:cmudb	typeref:typename:std::ostream &
operator <<	include/index/generic_key.h	/^  friend std::ostream &operator<<(std::ostream &os, const GenericKey &key) {$/;"	f	namespace:cmudb	typeref:typename:std::ostream &
operator =	table/tuple.cpp	/^Tuple &Tuple::operator=(const Tuple &other) {$/;"	f	class:cmudb::Tuple	typeref:typename:Tuple &
operator =	type/value.cpp	/^Value &Value::operator=(Value other) {$/;"	f	class:cmudb::Value	typeref:typename:Value &
operator ==	catalog/schema.cpp	/^bool Schema::operator==(const Schema &other) const {$/;"	f	class:cmudb::Schema	typeref:typename:bool
operator ==	include/catalog/column.h	/^  bool operator==(const Column &other) const {$/;"	f	class:cmudb::Column	typeref:typename:bool
operator ==	include/common/rid.h	/^  bool operator==(const RID &other) const {$/;"	f	class:cmudb::RID	typeref:typename:bool
operator ==	include/table/table_iterator.h	/^  inline bool operator==(const TableIterator &itr) const {$/;"	f	class:cmudb::TableIterator	typeref:typename:bool
optionMatch	sqlite/shell.c	/^static int optionMatch(const char *zStr, const char *zOpt){$/;"	f	typeref:typename:int	file:
orconf	sqlite/sqlite3.c	/^  int orconf;             \/* Default ON CONFLICT policy *\/$/;"	m	struct:TriggerPrg	typeref:typename:int	file:
orconf	sqlite/sqlite3.c	/^  u8 orconf;           \/* OE_Rollback etc. *\/$/;"	m	struct:TriggerStep	typeref:typename:u8	file:
orderByConsumed	include/sqlite/sqlite3.h	/^int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int
orderByConsumed	sqlite/sqlite3.c	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	typeref:typename:int	file:
orphanTrigger	sqlite/sqlite3.c	/^    u8 orphanTrigger;           \/* Last statement is orphaned TEMP trigger *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	typeref:typename:u8	file:
osLocaltime	sqlite/sqlite3.c	/^static int osLocaltime(time_t *t, struct tm *pTm){$/;"	f	typeref:typename:int	file:
out	sqlite/shell.c	/^  FILE *out;             \/* Write results here *\/$/;"	m	struct:ShellState	typeref:typename:FILE *	file:
outCount	sqlite/shell.c	/^  int outCount;          \/* Revert to stdout when reaching zero *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
outfile	sqlite/shell.c	/^  char outfile[FILENAME_MAX]; \/* Filename for *out *\/$/;"	m	struct:ShellState	typeref:typename:char[]	file:
outputLogHeader_	include/common/logger.h	/^inline void outputLogHeader_(const char *file, int line, const char *func,$/;"	f	namespace:cmudb	typeref:typename:void
output_c_string	sqlite/shell.c	/^static void output_c_string(FILE *out, const char *z){$/;"	f	typeref:typename:void	file:
output_csv	sqlite/shell.c	/^static void output_csv(ShellState *p, const char *z, int bSep){$/;"	f	typeref:typename:void	file:
output_file_close	sqlite/shell.c	/^static void output_file_close(FILE *f){$/;"	f	typeref:typename:void	file:
output_file_open	sqlite/shell.c	/^static FILE *output_file_open(const char *zFile){$/;"	f	typeref:typename:FILE *	file:
output_hex_blob	sqlite/shell.c	/^static void output_hex_blob(FILE *out, const void *pBlob, int nBlob){$/;"	f	typeref:typename:void	file:
output_html_string	sqlite/shell.c	/^static void output_html_string(FILE *out, const char *z){$/;"	f	typeref:typename:void	file:
output_quoted_escaped_string	sqlite/shell.c	/^static void output_quoted_escaped_string(FILE *out, const char *z){$/;"	f	typeref:typename:void	file:
output_quoted_string	sqlite/shell.c	/^static void output_quoted_string(FILE *out, const char *z){$/;"	f	typeref:typename:void	file:
output_reset	sqlite/shell.c	/^static void output_reset(ShellState *p){$/;"	f	typeref:typename:void	file:
overload_function	include/sqlite/sqlite3ext.h	/^  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char * zFuncName,int nArg)
owner	sqlite/sqlite3.c	/^  volatile pthread_t owner;  \/* Thread that is within this mutex *\/$/;"	m	struct:sqlite3_mutex	typeref:typename:volatile pthread_t	file:
p	sqlite/shell.c	/^  sqlite3_session *p;      \/* The open session *\/$/;"	m	struct:OpenSession	typeref:typename:sqlite3_session *	file:
p	sqlite/sqlite3.c	/^    void *p;               \/* Generic pointer *\/$/;"	m	union:VdbeOp::p4union	typeref:typename:void *	file:
p	sqlite/sqlite3.c	/^  void *p;          \/* Pointer to sampled record *\/$/;"	m	struct:IndexSample	typeref:typename:void *	file:
p1	sqlite/sqlite3.c	/^  int p1;             \/* First operand *\/$/;"	m	struct:VdbeOp	typeref:typename:int	file:
p1	sqlite/sqlite3.c	/^  signed char p1;     \/* First operand *\/$/;"	m	struct:VdbeOpList	typeref:typename:signed char	file:
p2	sqlite/sqlite3.c	/^  int p2;             \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOp	typeref:typename:int	file:
p2	sqlite/sqlite3.c	/^  signed char p2;     \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOpList	typeref:typename:signed char	file:
p3	sqlite/sqlite3.c	/^  int p3;             \/* The third parameter *\/$/;"	m	struct:VdbeOp	typeref:typename:int	file:
p3	sqlite/sqlite3.c	/^  signed char p3;     \/* Third parameter *\/$/;"	m	struct:VdbeOpList	typeref:typename:signed char	file:
p4	sqlite/sqlite3.c	/^  } p4;$/;"	m	struct:VdbeOp	typeref:union:VdbeOp::p4union	file:
p4type	sqlite/sqlite3.c	/^  signed char p4type; \/* One of the P4_xxx constants for p4 *\/$/;"	m	struct:VdbeOp	typeref:typename:signed char	file:
p4union	sqlite/sqlite3.c	/^  union p4union {     \/* fourth parameter *\/$/;"	u	struct:VdbeOp	file:
p5	sqlite/sqlite3.c	/^  u16 p5;             \/* Fifth parameter is an unsigned 16-bit integer *\/$/;"	m	struct:VdbeOp	typeref:typename:u16	file:
pAggInfo	sqlite/sqlite3.c	/^  AggInfo *pAggInfo;     \/* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION *\/$/;"	m	struct:Expr	typeref:typename:AggInfo *	file:
pAggInfo	sqlite/sqlite3.c	/^  AggInfo *pAggInfo;   \/* Information about aggregates at this level *\/$/;"	m	struct:NameContext	typeref:typename:AggInfo *	file:
pAinc	sqlite/sqlite3.c	/^  AutoincInfo *pAinc;  \/* Information about AUTOINCREMENT counters *\/$/;"	m	struct:Parse	typeref:typename:AutoincInfo *	file:
pAltCursor	sqlite/sqlite3.c	/^  VdbeCursor *pAltCursor; \/* Associated index cursor from which to read *\/$/;"	m	struct:VdbeCursor	typeref:typename:VdbeCursor *	file:
pAppData	include/sqlite/sqlite3.h	/^void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:void *
pAppData	include/sqlite/sqlite3.h	/^void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:void *
pAppData	sqlite/sqlite3.c	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:void *	file:
pAppData	sqlite/sqlite3.c	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:void *	file:
pArg	include/sqlite/sqlite3.h	/^void *pArg;$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void *
pArg	include/sqlite/sqlite3.h	/^void *pArg;$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void *
pArg	sqlite/sqlite3.c	/^  void *pArg;                \/* First arg to busy callback *\/$/;"	m	struct:BusyHandler	typeref:typename:void *	file:
pArg	sqlite/sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void *	file:
pArg	sqlite/sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void *	file:
pAuthArg	sqlite/sqlite3.c	/^  void *pAuthArg;               \/* 1st argument to the access auth function *\/$/;"	m	struct:sqlite3	typeref:typename:void *	file:
pAux	sqlite/sqlite3.c	/^  void *pAux;                          \/* pAux passed to create_module() *\/$/;"	m	struct:Module	typeref:typename:void *	file:
pAux	sqlite/sqlite3.c	/^  void *pAux;                     \/* Aux data pointer *\/$/;"	m	struct:AuxData	typeref:typename:void *	file:
pAuxData	sqlite/sqlite3.c	/^  AuxData *pAuxData;      \/* Linked list of auxdata allocations *\/$/;"	m	struct:Vdbe	typeref:typename:AuxData *	file:
pAuxData	sqlite/sqlite3.c	/^  AuxData *pAuxData;      \/* Linked list of auxdata allocations *\/$/;"	m	struct:VdbeFrame	typeref:typename:AuxData *	file:
pBlockingConnection	sqlite/sqlite3.c	/^  sqlite3 *pBlockingConnection; \/* Connection that caused SQLITE_LOCKED *\/$/;"	m	struct:sqlite3	typeref:typename:sqlite3 *	file:
pBt	sqlite/sqlite3.c	/^  Btree *pBt;          \/* The B*Tree structure for this database file *\/$/;"	m	struct:Db	typeref:typename:Btree *	file:
pBtx	sqlite/sqlite3.c	/^  Btree *pBtx;            \/* Separate file holding temporary table *\/$/;"	m	struct:VdbeCursor	typeref:typename:Btree *	file:
pBuf	include/sqlite/sqlite3.h	/^void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page	typeref:typename:void *
pBuf	sqlite/sqlite3.c	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page	typeref:typename:void *	file:
pCCurHint	sqlite/sqlite3.c	/^    struct CCurHint *pCCurHint;               \/* Used by codeCursorHint() *\/$/;"	m	union:Walker::__anon76f104fc1a0a	typeref:struct:CCurHint *	file:
pCache	sqlite/sqlite3.c	/^  PCache *pCache;                \/* PRIVATE: Cache that owns this page *\/$/;"	m	struct:PgHdr	typeref:typename:PCache *	file:
pCheck	sqlite/sqlite3.c	/^  ExprList *pCheck;    \/* All CHECK constraints *\/$/;"	m	struct:Table	typeref:typename:ExprList *	file:
pColl	sqlite/sqlite3.c	/^    CollSeq *pColl;        \/* Used when p4type is P4_COLLSEQ *\/$/;"	m	union:VdbeOp::p4union	typeref:typename:CollSeq *	file:
pCollNeededArg	sqlite/sqlite3.c	/^  void *pCollNeededArg;$/;"	m	struct:sqlite3	typeref:typename:void *	file:
pCols	sqlite/sqlite3.c	/^    ExprList *pCols;                \/* List of explicit column names, or NULL *\/$/;"	m	struct:With::Cte	typeref:typename:ExprList *	file:
pColumns	sqlite/sqlite3.c	/^  IdList *pColumns;       \/* If this is an UPDATE OF <column-list> trigger,$/;"	m	struct:Trigger	typeref:typename:IdList *	file:
pCommitArg	sqlite/sqlite3.c	/^  void *pCommitArg;                 \/* Argument to xCommitCallback() *\/$/;"	m	struct:sqlite3	typeref:typename:void *	file:
pConstExpr	sqlite/sqlite3.c	/^  ExprList *pConstExpr;\/* Constant expressions *\/$/;"	m	struct:Parse	typeref:typename:ExprList *	file:
pContext	include/sqlite/sqlite3.h	/^void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:void *
pContext	include/sqlite/sqlite3.h	/^void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	typeref:typename:void *
pContext	sqlite/sqlite3.c	/^  void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:void *	file:
pContext	sqlite/sqlite3.c	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	typeref:typename:void *	file:
pCsr	sqlite/sqlite3.c	/^  VdbeCursor *pCsr;               \/* Cursor to read old values from *\/$/;"	m	struct:PreUpdate	typeref:typename:VdbeCursor *	file:
pCtx	sqlite/sqlite3.c	/^    sqlite3_context *pCtx; \/* Used when p4type is P4_FUNCCTX *\/$/;"	m	union:VdbeOp::p4union	typeref:typename:sqlite3_context *	file:
pCursor	sqlite/sqlite3.c	/^    BtCursor *pCursor;          \/* CURTYPE_BTREE.  Btree cursor *\/$/;"	m	union:VdbeCursor::__anon76f104fc1b0a	typeref:typename:BtCursor *	file:
pData	sqlite/sqlite3.c	/^  const void *pData;      \/* Data for tables.  NULL for indexes *\/$/;"	m	struct:BtreePayload	typeref:typename:const void *	file:
pData	sqlite/sqlite3.c	/^  void *pData;                   \/* Page data *\/$/;"	m	struct:PgHdr	typeref:typename:void *	file:
pDef	sqlite/sqlite3.c	/^    FuncDef *pDef;      \/* Used only when flags==MEM_Agg *\/$/;"	m	union:sqlite3_value::MemValue	typeref:typename:FuncDef *	file:
pDelFrame	sqlite/sqlite3.c	/^  VdbeFrame *pDelFrame;   \/* List of frame objects to free on VM reset *\/$/;"	m	struct:Vdbe	typeref:typename:VdbeFrame *	file:
pDestructor	sqlite/sqlite3.c	/^    FuncDestructor *pDestructor;   \/* Reference counted destructor function *\/$/;"	m	union:FuncDef::__anon76f104fc120a	typeref:typename:FuncDestructor *	file:
pDflt	sqlite/sqlite3.c	/^  Expr *pDflt;     \/* Default value of this column *\/$/;"	m	struct:Column	typeref:typename:Expr *	file:
pDfltColl	sqlite/sqlite3.c	/^  CollSeq *pDfltColl;           \/* The default collating sequence (BINARY) *\/$/;"	m	struct:sqlite3	typeref:typename:CollSeq *	file:
pDirty	sqlite/sqlite3.c	/^  PgHdr *pDirty;                 \/* Transient list of dirty sorted by pgno *\/$/;"	m	struct:PgHdr	typeref:typename:PgHdr *	file:
pDirtyNext	sqlite/sqlite3.c	/^  PgHdr *pDirtyNext;             \/* Next element in list of dirty pages *\/$/;"	m	struct:PgHdr	typeref:typename:PgHdr *	file:
pDirtyPrev	sqlite/sqlite3.c	/^  PgHdr *pDirtyPrev;             \/* Previous element in list of dirty pages *\/$/;"	m	struct:PgHdr	typeref:typename:PgHdr *	file:
pDisconnect	sqlite/sqlite3.c	/^  VTable *pDisconnect;    \/* Disconnect these in next sqlite3_prepare() *\/$/;"	m	struct:sqlite3	typeref:typename:VTable *	file:
pEList	sqlite/sqlite3.c	/^  ExprList *pEList;      \/* The fields of the result *\/$/;"	m	struct:Select	typeref:typename:ExprList *	file:
pEList	sqlite/sqlite3.c	/^  ExprList *pEList;    \/* Optional list of result-set columns *\/$/;"	m	struct:NameContext	typeref:typename:ExprList *	file:
pEnd	sqlite/sqlite3.c	/^  void *pEnd;             \/* First byte past end of available space *\/$/;"	m	struct:Lookaside	typeref:typename:void *	file:
pEpoTab	sqlite/sqlite3.c	/^  Table *pEpoTab;                      \/* Eponymous table for this module *\/$/;"	m	struct:Module	typeref:typename:Table *	file:
pErr	sqlite/sqlite3.c	/^  sqlite3_value *pErr;          \/* Most recent error message *\/$/;"	m	struct:sqlite3	typeref:typename:sqlite3_value *	file:
pExpr	sqlite/sqlite3.c	/^    Expr *pExpr;             \/* Expression encoding the function *\/$/;"	m	struct:AggInfo::AggInfo_func	typeref:typename:Expr *	file:
pExpr	sqlite/sqlite3.c	/^    Expr *pExpr;             \/* The original expression *\/$/;"	m	struct:AggInfo::AggInfo_col	typeref:typename:Expr *	file:
pExpr	sqlite/sqlite3.c	/^    Expr *pExpr;            \/* The parse tree for this expression *\/$/;"	m	struct:ExprList::ExprList_item	typeref:typename:Expr *	file:
pExpr	sqlite/sqlite3.c	/^    Expr *pExpr;           \/* Used when p4type is P4_EXPR *\/$/;"	m	union:VdbeOp::p4union	typeref:typename:Expr *	file:
pExpr	sqlite/sqlite3.c	/^  Expr *pExpr;          \/* The expression parse tree *\/$/;"	m	struct:ExprSpan	typeref:typename:Expr *	file:
pExprList	sqlite/sqlite3.c	/^  ExprList *pExprList; \/* SET clause for UPDATE. *\/$/;"	m	struct:TriggerStep	typeref:typename:ExprList *	file:
pExtra	include/sqlite/sqlite3.h	/^void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page	typeref:typename:void *
pExtra	sqlite/sqlite3.c	/^  void *pExtra;                  \/* Extra content *\/$/;"	m	struct:PgHdr	typeref:typename:void *	file:
pExtra	sqlite/sqlite3.c	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page	typeref:typename:void *	file:
pFKey	sqlite/sqlite3.c	/^  FKey *pFKey;         \/* Linked list of all foreign keys in this table *\/$/;"	m	struct:Table	typeref:typename:FKey *	file:
pFiller	sqlite/sqlite3.c	/^  void *pFiller;      \/* So that sizeof(Mem) is a multiple of 8 *\/$/;"	m	struct:sqlite3_value	typeref:typename:void *	file:
pFirst	sqlite/sqlite3.c	/^  struct MemBlockHdr *pFirst;$/;"	m	struct:__anon76f104fc1d08	typeref:struct:MemBlockHdr *	file:
pFrame	sqlite/sqlite3.c	/^    VdbeFrame *pFrame;  \/* Used when flags==MEM_Frame *\/$/;"	m	union:sqlite3_value::MemValue	typeref:typename:VdbeFrame *	file:
pFrame	sqlite/sqlite3.c	/^  VdbeFrame *pFrame;      \/* Parent frame *\/$/;"	m	struct:Vdbe	typeref:typename:VdbeFrame *	file:
pFree	sqlite/sqlite3.c	/^  LookasideSlot *pFree;   \/* List of available buffers *\/$/;"	m	struct:Lookaside	typeref:typename:LookasideSlot *	file:
pFree	sqlite/sqlite3.c	/^  void *pFree;            \/* Free this when deleting the vdbe *\/$/;"	m	struct:Vdbe	typeref:typename:void *	file:
pFrom	sqlite/sqlite3.c	/^  Table *pFrom;     \/* Table containing the REFERENCES clause (aka: Child) *\/$/;"	m	struct:FKey	typeref:typename:Table *	file:
pFunc	sqlite/sqlite3.c	/^    FuncDef *pFunc;          \/* The aggregate function implementation *\/$/;"	m	struct:AggInfo::AggInfo_func	typeref:typename:FuncDef *	file:
pFunc	sqlite/sqlite3.c	/^    FuncDef *pFunc;        \/* Used when p4type is P4_FUNCDEF *\/$/;"	m	union:VdbeOp::p4union	typeref:typename:FuncDef *	file:
pFunc	sqlite/sqlite3.c	/^  FuncDef *pFunc;         \/* Pointer to function information *\/$/;"	m	struct:sqlite3_context	typeref:typename:FuncDef *	file:
pFuncArg	sqlite/sqlite3.c	/^      ExprList *pFuncArg;  \/* Arguments to table-valued-function *\/$/;"	m	union:SrcList::SrcList_item::__anon76f104fc180a	typeref:typename:ExprList *	file:
pGroupBy	sqlite/sqlite3.c	/^    ExprList *pGroupBy;                       \/* GROUP BY clause *\/$/;"	m	union:Walker::__anon76f104fc1a0a	typeref:typename:ExprList *	file:
pGroupBy	sqlite/sqlite3.c	/^  ExprList *pGroupBy;     \/* The group by clause *\/$/;"	m	struct:AggInfo	typeref:typename:ExprList *	file:
pGroupBy	sqlite/sqlite3.c	/^  ExprList *pGroupBy;    \/* The GROUP BY clause *\/$/;"	m	struct:Select	typeref:typename:ExprList *	file:
pHash	sqlite/sqlite3.c	/^    FuncDef *pHash;      \/* Next with a different name but the same hash *\/$/;"	m	union:FuncDef::__anon76f104fc120a	typeref:typename:FuncDef *	file:
pHaving	sqlite/sqlite3.c	/^  Expr *pHaving;         \/* The HAVING clause *\/$/;"	m	struct:Select	typeref:typename:Expr *	file:
pHavingCtx	sqlite/sqlite3.c	/^    struct HavingToWhereCtx *pHavingCtx;      \/* HAVING to WHERE clause ctx *\/$/;"	m	union:Walker::__anon76f104fc1a0a	typeref:struct:HavingToWhereCtx *	file:
pHeap	sqlite/sqlite3.c	/^  void *pHeap;                      \/* Heap storage space *\/$/;"	m	struct:Sqlite3Config	typeref:typename:void *	file:
pI64	sqlite/sqlite3.c	/^    i64 *pI64;             \/* Used when p4type is P4_INT64 *\/$/;"	m	union:VdbeOp::p4union	typeref:typename:i64 *	file:
pIBIndex	sqlite/sqlite3.c	/^    Index *pIBIndex;  \/* Index structure corresponding to u1.zIndexedBy *\/$/;"	m	struct:SrcList::SrcList_item	typeref:typename:Index *	file:
pIdList	sqlite/sqlite3.c	/^  IdList *pIdList;     \/* Column names for INSERT *\/$/;"	m	struct:TriggerStep	typeref:typename:IdList *	file:
pIdxCover	sqlite/sqlite3.c	/^    struct IdxCover *pIdxCover;               \/* Check for index coverage *\/$/;"	m	union:Walker::__anon76f104fc1a0a	typeref:struct:IdxCover *	file:
pIdxTrans	sqlite/sqlite3.c	/^    struct IdxExprTrans *pIdxTrans;           \/* Convert indexed expr to column *\/$/;"	m	union:Walker::__anon76f104fc1a0a	typeref:struct:IdxExprTrans *	file:
pIndex	sqlite/sqlite3.c	/^  Index *pIndex;       \/* List of SQL indexes on this table. *\/$/;"	m	struct:Table	typeref:typename:Index *	file:
pInitMutex	sqlite/sqlite3.c	/^  sqlite3_mutex *pInitMutex;        \/* Mutex used by sqlite3_initialize() *\/$/;"	m	struct:Sqlite3Config	typeref:typename:sqlite3_mutex *	file:
pKey	sqlite/sqlite3.c	/^  const char *pKey;            \/* Key associated with this element *\/$/;"	m	struct:HashElem	typeref:typename:const char *	file:
pKey	sqlite/sqlite3.c	/^  const void *pKey;       \/* Key content for indexes.  NULL for tables *\/$/;"	m	struct:BtreePayload	typeref:typename:const void *	file:
pKeyInfo	sqlite/sqlite3.c	/^    KeyInfo *pKeyInfo;     \/* Used when p4type is P4_KEYINFO *\/$/;"	m	union:VdbeOp::p4union	typeref:typename:KeyInfo *	file:
pKeyInfo	sqlite/sqlite3.c	/^  KeyInfo *pKeyInfo;      \/* Info about index keys needed by index cursors *\/$/;"	m	struct:VdbeCursor	typeref:typename:KeyInfo *	file:
pKeyInfo	sqlite/sqlite3.c	/^  KeyInfo *pKeyInfo;  \/* Collation and sort-order information *\/$/;"	m	struct:UnpackedRecord	typeref:typename:KeyInfo *	file:
pLast	sqlite/sqlite3.c	/^  TriggerStep *pLast;  \/* Last element in link-list. Valid for 1st elem only *\/$/;"	m	struct:TriggerStep	typeref:typename:TriggerStep *	file:
pLast	sqlite/sqlite3.c	/^  struct MemBlockHdr *pLast;$/;"	m	struct:__anon76f104fc1d08	typeref:struct:MemBlockHdr *	file:
pLeft	sqlite/sqlite3.c	/^  Expr *pLeft;           \/* Left subnode *\/$/;"	m	struct:Expr	typeref:typename:Expr *	file:
pLimit	sqlite/sqlite3.c	/^  Expr *pLimit;          \/* LIMIT expression. NULL means not used. *\/$/;"	m	struct:Select	typeref:typename:Expr *	file:
pList	sqlite/sqlite3.c	/^    ExprList *pList;     \/* op = IN, EXISTS, SELECT, CASE, FUNCTION, BETWEEN *\/$/;"	m	union:Expr::__anon76f104fc140a	typeref:typename:ExprList *	file:
pLog	sqlite/shell.c	/^  FILE *pLog;            \/* Write log output here *\/$/;"	m	struct:ShellState	typeref:typename:FILE *	file:
pLogArg	sqlite/sqlite3.c	/^  void *pLogArg;                       \/* First argument to xLog() *\/$/;"	m	struct:Sqlite3Config	typeref:typename:void *	file:
pMem	sqlite/sqlite3.c	/^    Mem *pMem;             \/* Used when p4type is P4_MEM *\/$/;"	m	union:VdbeOp::p4union	typeref:typename:Mem *	file:
pMem	sqlite/sqlite3.c	/^  Mem *pMem;              \/* Memory cell used to store aggregate context *\/$/;"	m	struct:sqlite3_context	typeref:typename:Mem *	file:
pMethods	include/sqlite/sqlite3.h	/^const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:typename:const struct sqlite3_io_methods *
pMethods	sqlite/sqlite3.c	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:typename:const struct sqlite3_io_methods *	file:
pMod	sqlite/sqlite3.c	/^  Module *pMod;             \/* Pointer to module implementation *\/$/;"	m	struct:VTable	typeref:typename:Module *	file:
pModule	include/sqlite/sqlite3.h	/^const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	typeref:typename:const sqlite3_module *
pModule	sqlite/sqlite3.c	/^  const sqlite3_module *pModule;       \/* Callback pointers *\/$/;"	m	struct:Module	typeref:typename:const sqlite3_module *	file:
pModule	sqlite/sqlite3.c	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	typeref:typename:const sqlite3_module *	file:
pNC	sqlite/sqlite3.c	/^    NameContext *pNC;                         \/* Naming context *\/$/;"	m	union:Walker::__anon76f104fc1a0a	typeref:typename:NameContext *	file:
pName	sqlite/sqlite3.c	/^  const Token *pName; \/* Name of the container - used for error messages *\/$/;"	m	struct:DbFixer	typeref:typename:const Token *	file:
pNewTable	sqlite/sqlite3.c	/^  Table *pNewTable;         \/* A table being constructed by CREATE TABLE *\/$/;"	m	struct:Parse	typeref:typename:Table *	file:
pNewTrigger	sqlite/sqlite3.c	/^  Trigger *pNewTrigger;     \/* Trigger under construct by a CREATE TRIGGER *\/$/;"	m	struct:Parse	typeref:typename:Trigger *	file:
pNewUnpacked	sqlite/sqlite3.c	/^  UnpackedRecord *pNewUnpacked;   \/* Unpacked version of new.* record *\/$/;"	m	struct:PreUpdate	typeref:typename:UnpackedRecord *	file:
pNext	include/sqlite/sqlite3.h	/^sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:sqlite3_vfs *
pNext	sqlite/sqlite3.c	/^  AutoincInfo *pNext;   \/* Next info block in a list of them all *\/$/;"	m	struct:AutoincInfo	typeref:typename:AutoincInfo *	file:
pNext	sqlite/sqlite3.c	/^  FuncDef *pNext;      \/* Next function with same name *\/$/;"	m	struct:FuncDef	typeref:typename:FuncDef *	file:
pNext	sqlite/sqlite3.c	/^  Index *pNext;            \/* The next index associated with the same table *\/$/;"	m	struct:Index	typeref:typename:Index *	file:
pNext	sqlite/sqlite3.c	/^  LookasideSlot *pNext;    \/* Next buffer in the list of free buffers *\/$/;"	m	struct:LookasideSlot	typeref:typename:LookasideSlot *	file:
pNext	sqlite/sqlite3.c	/^  NameContext *pNext;  \/* Next outer name context.  NULL for outermost *\/$/;"	m	struct:NameContext	typeref:typename:NameContext *	file:
pNext	sqlite/sqlite3.c	/^  Savepoint *pNext;                   \/* Parent savepoint (if any) *\/$/;"	m	struct:Savepoint	typeref:typename:Savepoint *	file:
pNext	sqlite/sqlite3.c	/^  Select *pNext;         \/* Next select to the left in a compound *\/$/;"	m	struct:Select	typeref:typename:Select *	file:
pNext	sqlite/sqlite3.c	/^  SubProgram *pNext;            \/* Next sub-program already visited *\/$/;"	m	struct:SubProgram	typeref:typename:SubProgram *	file:
pNext	sqlite/sqlite3.c	/^  Trigger *pNext;         \/* Next trigger associated with the table *\/$/;"	m	struct:Trigger	typeref:typename:Trigger *	file:
pNext	sqlite/sqlite3.c	/^  TriggerPrg *pNext;      \/* Next entry in Parse.pTriggerPrg list *\/$/;"	m	struct:TriggerPrg	typeref:typename:TriggerPrg *	file:
pNext	sqlite/sqlite3.c	/^  TriggerStep *pNext;  \/* Next in the link-list *\/$/;"	m	struct:TriggerStep	typeref:typename:TriggerStep *	file:
pNext	sqlite/sqlite3.c	/^  VTable *pNext;            \/* Next in linked list (see above) *\/$/;"	m	struct:VTable	typeref:typename:VTable *	file:
pNext	sqlite/sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	typeref:typename:Vdbe **	file:
pNext	sqlite/sqlite3.c	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:sqlite3_vfs *	file:
pNext	sqlite/sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr *	file:
pNextAux	sqlite/sqlite3.c	/^  AuxData *pNextAux;              \/* Next element in list *\/$/;"	m	struct:AuxData	typeref:typename:AuxData *	file:
pNextBlocked	sqlite/sqlite3.c	/^  sqlite3 *pNextBlocked;        \/* Next in list of all blocked connections *\/$/;"	m	struct:sqlite3	typeref:typename:sqlite3 *	file:
pNextFrom	sqlite/sqlite3.c	/^  FKey *pNextFrom;  \/* Next FKey with the same in pFrom. Next parent of pFrom *\/$/;"	m	struct:FKey	typeref:typename:FKey *	file:
pNextTo	sqlite/sqlite3.c	/^  FKey *pNextTo;    \/* Next with the same zTo. Next child of zTo. *\/$/;"	m	struct:FKey	typeref:typename:FKey *	file:
pNextZombie	sqlite/sqlite3.c	/^  Table *pNextZombie;  \/* Next on the Parse.pZombieTab list *\/$/;"	m	struct:Table	typeref:typename:Table *	file:
pOffset	sqlite/sqlite3.c	/^  Expr *pOffset;         \/* OFFSET expression. NULL means not used. *\/$/;"	m	struct:Select	typeref:typename:Expr *	file:
pOn	sqlite/sqlite3.c	/^    Expr *pOn;        \/* The ON clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	typeref:typename:Expr *	file:
pOrderBy	sqlite/sqlite3.c	/^  ExprList *pOrderBy;    \/* The ORDER BY clause *\/$/;"	m	struct:Select	typeref:typename:ExprList *	file:
pOrderBy	sqlite/sqlite3.c	/^  ExprList *pOrderBy;  \/* Key columns for SRT_Queue and SRT_DistQueue *\/$/;"	m	struct:SelectDest	typeref:typename:ExprList *	file:
pOut	sqlite/sqlite3.c	/^  Mem *pOut;              \/* The return value is stored here *\/$/;"	m	struct:sqlite3_context	typeref:typename:Mem *	file:
pOuter	sqlite/sqlite3.c	/^  With *pOuter;                   \/* Containing WITH clause, or NULL *\/$/;"	m	struct:With	typeref:typename:With *	file:
pPage	sqlite/sqlite3.c	/^  sqlite3_pcache_page *pPage;    \/* Pcache object page handle *\/$/;"	m	struct:PgHdr	typeref:typename:sqlite3_pcache_page *	file:
pPage	sqlite/sqlite3.c	/^  void *pPage;                      \/* Page cache memory *\/$/;"	m	struct:Sqlite3Config	typeref:typename:void *	file:
pPager	sqlite/sqlite3.c	/^  Pager *pPager;                 \/* The pager this page is part of *\/$/;"	m	struct:PgHdr	typeref:typename:Pager *	file:
pParent	sqlite/sqlite3.c	/^  VdbeFrame *pParent;     \/* Parent of this frame, or NULL if parent is main *\/$/;"	m	struct:VdbeFrame	typeref:typename:VdbeFrame *	file:
pParse	sqlite/sqlite3.c	/^  Parse *pParse;                            \/* Parser context.  *\/$/;"	m	struct:Walker	typeref:typename:Parse *	file:
pParse	sqlite/sqlite3.c	/^  Parse *pParse;              \/* The Parse structure *\/$/;"	m	struct:AuthContext	typeref:typename:Parse *	file:
pParse	sqlite/sqlite3.c	/^  Parse *pParse;          \/* Parsing context used to create this Vdbe *\/$/;"	m	struct:Vdbe	typeref:typename:Parse *	file:
pParse	sqlite/sqlite3.c	/^  Parse *pParse;       \/* The parser *\/$/;"	m	struct:NameContext	typeref:typename:Parse *	file:
pParse	sqlite/sqlite3.c	/^  Parse *pParse;      \/* The parsing context.  Error messages written here *\/$/;"	m	struct:DbFixer	typeref:typename:Parse *	file:
pPartIdxWhere	sqlite/sqlite3.c	/^  Expr *pPartIdxWhere;     \/* WHERE clause for partial indices *\/$/;"	m	struct:Index	typeref:typename:Expr *	file:
pPk	sqlite/sqlite3.c	/^  Index *pPk;                     \/* PK index if pTab is WITHOUT ROWID *\/$/;"	m	struct:PreUpdate	typeref:typename:Index *	file:
pPreUpdate	sqlite/sqlite3.c	/^  PreUpdate *pPreUpdate;        \/* Context for active pre-update callback *\/$/;"	m	struct:sqlite3	typeref:typename:PreUpdate *	file:
pPreUpdateArg	sqlite/sqlite3.c	/^  void *pPreUpdateArg;          \/* First argument to xPreUpdateCallback *\/$/;"	m	struct:sqlite3	typeref:typename:void *	file:
pPrev	sqlite/sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	typeref:typename:Vdbe *	file:
pPrev	sqlite/sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr **	file:
pPrevTo	sqlite/sqlite3.c	/^  FKey *pPrevTo;    \/* Previous with the same zTo *\/$/;"	m	struct:FKey	typeref:typename:FKey *	file:
pPrior	sqlite/sqlite3.c	/^  Select *pPrior;        \/* Prior select in a compound select statement *\/$/;"	m	struct:Select	typeref:typename:Select *	file:
pProfileArg	sqlite/sqlite3.c	/^  void *pProfileArg;                        \/* Argument to profile function *\/$/;"	m	struct:sqlite3	typeref:typename:void *	file:
pProgram	sqlite/sqlite3.c	/^    SubProgram *pProgram;  \/* Used when p4type is P4_SUBPROGRAM *\/$/;"	m	union:VdbeOp::p4union	typeref:typename:SubProgram *	file:
pProgram	sqlite/sqlite3.c	/^  SubProgram *pProgram;   \/* Linked list of all sub-programs used by VM *\/$/;"	m	struct:Vdbe	typeref:typename:SubProgram *	file:
pProgram	sqlite/sqlite3.c	/^  SubProgram *pProgram;   \/* Program implementing pTrigger\/orconf *\/$/;"	m	struct:TriggerPrg	typeref:typename:SubProgram *	file:
pProgressArg	sqlite/sqlite3.c	/^  void *pProgressArg;           \/* Argument to the progress callback *\/$/;"	m	struct:sqlite3	typeref:typename:void *	file:
pReal	sqlite/sqlite3.c	/^    double *pReal;         \/* Used when p4type is P4_REAL *\/$/;"	m	union:VdbeOp::p4union	typeref:typename:double *	file:
pReprepare	sqlite/sqlite3.c	/^  Vdbe *pReprepare;         \/* VM being reprepared (sqlite3Reprepare()) *\/$/;"	m	struct:Parse	typeref:typename:Vdbe *	file:
pResultSet	sqlite/sqlite3.c	/^  Mem *pResultSet;        \/* Pointer to an array of results *\/$/;"	m	struct:Vdbe	typeref:typename:Mem *	file:
pRight	sqlite/sqlite3.c	/^  Expr *pRight;          \/* Right subnode *\/$/;"	m	struct:Expr	typeref:typename:Expr *	file:
pRollbackArg	sqlite/sqlite3.c	/^  void *pRollbackArg;               \/* Argument to xRollbackCallback() *\/$/;"	m	struct:sqlite3	typeref:typename:void *	file:
pRowSet	sqlite/sqlite3.c	/^    RowSet *pRowSet;    \/* Used only when flags==MEM_RowSet *\/$/;"	m	union:sqlite3_value::MemValue	typeref:typename:RowSet *	file:
pSavepoint	sqlite/sqlite3.c	/^  Savepoint *pSavepoint;        \/* List of active savepoints *\/$/;"	m	struct:sqlite3	typeref:typename:Savepoint *	file:
pSchema	sqlite/sqlite3.c	/^    Schema *pSchema;  \/* Schema to which this item is fixed *\/$/;"	m	struct:SrcList::SrcList_item	typeref:typename:Schema *	file:
pSchema	sqlite/sqlite3.c	/^  Schema *pSchema;         \/* Schema containing this index *\/$/;"	m	struct:Index	typeref:typename:Schema *	file:
pSchema	sqlite/sqlite3.c	/^  Schema *pSchema;        \/* Schema containing the trigger *\/$/;"	m	struct:Trigger	typeref:typename:Schema *	file:
pSchema	sqlite/sqlite3.c	/^  Schema *pSchema;     \/* Pointer to database schema (possibly shared) *\/$/;"	m	struct:Db	typeref:typename:Schema *	file:
pSchema	sqlite/sqlite3.c	/^  Schema *pSchema;     \/* Schema that contains this table *\/$/;"	m	struct:Table	typeref:typename:Schema *	file:
pSchema	sqlite/sqlite3.c	/^  Schema *pSchema;    \/* Fix items to this schema *\/$/;"	m	struct:DbFixer	typeref:typename:Schema *	file:
pScopyFrom	sqlite/sqlite3.c	/^  Mem *pScopyFrom;    \/* This Mem is a shallow copy of pScopyFrom *\/$/;"	m	struct:sqlite3_value	typeref:typename:Mem *	file:
pScratch	sqlite/sqlite3.c	/^  void *pScratch;                   \/* Scratch memory *\/$/;"	m	struct:Sqlite3Config	typeref:typename:void *	file:
pSelect	sqlite/sqlite3.c	/^    Select *pSelect;                \/* The definition of this CTE *\/$/;"	m	struct:With::Cte	typeref:typename:Select *	file:
pSelect	sqlite/sqlite3.c	/^    Select *pSelect;     \/* EP_xIsSelect and op = IN, EXISTS, SELECT *\/$/;"	m	union:Expr::__anon76f104fc140a	typeref:typename:Select *	file:
pSelect	sqlite/sqlite3.c	/^    Select *pSelect;  \/* A SELECT statement used in place of a table name *\/$/;"	m	struct:SrcList::SrcList_item	typeref:typename:Select *	file:
pSelect	sqlite/sqlite3.c	/^  Select *pSelect;     \/* NULL for tables.  Points to definition if a view. *\/$/;"	m	struct:Table	typeref:typename:Select *	file:
pSelect	sqlite/sqlite3.c	/^  Select *pSelect;     \/* SELECT statement or RHS of INSERT INTO SELECT ... *\/$/;"	m	struct:TriggerStep	typeref:typename:Select *	file:
pSeqTab	sqlite/sqlite3.c	/^  Table *pSeqTab;      \/* The sqlite_sequence table used by AUTOINCREMENT *\/$/;"	m	struct:Schema	typeref:typename:Table *	file:
pSorter	sqlite/sqlite3.c	/^    VdbeSorter *pSorter;        \/* CURTYPE_SORTER. Sorter object *\/$/;"	m	union:VdbeCursor::__anon76f104fc1b0a	typeref:typename:VdbeSorter *	file:
pSqllogArg	sqlite/sqlite3.c	/^  void *pSqllogArg;$/;"	m	struct:Sqlite3Config	typeref:typename:void *	file:
pSrc	sqlite/sqlite3.c	/^  SrcList *pSrc;         \/* The FROM clause *\/$/;"	m	struct:Select	typeref:typename:SrcList *	file:
pSrcCount	sqlite/sqlite3.c	/^    struct SrcCount *pSrcCount;               \/* Counting column references *\/$/;"	m	union:Walker::__anon76f104fc1a0a	typeref:struct:SrcCount *	file:
pSrcList	sqlite/sqlite3.c	/^    SrcList *pSrcList;                        \/* FROM clause *\/$/;"	m	union:Walker::__anon76f104fc1a0a	typeref:typename:SrcList *	file:
pSrcList	sqlite/sqlite3.c	/^  SrcList *pSrcList;   \/* One or more tables used to resolve names *\/$/;"	m	struct:NameContext	typeref:typename:SrcList *	file:
pStart	sqlite/sqlite3.c	/^  void *pStart;           \/* First byte of available memory space *\/$/;"	m	struct:Lookaside	typeref:typename:void *	file:
pStmt	sqlite/shell.c	/^  sqlite3_stmt *pStmt;   \/* Current statement if any. *\/$/;"	m	struct:ShellState	typeref:typename:sqlite3_stmt *	file:
pTab	sqlite/sqlite3.c	/^    Table *pTab;             \/* Source table *\/$/;"	m	struct:AggInfo::AggInfo_col	typeref:typename:Table *	file:
pTab	sqlite/sqlite3.c	/^    Table *pTab;           \/* Used when p4type is P4_TABLE *\/$/;"	m	union:VdbeOp::p4union	typeref:typename:Table *	file:
pTab	sqlite/sqlite3.c	/^    Table *pTab;      \/* An SQL table corresponding to zName *\/$/;"	m	struct:SrcList::SrcList_item	typeref:typename:Table *	file:
pTab	sqlite/sqlite3.c	/^  Table *pTab;                    \/* Schema object being upated *\/$/;"	m	struct:PreUpdate	typeref:typename:Table *	file:
pTab	sqlite/sqlite3.c	/^  Table *pTab;           \/* Table for TK_COLUMN expressions. *\/$/;"	m	struct:Expr	typeref:typename:Table *	file:
pTab	sqlite/sqlite3.c	/^  Table *pTab;          \/* Table this info block refers to *\/$/;"	m	struct:AutoincInfo	typeref:typename:Table *	file:
pTabSchema	sqlite/sqlite3.c	/^  Schema *pTabSchema;     \/* Schema containing the table *\/$/;"	m	struct:Trigger	typeref:typename:Schema *	file:
pTable	sqlite/sqlite3.c	/^  Table *pTable;           \/* The SQL table being indexed *\/$/;"	m	struct:Index	typeref:typename:Table *	file:
pToplevel	sqlite/sqlite3.c	/^  Parse *pToplevel;    \/* Parse structure for main program (or NULL) *\/$/;"	m	struct:Parse	typeref:typename:Parse *	file:
pTraceArg	sqlite/sqlite3.c	/^  void *pTraceArg;                          \/* Argument to the trace function *\/$/;"	m	struct:sqlite3	typeref:typename:void *	file:
pTrig	sqlite/sqlite3.c	/^  Trigger *pTrig;      \/* The trigger that this step is a part of *\/$/;"	m	struct:TriggerStep	typeref:typename:Trigger *	file:
pTrigger	sqlite/sqlite3.c	/^  Trigger *pTrigger;      \/* Trigger this program was coded from *\/$/;"	m	struct:TriggerPrg	typeref:typename:Trigger *	file:
pTrigger	sqlite/sqlite3.c	/^  Trigger *pTrigger;   \/* List of triggers stored in pSchema *\/$/;"	m	struct:Table	typeref:typename:Trigger *	file:
pTriggerPrg	sqlite/sqlite3.c	/^  TriggerPrg *pTriggerPrg;  \/* Linked list of coded triggers *\/$/;"	m	struct:Parse	typeref:typename:TriggerPrg *	file:
pTriggerTab	sqlite/sqlite3.c	/^  Table *pTriggerTab;  \/* Table triggers are being coded for *\/$/;"	m	struct:Parse	typeref:typename:Table *	file:
pUnlockArg	sqlite/sqlite3.c	/^  void *pUnlockArg;                     \/* Argument to xUnlockNotify *\/$/;"	m	struct:sqlite3	typeref:typename:void *	file:
pUnlockConnection	sqlite/sqlite3.c	/^  sqlite3 *pUnlockConnection;           \/* Connection to watch for unlock *\/$/;"	m	struct:sqlite3	typeref:typename:sqlite3 *	file:
pUnpacked	sqlite/sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Unpacked version of aRecord[] *\/$/;"	m	struct:PreUpdate	typeref:typename:UnpackedRecord *	file:
pUpdateArg	sqlite/sqlite3.c	/^  void *pUpdateArg;$/;"	m	struct:sqlite3	typeref:typename:void *	file:
pUser	include/sqlite/sqlite3.h	/^void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:void *
pUser	include/sqlite/sqlite3.h	/^void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	typeref:typename:void *
pUser	sqlite/sqlite3.c	/^  void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:void *	file:
pUser	sqlite/sqlite3.c	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	typeref:typename:void *	file:
pUser	sqlite/sqlite3.c	/^  void *pUser;          \/* First argument to xCmp() *\/$/;"	m	struct:CollSeq	typeref:typename:void *	file:
pUserData	sqlite/sqlite3.c	/^  void *pUserData;     \/* User data parameter *\/$/;"	m	struct:FuncDef	typeref:typename:void *	file:
pUserData	sqlite/sqlite3.c	/^  void *pUserData;$/;"	m	struct:FuncDestructor	typeref:typename:void *	file:
pUsing	sqlite/sqlite3.c	/^    IdList *pUsing;   \/* The USING clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	typeref:typename:IdList *	file:
pVCur	sqlite/sqlite3.c	/^    sqlite3_vtab_cursor *pVCur; \/* CURTYPE_VTAB.   Vtab cursor *\/$/;"	m	union:VdbeCursor::__anon76f104fc1b0a	typeref:typename:sqlite3_vtab_cursor *	file:
pVList	sqlite/sqlite3.c	/^  VList *pVList;            \/* Mapping between variable names and numbers *\/$/;"	m	struct:Parse	typeref:typename:VList *	file:
pVList	sqlite/sqlite3.c	/^  VList *pVList;          \/* Name of variables *\/$/;"	m	struct:Vdbe	typeref:typename:VList *	file:
pVTable	sqlite/sqlite3.c	/^  VTable *pVTable;     \/* List of VTable objects. *\/$/;"	m	struct:Table	typeref:typename:VTable *	file:
pVdbe	sqlite/sqlite3.c	/^  Vdbe *pVdbe;            \/* The VM that owns this context *\/$/;"	m	struct:sqlite3_context	typeref:typename:Vdbe *	file:
pVdbe	sqlite/sqlite3.c	/^  Vdbe *pVdbe;         \/* An engine for executing database bytecode *\/$/;"	m	struct:Parse	typeref:typename:Vdbe *	file:
pVdbe	sqlite/sqlite3.c	/^  struct Vdbe *pVdbe;           \/* List of active virtual machines *\/$/;"	m	struct:sqlite3	typeref:struct:Vdbe *	file:
pVdbeBranchArg	sqlite/sqlite3.c	/^  void *pVdbeBranchArg;                                     \/* 1st argument *\/$/;"	m	struct:Sqlite3Config	typeref:typename:void *	file:
pVfs	sqlite/sqlite3.c	/^  sqlite3_vfs *pVfs;            \/* OS Interface *\/$/;"	m	struct:sqlite3	typeref:typename:sqlite3_vfs *	file:
pVtab	include/sqlite/sqlite3.h	/^sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	typeref:typename:sqlite3_vtab *
pVtab	sqlite/sqlite3.c	/^    VTable *pVtab;         \/* Used when p4type is P4_VTAB *\/$/;"	m	union:VdbeOp::p4union	typeref:typename:VTable *	file:
pVtab	sqlite/sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Pointer to vtab instance *\/$/;"	m	struct:VTable	typeref:typename:sqlite3_vtab *	file:
pVtab	sqlite/sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	typeref:typename:sqlite3_vtab *	file:
pVtabCtx	sqlite/sqlite3.c	/^  VtabCtx *pVtabCtx;            \/* Context for active vtab connect\/create *\/$/;"	m	struct:sqlite3	typeref:typename:VtabCtx *	file:
pWalArg	sqlite/sqlite3.c	/^  void *pWalArg;$/;"	m	struct:sqlite3	typeref:typename:void *	file:
pWhen	sqlite/sqlite3.c	/^  Expr *pWhen;            \/* The WHEN clause of the expression (may be NULL) *\/$/;"	m	struct:Trigger	typeref:typename:Expr *	file:
pWhere	sqlite/sqlite3.c	/^  Expr *pWhere;          \/* The WHERE clause *\/$/;"	m	struct:Select	typeref:typename:Expr *	file:
pWhere	sqlite/sqlite3.c	/^  Expr *pWhere;        \/* The WHERE clause for DELETE or UPDATE steps *\/$/;"	m	struct:TriggerStep	typeref:typename:Expr *	file:
pWith	sqlite/sqlite3.c	/^  With *pWith;              \/* Current WITH clause, or NULL *\/$/;"	m	struct:Parse	typeref:typename:With *	file:
pWith	sqlite/sqlite3.c	/^  With *pWith;           \/* WITH clause attached to this select. Or NULL. *\/$/;"	m	struct:Select	typeref:typename:With *	file:
pWithToFree	sqlite/sqlite3.c	/^  With *pWithToFree;        \/* Free this WITH object at the end of the parse *\/$/;"	m	struct:Parse	typeref:typename:With *	file:
pZombieTab	sqlite/sqlite3.c	/^  Table *pZombieTab;        \/* List of Table objects to delete after code gen *\/$/;"	m	struct:Parse	typeref:typename:Table *	file:
pageHash	sqlite/sqlite3.c	/^  u32 pageHash;                  \/* Hash of page content *\/$/;"	m	struct:PgHdr	typeref:typename:u32	file:
page_id_	include/common/rid.h	/^  page_id_t page_id_;$/;"	m	class:cmudb::RID	typeref:typename:page_id_t
page_id_	include/page/b_plus_tree_page.h	/^  page_id_t page_id_;$/;"	m	class:cmudb::BPlusTreePage	typeref:typename:page_id_t
page_id_	include/page/page.h	/^  page_id_t page_id_ = INVALID_PAGE_ID;$/;"	m	class:cmudb::Page	typeref:typename:page_id_t
page_id_t	include/common/config.h	/^typedef int32_t page_id_t; \/\/ page id type$/;"	t	namespace:cmudb	typeref:typename:int32_t
page_set_	include/concurrency/transaction.h	/^  std::shared_ptr<std::deque<Page *>> page_set_;$/;"	m	class:cmudb::Transaction	typeref:typename:std::shared_ptr<std::deque<Page * >>
page_table_	include/buffer/buffer_pool_manager.h	/^  HashTable<page_id_t, Page *> *page_table_; \/\/ to keep track of pages$/;"	m	class:cmudb::BufferPoolManager	typeref:typename:HashTable<page_id_t,Page * > *
page_type_	include/page/b_plus_tree_page.h	/^  IndexPageType page_type_;$/;"	m	class:cmudb::BPlusTreePage	typeref:typename:IndexPageType
pages_	include/buffer/buffer_pool_manager.h	/^  Page *pages_;      \/\/ array of pages$/;"	m	class:cmudb::BufferPoolManager	typeref:typename:Page *
parent_page_id_	include/page/b_plus_tree_page.h	/^  page_id_t parent_page_id_;$/;"	m	class:cmudb::BPlusTreePage	typeref:typename:page_id_t
parseDateOrTime	sqlite/sqlite3.c	/^static int parseDateOrTime($/;"	f	typeref:typename:int	file:
parseHhMmSs	sqlite/sqlite3.c	/^static int parseHhMmSs(const char *zDate, DateTime *p){$/;"	f	typeref:typename:int	file:
parseModifier	sqlite/sqlite3.c	/^static int parseModifier($/;"	f	typeref:typename:int	file:
parseTimezone	sqlite/sqlite3.c	/^static int parseTimezone(const char *zDate, DateTime *p){$/;"	f	typeref:typename:int	file:
parseYyyyMmDd	sqlite/sqlite3.c	/^static int parseYyyyMmDd(const char *zDate, DateTime *p){$/;"	f	typeref:typename:int	file:
payloadSize	sqlite/sqlite3.c	/^  u32 payloadSize;        \/* Total number of bytes in the record *\/$/;"	m	struct:VdbeCursor	typeref:typename:u32	file:
pc	sqlite/sqlite3.c	/^  int pc;                 \/* Program Counter in parent (calling) frame *\/$/;"	m	struct:VdbeFrame	typeref:typename:int	file:
pc	sqlite/sqlite3.c	/^  int pc;                 \/* The program counter *\/$/;"	m	struct:Vdbe	typeref:typename:int	file:
pcache2	sqlite/sqlite3.c	/^  sqlite3_pcache_methods2 pcache2;  \/* Low-level page-cache interface *\/$/;"	m	struct:Sqlite3Config	typeref:typename:sqlite3_pcache_methods2	file:
pclose	sqlite/shell.c	/^# define pclose /;"	d	file:
persistent_lsn_	include/logging/log_manager.h	/^  std::atomic<lsn_t> persistent_lsn_;$/;"	m	class:cmudb::LogManager	typeref:typename:std::atomic<lsn_t>
pgno	sqlite/sqlite3.c	/^  Pgno pgno;                     \/* Page number for this page *\/$/;"	m	struct:PgHdr	typeref:typename:Pgno	file:
pgnoRoot	sqlite/sqlite3.c	/^  Pgno pgnoRoot;          \/* Root page of the open btree cursor *\/$/;"	m	struct:VdbeCursor	typeref:typename:Pgno	file:
pin_count_	include/page/page.h	/^  int pin_count_ = 0;$/;"	m	class:cmudb::Page	typeref:typename:int
pnBytesFreed	sqlite/sqlite3.c	/^  int *pnBytesFreed;            \/* If not NULL, increment this in DbFree() *\/$/;"	m	struct:sqlite3	typeref:typename:int *	file:
pool_size_	include/buffer/buffer_pool_manager.h	/^  size_t pool_size_; \/\/ number of pages in buffer pool$/;"	m	class:cmudb::BufferPoolManager	typeref:typename:size_t
popen	sqlite/shell.c	/^# define popen /;"	d	file:
prepFlags	sqlite/sqlite3.c	/^  u8 prepFlags;           \/* SQLITE_PREPARE_* flags *\/$/;"	m	struct:Vdbe	typeref:typename:u8	file:
prepare	include/sqlite/sqlite3ext.h	/^  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *,int,sqlite3_stmt **,const char **)
prepare16	include/sqlite/sqlite3ext.h	/^  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const void *,int,sqlite3_stmt **,const void **)
prepare16_v2	include/sqlite/sqlite3ext.h	/^  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const void *,int,sqlite3_stmt **,const void **)
prepare_v2	include/sqlite/sqlite3ext.h	/^  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *,int,sqlite3_stmt **,const char **)
prev	include/buffer/lru_replacer.h	/^    Node *prev;$/;"	m	struct:cmudb::LRUReplacer::Node	typeref:typename:Node *
prev	sqlite/sqlite3.c	/^      u32 prev;       \/* Index in mem3.aPool[] of previous free chunk *\/$/;"	m	struct:Mem3Block::__anon76f104fc1e0a::__anon76f104fc2008	typeref:typename:u32	file:
prev	sqlite/sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	typeref:typename:HashElem **	file:
prev	sqlite/sqlite3.c	/^  int prev;       \/* Index of previous free chunk *\/$/;"	m	struct:Mem5Link	typeref:typename:int	file:
prevSize	sqlite/sqlite3.c	/^      u32 prevSize;   \/* Size of previous chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon76f104fc1e0a::__anon76f104fc1f08	typeref:typename:u32	file:
prev_lsn_	include/concurrency/transaction.h	/^  lsn_t prev_lsn_;$/;"	m	class:cmudb::Transaction	typeref:typename:lsn_t
prev_lsn_	include/logging/log_record.h	/^  lsn_t prev_lsn_ = INVALID_LSN;$/;"	m	class:cmudb::LogRecord	typeref:typename:lsn_t
prev_page_id_	include/logging/log_record.h	/^  page_id_t prev_page_id_ = INVALID_PAGE_ID;$/;"	m	class:cmudb::LogRecord	typeref:typename:page_id_t
printBold	sqlite/shell.c	/^static void printBold(const char *zText){$/;"	f	typeref:typename:void	file:
printSchemaLine	sqlite/shell.c	/^static void printSchemaLine(FILE *out, const char *z, const char *zTail){$/;"	f	typeref:typename:void	file:
printSchemaLineN	sqlite/shell.c	/^static void printSchemaLineN(FILE *out, char *z, int n, const char *zTail){$/;"	f	typeref:typename:void	file:
printfFlags	sqlite/sqlite3.c	/^  u8   printfFlags;    \/* SQLITE_PRINTF flags below *\/$/;"	m	struct:StrAccum	typeref:typename:u8	file:
process_input	sqlite/shell.c	/^static int process_input(ShellState *p, FILE *in){$/;"	f	typeref:typename:int	file:
process_sqliterc	sqlite/shell.c	/^static void process_sqliterc($/;"	f	typeref:typename:void	file:
profile	include/sqlite/sqlite3ext.h	/^  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void * (*)(sqlite3 *,void (*)(void *,const char *,sqlite_uint64),void *)
progress_handler	include/sqlite/sqlite3ext.h	/^  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3 *,int,int (*)(void *),void *)
pseudoTableReg	sqlite/sqlite3.c	/^    int pseudoTableReg;         \/* CURTYPE_PSEUDO. Reg holding content. *\/$/;"	m	union:VdbeCursor::__anon76f104fc1b0a	typeref:typename:int	file:
pthreadMutexAlloc	sqlite/sqlite3.c	/^static sqlite3_mutex *pthreadMutexAlloc(int iType){$/;"	f	typeref:typename:sqlite3_mutex *	file:
pthreadMutexEnd	sqlite/sqlite3.c	/^static int pthreadMutexEnd(void){ return SQLITE_OK; }$/;"	f	typeref:typename:int	file:
pthreadMutexEnter	sqlite/sqlite3.c	/^static void pthreadMutexEnter(sqlite3_mutex *p){$/;"	f	typeref:typename:void	file:
pthreadMutexFree	sqlite/sqlite3.c	/^static void pthreadMutexFree(sqlite3_mutex *p){$/;"	f	typeref:typename:void	file:
pthreadMutexHeld	sqlite/sqlite3.c	/^static int pthreadMutexHeld(sqlite3_mutex *p){$/;"	f	typeref:typename:int	file:
pthreadMutexInit	sqlite/sqlite3.c	/^static int pthreadMutexInit(void){ return SQLITE_OK; }$/;"	f	typeref:typename:int	file:
pthreadMutexLeave	sqlite/sqlite3.c	/^static void pthreadMutexLeave(sqlite3_mutex *p){$/;"	f	typeref:typename:void	file:
pthreadMutexNotheld	sqlite/sqlite3.c	/^static int pthreadMutexNotheld(sqlite3_mutex *p){$/;"	f	typeref:typename:int	file:
pthreadMutexTry	sqlite/sqlite3.c	/^static int pthreadMutexTry(sqlite3_mutex *p){$/;"	f	typeref:typename:int	file:
public	include/buffer/lru_replacer.h	/^public:$/;"	m	class:cmudb::LRUReplacer	typeref:struct:cmudb::LRUReplacer::Node
putVarint	sqlite/sqlite3.c	/^#define putVarint /;"	d	file:
putVarint32	sqlite/sqlite3.c	/^#define putVarint32(/;"	d	file:
pzErrMsg	sqlite/sqlite3.c	/^  char **pzErrMsg;    \/* Error message stored here *\/$/;"	m	struct:__anon76f104fc1908	typeref:typename:char **	file:
quoteChar	sqlite/shell.c	/^static char quoteChar(const char *zName){$/;"	f	typeref:typename:char	file:
r	sqlite/sqlite3.c	/^    double r;           \/* Real value used when MEM_Real is set in flags *\/$/;"	m	union:sqlite3_value::MemValue	typeref:typename:double	file:
r1	sqlite/sqlite3.c	/^  i8 r1;              \/* Value to return if (lhs > rhs) *\/$/;"	m	struct:UnpackedRecord	typeref:typename:i8	file:
r2	sqlite/sqlite3.c	/^  i8 r2;              \/* Value to return if (rhs < lhs) *\/$/;"	m	struct:UnpackedRecord	typeref:typename:i8	file:
rLimit	sqlite/sqlite3.c	/^  double rLimit;      \/* Maximum NNN value for this transform *\/$/;"	m	struct:__anon76f104fc1c08	typeref:typename:double	file:
rParentScore	include/sqlite/sqlite3.h	/^sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_rtree_dbl
rParentScore	sqlite/sqlite3.c	/^  sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_rtree_dbl	file:
rScore	include/sqlite/sqlite3.h	/^sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_rtree_dbl
rScore	sqlite/sqlite3.c	/^  sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:sqlite3_rtree_dbl	file:
rXform	sqlite/sqlite3.c	/^  double rXform;      \/* Constant used for this transform *\/$/;"	m	struct:__anon76f104fc1c08	typeref:typename:double	file:
randomFill	sqlite/sqlite3.c	/^static void randomFill(char *pBuf, int nByte){$/;"	f	typeref:typename:void	file:
randomness	include/sqlite/sqlite3ext.h	/^  void (*randomness)(int,void*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(int,void *)
rawS	sqlite/sqlite3.c	/^  char rawS;          \/* Raw numeric value stored in s *\/$/;"	m	struct:DateTime	typeref:typename:char	file:
raw_printf	sqlite/shell.c	/^# define raw_printf /;"	d	file:
rc	sqlite/sqlite3.c	/^  int rc;                 \/* Value to return *\/$/;"	m	struct:Vdbe	typeref:typename:int	file:
rc	sqlite/sqlite3.c	/^  int rc;              \/* Return code from execution *\/$/;"	m	struct:Parse	typeref:typename:int	file:
rc	sqlite/sqlite3.c	/^  int rc;             \/* Result code stored here *\/$/;"	m	struct:__anon76f104fc1908	typeref:typename:int	file:
rc	vtable/virtual_table.cpp	/^  int rc = sqlite3_create_module(db, "vtable", &VtableModule, nullptr);$/;"	v	namespace:cmudb	typeref:typename:int
rcApp	sqlite/sqlite3.c	/^  int rcApp;              \/* errcode set by sqlite3_result_error_code() *\/$/;"	m	struct:Vdbe	typeref:typename:int	file:
readFile	sqlite/shell.c	/^static char *readFile(const char *zName, int *pnByte){$/;"	f	typeref:typename:char *	file:
readOnly	sqlite/sqlite3.c	/^  bft readOnly:1;         \/* True for statements that do not write *\/$/;"	m	struct:Vdbe	typeref:typename:bft:1	file:
reader_	include/common/rwmutex.h	/^  cond_t reader_;$/;"	m	class:cmudb::RWMutex	typeref:typename:cond_t
reader_count_	include/common/rwmutex.h	/^  uint32_t reader_count_;$/;"	m	class:cmudb::RWMutex	typeref:typename:uint32_t
readfileFunc	sqlite/shell.c	/^static void readfileFunc($/;"	f	typeref:typename:void	file:
realloc	include/sqlite/sqlite3ext.h	/^  void *(*realloc)(void*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void * (*)(void *,int)
realloc64	include/sqlite/sqlite3ext.h	/^  void *(*realloc64)(void*,sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void * (*)(void *,sqlite3_uint64)
regCtr	sqlite/sqlite3.c	/^  int regCtr;           \/* Memory register holding the rowid counter *\/$/;"	m	struct:AutoincInfo	typeref:typename:int	file:
regResult	sqlite/sqlite3.c	/^    int regResult;    \/* Registers holding results of a co-routine *\/$/;"	m	struct:SrcList::SrcList_item	typeref:typename:int	file:
regReturn	sqlite/sqlite3.c	/^    int regReturn;    \/* Register holding return address of addrFillSub *\/$/;"	m	struct:SrcList::SrcList_item	typeref:typename:int	file:
regRoot	sqlite/sqlite3.c	/^  int regRoot;         \/* Register holding root page number for new objects *\/$/;"	m	struct:Parse	typeref:typename:int	file:
regRowid	sqlite/sqlite3.c	/^  int regRowid;        \/* Register holding rowid of CREATE TABLE entry *\/$/;"	m	struct:Parse	typeref:typename:int	file:
release_memory	include/sqlite/sqlite3ext.h	/^  int (*release_memory)(int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(int)
replacer_	include/buffer/buffer_pool_manager.h	/^  Replacer<Page *> *replacer_;   \/\/ to find an unpinned page for replacement$/;"	m	class:cmudb::BufferPoolManager	typeref:typename:Replacer<Page * > *
reset	include/sqlite/sqlite3ext.h	/^  int  (*reset)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt * pStmt)
reset_auto_extension	include/sqlite/sqlite3ext.h	/^  void (*reset_auto_extension)(void);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(void)
resolve_backslashes	sqlite/shell.c	/^static void resolve_backslashes(char *z){$/;"	f	typeref:typename:void	file:
restore_debug_trace_modes	sqlite/shell.c	/^static void restore_debug_trace_modes(void){$/;"	f	typeref:typename:void	file:
result_blob	include/sqlite/sqlite3ext.h	/^  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,const void *,int,void (*)(void *))
result_blob64	include/sqlite/sqlite3ext.h	/^  void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,const void *,sqlite3_uint64,void (*)(void *))
result_double	include/sqlite/sqlite3ext.h	/^  void  (*result_double)(sqlite3_context*,double);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,double)
result_error	include/sqlite/sqlite3ext.h	/^  void  (*result_error)(sqlite3_context*,const char*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,const char *,int)
result_error16	include/sqlite/sqlite3ext.h	/^  void  (*result_error16)(sqlite3_context*,const void*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,const void *,int)
result_error_code	include/sqlite/sqlite3ext.h	/^  void (*result_error_code)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,int)
result_error_nomem	include/sqlite/sqlite3ext.h	/^  void (*result_error_nomem)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *)
result_error_toobig	include/sqlite/sqlite3ext.h	/^  void (*result_error_toobig)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *)
result_int	include/sqlite/sqlite3ext.h	/^  void  (*result_int)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,int)
result_int64	include/sqlite/sqlite3ext.h	/^  void  (*result_int64)(sqlite3_context*,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,sqlite_int64)
result_null	include/sqlite/sqlite3ext.h	/^  void  (*result_null)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *)
result_subtype	include/sqlite/sqlite3ext.h	/^  void (*result_subtype)(sqlite3_context*,unsigned int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,unsigned int)
result_text	include/sqlite/sqlite3ext.h	/^  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,const char *,int,void (*)(void *))
result_text16	include/sqlite/sqlite3ext.h	/^  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,const void *,int,void (*)(void *))
result_text16be	include/sqlite/sqlite3ext.h	/^  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,const void *,int,void (*)(void *))
result_text16le	include/sqlite/sqlite3ext.h	/^  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,const void *,int,void (*)(void *))
result_text64	include/sqlite/sqlite3ext.h	/^  void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,const char *,sqlite3_uint64,void (*)(void *),unsigned char)
result_value	include/sqlite/sqlite3ext.h	/^  void  (*result_value)(sqlite3_context*,sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,sqlite3_value *)
result_zeroblob	include/sqlite/sqlite3ext.h	/^  void (*result_zeroblob)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,int)
result_zeroblob64	include/sqlite/sqlite3ext.h	/^  int (*result_zeroblob64)(sqlite3_context*,sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_context *,sqlite3_uint64)
results	include/vtable/virtual_table.h	/^  std::vector<RID> results;$/;"	m	class:cmudb::Cursor	typeref:typename:std::vector<RID>
ret	sqlite/sqlite3.c	/^        ret       ; return value at EDX:EAX$/;"	v	typeref:typename:rdtsc
reusable	sqlite/sqlite3.c	/^    unsigned reusable :1;   \/* Constant expression is reusable *\/$/;"	m	struct:ExprList::ExprList_item	typeref:typename:unsigned:1	file:
rid_	include/concurrency/transaction.h	/^  RID rid_;$/;"	m	class:cmudb::WriteRecord	typeref:typename:RID
rid_	include/table/tuple.h	/^  RID rid_;        \/\/ if pointing to the table heap, the rid is valid$/;"	m	class:cmudb::Tuple	typeref:typename:RID
rollback_hook	include/sqlite/sqlite3ext.h	/^  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void * (*)(sqlite3 *,void (*)(void *),void *)
root_page_id_	include/index/b_plus_tree.h	/^  page_id_t root_page_id_;$/;"	m	class:cmudb::BPlusTree	typeref:typename:page_id_t
rowSeparator	sqlite/shell.c	/^  char rowSeparator[20]; \/* Row separator character for MODE_Ascii *\/$/;"	m	struct:ShellState	typeref:typename:char[20]	file:
ru_stime	sqlite/shell.c	/^  struct timeval ru_stime; \/* system CPU time used *\/$/;"	m	struct:rusage	typeref:struct:timeval	file:
ru_utime	sqlite/shell.c	/^  struct timeval ru_utime; \/* user CPU time used *\/$/;"	m	struct:rusage	typeref:struct:timeval	file:
runOneSqlLine	sqlite/shell.c	/^static int runOneSqlLine(ShellState *p, char *zSql, FILE *in, int startline){$/;"	f	typeref:typename:int	file:
runOnlyOnce	sqlite/sqlite3.c	/^  bft runOnlyOnce:1;      \/* Automatically expire on reset *\/$/;"	m	struct:Vdbe	typeref:typename:bft:1	file:
run_schema_dump_query	sqlite/shell.c	/^static int run_schema_dump_query($/;"	f	typeref:typename:int	file:
run_table_dump_query	sqlite/shell.c	/^static int run_table_dump_query($/;"	f	typeref:typename:int	file:
rusage	sqlite/shell.c	/^struct rusage {$/;"	s	file:
rwlatch_	include/page/page.h	/^  RWMutex rwlatch_;$/;"	m	class:cmudb::Page	typeref:typename:RWMutex
s	sqlite/shell.c	/^    u64 s[25];                \/* Keccak state. 5x5 lines of 64 bits each *\/$/;"	m	union:SHA3Context::__anonc53fbaef010a	typeref:typename:u64[25]	file:
s	sqlite/sqlite3.c	/^  double s;           \/* Seconds *\/$/;"	m	struct:DateTime	typeref:typename:double	file:
sArg	sqlite/sqlite3.c	/^  Token sArg;               \/* Complete text of a module argument *\/$/;"	m	struct:Parse	typeref:typename:Token	file:
sBegin	sqlite/shell.c	/^static struct rusage sBegin;  \/* CPU time at start *\/$/;"	v	typeref:struct:rusage	file:
sColMap	sqlite/sqlite3.c	/^  struct sColMap {      \/* Mapping of columns in pFrom to columns in zTo *\/$/;"	s	struct:FKey	file:
sLastToken	sqlite/sqlite3.c	/^  Token sLastToken;       \/* The last token parsed *\/$/;"	m	struct:Parse	typeref:typename:Token	file:
sNameToken	sqlite/sqlite3.c	/^  Token sNameToken;       \/* Token with unqualified schema object name *\/$/;"	m	struct:Parse	typeref:typename:Token	file:
safety_level	sqlite/sqlite3.c	/^  u8 safety_level;     \/* How aggressive at syncing data to disk *\/$/;"	m	struct:Db	typeref:typename:u8	file:
save_err_msg	sqlite/shell.c	/^static char *save_err_msg($/;"	f	typeref:typename:char *	file:
savedSelectTrace	sqlite/shell.c	/^static int savedSelectTrace;$/;"	v	typeref:typename:int	file:
savedWhereTrace	sqlite/shell.c	/^static int savedWhereTrace;$/;"	v	typeref:typename:int	file:
scanstatsOn	sqlite/shell.c	/^  int scanstatsOn;       \/* True to display scan stats before each finalize *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
schemaFlags	sqlite/sqlite3.c	/^  u16 schemaFlags;     \/* Flags associated with this schema *\/$/;"	m	struct:Schema	typeref:typename:u16	file:
schema_	include/vtable/virtual_table.h	/^  Schema *schema_;$/;"	m	class:cmudb::VirtualTable	typeref:typename:Schema *
schema_cookie	sqlite/sqlite3.c	/^  int schema_cookie;   \/* Database schema version number for this file *\/$/;"	m	struct:Schema	typeref:typename:int	file:
seekOp	sqlite/sqlite3.c	/^  u8 seekOp;              \/* Most recent seek operation on this cursor *\/$/;"	m	struct:VdbeCursor	typeref:typename:u8	file:
seekResult	sqlite/sqlite3.c	/^  int seekResult;         \/* Result of previous sqlite3BtreeMoveto() or 0$/;"	m	struct:VdbeCursor	typeref:typename:int	file:
seenInterrupt	sqlite/shell.c	/^static volatile int seenInterrupt = 0;$/;"	v	typeref:typename:volatile int	file:
selFlags	sqlite/sqlite3.c	/^  u32 selFlags;          \/* Various SF_* values *\/$/;"	m	struct:Select	typeref:typename:u32	file:
seqCount	sqlite/sqlite3.c	/^  i64 seqCount;           \/* Sequence counter *\/$/;"	m	struct:VdbeCursor	typeref:typename:i64	file:
session_close	sqlite/shell.c	/^static void session_close(OpenSession *pSession){$/;"	f	typeref:typename:void	file:
session_close_all	sqlite/shell.c	/^# define session_close_all(/;"	d	file:
session_close_all	sqlite/shell.c	/^static void session_close_all(ShellState *p){$/;"	f	typeref:typename:void	file:
session_filter	sqlite/shell.c	/^static int session_filter(void *pCtx, const char *zTab){$/;"	f	typeref:typename:int	file:
session_help	sqlite/shell.c	/^void session_help(ShellState *p){$/;"	f	typeref:typename:void
setBinaryMode	sqlite/shell.c	/^# define setBinaryMode(/;"	d	file:
setBinaryMode	sqlite/shell.c	/^static void setBinaryMode(FILE *file, int isOutput){$/;"	f	typeref:typename:void	file:
setDateTimeToCurrent	sqlite/sqlite3.c	/^static int setDateTimeToCurrent(sqlite3_context *context, DateTime *p){$/;"	f	typeref:typename:int	file:
setOrClearFlag	sqlite/shell.c	/^static void setOrClearFlag(ShellState *p, unsigned mFlag, const char *zArg){$/;"	f	typeref:typename:void	file:
setRawDateNumber	sqlite/sqlite3.c	/^static void setRawDateNumber(DateTime *p, double r){$/;"	f	typeref:typename:void	file:
setTextMode	sqlite/shell.c	/^# define setTextMode(/;"	d	file:
setTextMode	sqlite/shell.c	/^static void setTextMode(FILE *file, int isOutput){$/;"	f	typeref:typename:void	file:
set_authorizer	include/sqlite/sqlite3ext.h	/^  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,int (*)(void *,int,const char *,const char *,const char *,const char *),void *)
set_auxdata	include/sqlite/sqlite3ext.h	/^  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_context *,int,void *,void (*)(void *))
set_last_insert_rowid	include/sqlite/sqlite3ext.h	/^  void (*set_last_insert_rowid)(sqlite3*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3 *,sqlite3_int64)
set_table_name	sqlite/shell.c	/^static void set_table_name(ShellState *p, const char *zName){$/;"	f	typeref:typename:void	file:
sha3Func	sqlite/shell.c	/^static void sha3Func($/;"	f	typeref:typename:void	file:
sha3QueryFunc	sqlite/shell.c	/^static void sha3QueryFunc($/;"	f	typeref:typename:void	file:
sharedCacheEnabled	sqlite/sqlite3.c	/^  int sharedCacheEnabled;           \/* true if shared-cache mode enabled *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
shared_lock_set_	include/concurrency/transaction.h	/^  std::shared_ptr<std::unordered_set<RID>> shared_lock_set_;$/;"	m	class:cmudb::Transaction	typeref:typename:std::shared_ptr<std::unordered_set<RID>>
shellAddSchemaName	sqlite/shell.c	/^static void shellAddSchemaName($/;"	f	typeref:typename:void	file:
shellAuth	sqlite/shell.c	/^static int shellAuth($/;"	f	typeref:typename:int	file:
shellDatabaseError	sqlite/shell.c	/^static int shellDatabaseError(sqlite3 *db){$/;"	f	typeref:typename:int	file:
shellDeleteFile	sqlite/shell.c	/^int shellDeleteFile(const char *zFilename){$/;"	f	typeref:typename:int
shellFkeyCollateClause	sqlite/shell.c	/^static void shellFkeyCollateClause($/;"	f	typeref:typename:void	file:
shellFlgs	sqlite/shell.c	/^  unsigned shellFlgs;    \/* Various flags *\/$/;"	m	struct:ShellState	typeref:typename:unsigned	file:
shellLog	sqlite/shell.c	/^static void shellLog(void *pArg, int iErrCode, const char *zMsg){$/;"	f	typeref:typename:void	file:
shellNomemError	sqlite/shell.c	/^static int shellNomemError(void){$/;"	f	typeref:typename:int	file:
shell_add_history	sqlite/shell.c	/^# define shell_add_history(/;"	d	file:
shell_callback	sqlite/shell.c	/^static int shell_callback($/;"	f	typeref:typename:int	file:
shell_dbinfo_command	sqlite/shell.c	/^static int shell_dbinfo_command(ShellState *p, int nArg, char **azArg){$/;"	f	typeref:typename:int	file:
shell_exec	sqlite/shell.c	/^static int shell_exec($/;"	f	typeref:typename:int	file:
shell_read_history	sqlite/shell.c	/^# define shell_read_history(/;"	d	file:
shell_readline	sqlite/shell.c	/^# define shell_readline(/;"	d	file:
shell_stifle_history	sqlite/shell.c	/^# define shell_stifle_history(/;"	d	file:
shell_write_history	sqlite/shell.c	/^# define shell_write_history(/;"	d	file:
showHeader	sqlite/shell.c	/^  int showHeader;        \/* True to show column names in List or Column mode *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
showHeader	sqlite/shell.c	/^  int showHeader;     \/* The ".header" setting prior to ".explain on" *\/$/;"	m	struct:SavedModeInfo	typeref:typename:int	file:
size4x	sqlite/sqlite3.c	/^      u32 size4x;     \/* 4x the size of current chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon76f104fc1e0a::__anon76f104fc1f08	typeref:typename:u32	file:
size_	include/logging/log_record.h	/^  int32_t size_ = 0;$/;"	m	class:cmudb::LogRecord	typeref:typename:int32_t
size_	include/page/b_plus_tree_page.h	/^  int size_;$/;"	m	class:cmudb::BPlusTreePage	typeref:typename:int
size_	include/table/tuple.h	/^  int32_t size_;$/;"	m	class:cmudb::Tuple	typeref:typename:int32_t
size_	include/type/value.h	/^  } size_;$/;"	m	class:cmudb::Value	typeref:union:cmudb::Value::__anon6b93625c010a
size_each_bucket_	include/hash/extendible_hash.h	/^  size_t size_each_bucket_;$/;"	m	class:cmudb::ExtendibleHash	typeref:typename:size_t
skipBtreeMutex	sqlite/sqlite3.c	/^  u8 skipBtreeMutex;            \/* True if no shared-cache backends *\/$/;"	m	struct:sqlite3	typeref:typename:u8	file:
skipFlag	sqlite/sqlite3.c	/^  u8 skipFlag;            \/* Skip accumulator loading if true *\/$/;"	m	struct:sqlite3_context	typeref:typename:u8	file:
sleep	include/sqlite/sqlite3ext.h	/^  int (*sleep)(int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(int)
slot_num_	include/common/rid.h	/^  int slot_num_; \/\/ logical offset from 0, 1...$/;"	m	class:cmudb::RID	typeref:typename:int
smallint	include/type/value.h	/^    int16_t smallint;$/;"	m	union:cmudb::Value::Val	typeref:typename:int16_t
snprintf	include/sqlite/sqlite3ext.h	/^  char * (*snprintf)(int,char*,const char*,...);$/;"	m	struct:sqlite3_api_routines	typeref:typename:char * (*)(int,char *,const char *,...)
soft_heap_limit	include/sqlite/sqlite3ext.h	/^  void (*soft_heap_limit)(int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(int)
soft_heap_limit64	include/sqlite/sqlite3ext.h	/^  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite3_int64 (*)(sqlite3_int64)
sortOrder	sqlite/sqlite3.c	/^    u8 sortOrder;           \/* 1 for DESC or 0 for ASC *\/$/;"	m	struct:ExprList::ExprList_item	typeref:typename:u8	file:
sortingIdx	sqlite/sqlite3.c	/^  int sortingIdx;         \/* Cursor number of the sorting index *\/$/;"	m	struct:AggInfo	typeref:typename:int	file:
sortingIdxPTab	sqlite/sqlite3.c	/^  int sortingIdxPTab;     \/* Cursor number of pseudo-table *\/$/;"	m	struct:AggInfo	typeref:typename:int	file:
sourceid	include/sqlite/sqlite3ext.h	/^  const char *(*sourceid)(void);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const char * (*)(void)
sql	include/sqlite/sqlite3ext.h	/^  const char *(*sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const char * (*)(sqlite3_stmt *)
sql_trace_callback	sqlite/shell.c	/^static int sql_trace_callback($/;"	f	typeref:typename:int	file:
sqlite3	CMakeLists.txt	/^add_library(sqlite3 sqlite\/sqlite3.c include\/sqlite\/sqlite3ext.h include\/sqlite\/sqlite3.h)$/;"	t
sqlite3	include/sqlite/sqlite3.h	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3
sqlite3	sqlite/sqlite3.c	/^struct sqlite3 {$/;"	s	file:
sqlite3	sqlite/sqlite3.c	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3	file:
sqlite3AuthCheck	sqlite/sqlite3.c	/^# define sqlite3AuthCheck(/;"	d	file:
sqlite3AuthContextPop	sqlite/sqlite3.c	/^# define sqlite3AuthContextPop(/;"	d	file:
sqlite3AuthContextPush	sqlite/sqlite3.c	/^# define sqlite3AuthContextPush(/;"	d	file:
sqlite3AuthRead	sqlite/sqlite3.c	/^# define sqlite3AuthRead(/;"	d	file:
sqlite3AutoincrementBegin	sqlite/sqlite3.c	/^# define sqlite3AutoincrementBegin(/;"	d	file:
sqlite3AutoincrementEnd	sqlite/sqlite3.c	/^# define sqlite3AutoincrementEnd(/;"	d	file:
sqlite3BeginBenignMalloc	sqlite/sqlite3.c	/^  #define sqlite3BeginBenignMalloc(/;"	d	file:
sqlite3BeginBenignMalloc	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginBenignMalloc(void){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3BenignMallocHooks	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BenignMallocHooks($/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3BtreeConnectionCount	sqlite/sqlite3.c	/^# define sqlite3BtreeConnectionCount(/;"	d	file:
sqlite3BtreeEnter	sqlite/sqlite3.c	/^# define sqlite3BtreeEnter(/;"	d	file:
sqlite3BtreeEnterAll	sqlite/sqlite3.c	/^# define sqlite3BtreeEnterAll(/;"	d	file:
sqlite3BtreeEnterCursor	sqlite/sqlite3.c	/^# define sqlite3BtreeEnterCursor(/;"	d	file:
sqlite3BtreeHoldsAllMutexes	sqlite/sqlite3.c	/^# define sqlite3BtreeHoldsAllMutexes(/;"	d	file:
sqlite3BtreeHoldsMutex	sqlite/sqlite3.c	/^# define sqlite3BtreeHoldsMutex(/;"	d	file:
sqlite3BtreeLeave	sqlite/sqlite3.c	/^# define sqlite3BtreeLeave(/;"	d	file:
sqlite3BtreeLeaveAll	sqlite/sqlite3.c	/^# define sqlite3BtreeLeaveAll(/;"	d	file:
sqlite3BtreeLeaveCursor	sqlite/sqlite3.c	/^# define sqlite3BtreeLeaveCursor(/;"	d	file:
sqlite3BtreeSharable	sqlite/sqlite3.c	/^# define sqlite3BtreeSharable(/;"	d	file:
sqlite3BuiltinFunctions	sqlite/sqlite3.c	/^SQLITE_PRIVATE FuncDefHash sqlite3BuiltinFunctions;$/;"	v	typeref:typename:SQLITE_PRIVATE FuncDefHash
sqlite3CloseExtensions	sqlite/sqlite3.c	/^# define sqlite3CloseExtensions(/;"	d	file:
sqlite3CodeRowTrigger	sqlite/sqlite3.c	/^# define sqlite3CodeRowTrigger(/;"	d	file:
sqlite3CodeRowTriggerDirect	sqlite/sqlite3.c	/^# define sqlite3CodeRowTriggerDirect(/;"	d	file:
sqlite3ColumnPropertiesFromName	sqlite/sqlite3.c	/^# define sqlite3ColumnPropertiesFromName(/;"	d	file:
sqlite3CompileOptions	sqlite/sqlite3.c	/^SQLITE_PRIVATE const char **sqlite3CompileOptions(int *pnOpt){$/;"	f	typeref:typename:SQLITE_PRIVATE const char **
sqlite3Config	sqlite/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config = {$/;"	v	typeref:struct:Sqlite3Config
sqlite3Config	sqlite/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;$/;"	v	typeref:struct:Sqlite3Config
sqlite3ConnectionBlocked	sqlite/sqlite3.c	/^  #define sqlite3ConnectionBlocked(/;"	d	file:
sqlite3ConnectionClosed	sqlite/sqlite3.c	/^  #define sqlite3ConnectionClosed(/;"	d	file:
sqlite3ConnectionUnlocked	sqlite/sqlite3.c	/^  #define sqlite3ConnectionUnlocked(/;"	d	file:
sqlite3CtypeMap	sqlite/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[256] = {$/;"	v	typeref:typename:SQLITE_PRIVATE const unsigned char[256]
sqlite3CtypeMap	sqlite/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[];$/;"	v	typeref:typename:SQLITE_PRIVATE const unsigned char[]
sqlite3DefaultMutex	sqlite/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f	typeref:typename:SQLITE_PRIVATE sqlite3_mutex_methods const *
sqlite3DeleteTrigger	sqlite/sqlite3.c	/^# define sqlite3DeleteTrigger(/;"	d	file:
sqlite3DropTriggerPtr	sqlite/sqlite3.c	/^# define sqlite3DropTriggerPtr(/;"	d	file:
sqlite3EndBenignMalloc	sqlite/sqlite3.c	/^  #define sqlite3EndBenignMalloc(/;"	d	file:
sqlite3EndBenignMalloc	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndBenignMalloc(void){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3ExprCheckHeight	sqlite/sqlite3.c	/^  #define sqlite3ExprCheckHeight(/;"	d	file:
sqlite3ExprCheckIN	sqlite/sqlite3.c	/^# define sqlite3ExprCheckIN(/;"	d	file:
sqlite3FaultSim	sqlite/sqlite3.c	/^# define sqlite3FaultSim(/;"	d	file:
sqlite3FileSuffix3	sqlite/sqlite3.c	/^# define sqlite3FileSuffix3(/;"	d	file:
sqlite3FkActions	sqlite/sqlite3.c	/^  #define sqlite3FkActions(/;"	d	file:
sqlite3FkCheck	sqlite/sqlite3.c	/^  #define sqlite3FkCheck(/;"	d	file:
sqlite3FkDelete	sqlite/sqlite3.c	/^  #define sqlite3FkDelete(/;"	d	file:
sqlite3FkDropTable	sqlite/sqlite3.c	/^  #define sqlite3FkDropTable(/;"	d	file:
sqlite3FkLocateIndex	sqlite/sqlite3.c	/^  #define sqlite3FkLocateIndex(/;"	d	file:
sqlite3FkOldmask	sqlite/sqlite3.c	/^  #define sqlite3FkOldmask(/;"	d	file:
sqlite3FkReferences	sqlite/sqlite3.c	/^  #define sqlite3FkReferences(/;"	d	file:
sqlite3FkRequired	sqlite/sqlite3.c	/^  #define sqlite3FkRequired(/;"	d	file:
sqlite3GetVTable	sqlite/sqlite3.c	/^#  define sqlite3GetVTable(/;"	d	file:
sqlite3GlobalConfig	sqlite/sqlite3.c	/^  #define sqlite3GlobalConfig /;"	d	file:
sqlite3Hooks	sqlite/sqlite3.c	/^} sqlite3Hooks = { 0, 0 };$/;"	v	typeref:struct:BenignMallocHooks
sqlite3Hwtime	sqlite/sqlite3.c	/^  __inline__ sqlite_uint64 sqlite3Hwtime(void){$/;"	f	typeref:typename:sqlite_uint64
sqlite3InitInfo	sqlite/sqlite3.c	/^  struct sqlite3InitInfo {      \/* Information used during initialization *\/$/;"	s	struct:sqlite3	file:
sqlite3IntTokens	sqlite/sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[] = {$/;"	v	typeref:typename:SQLITE_PRIVATE const Token[]
sqlite3IntTokens	sqlite/sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[];$/;"	v	typeref:typename:SQLITE_PRIVATE const Token[]
sqlite3IsNaN	sqlite/sqlite3.c	/^# define sqlite3IsNaN(/;"	d	file:
sqlite3IsNumericAffinity	sqlite/sqlite3.c	/^#define sqlite3IsNumericAffinity(/;"	d	file:
sqlite3IsToplevel	sqlite/sqlite3.c	/^# define sqlite3IsToplevel(/;"	d	file:
sqlite3Isalnum	sqlite/sqlite3.c	/^# define sqlite3Isalnum(/;"	d	file:
sqlite3Isalpha	sqlite/sqlite3.c	/^# define sqlite3Isalpha(/;"	d	file:
sqlite3Isdigit	sqlite/sqlite3.c	/^# define sqlite3Isdigit(/;"	d	file:
sqlite3Isquote	sqlite/sqlite3.c	/^# define sqlite3Isquote(/;"	d	file:
sqlite3Isspace	sqlite/sqlite3.c	/^# define sqlite3Isspace(/;"	d	file:
sqlite3Isxdigit	sqlite/sqlite3.c	/^# define sqlite3Isxdigit(/;"	d	file:
sqlite3MemFree	sqlite/sqlite3.c	/^static void sqlite3MemFree(void *pPrior){ return; }$/;"	f	typeref:typename:void	file:
sqlite3MemFree	sqlite/sqlite3.c	/^static void sqlite3MemFree(void *pPrior){$/;"	f	typeref:typename:void	file:
sqlite3MemGetMemsys3	sqlite/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){$/;"	f	typeref:typename:SQLITE_PRIVATE const sqlite3_mem_methods *
sqlite3MemGetMemsys5	sqlite/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){$/;"	f	typeref:typename:SQLITE_PRIVATE const sqlite3_mem_methods *
sqlite3MemInit	sqlite/sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }$/;"	f	typeref:typename:int	file:
sqlite3MemInit	sqlite/sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){$/;"	f	typeref:typename:int	file:
sqlite3MemMalloc	sqlite/sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){ return 0; }$/;"	f	typeref:typename:void *	file:
sqlite3MemMalloc	sqlite/sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){$/;"	f	typeref:typename:void *	file:
sqlite3MemRealloc	sqlite/sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }$/;"	f	typeref:typename:void *	file:
sqlite3MemRealloc	sqlite/sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){$/;"	f	typeref:typename:void *	file:
sqlite3MemRoundup	sqlite/sqlite3.c	/^static int sqlite3MemRoundup(int n){ return n; }$/;"	f	typeref:typename:int	file:
sqlite3MemRoundup	sqlite/sqlite3.c	/^static int sqlite3MemRoundup(int n){$/;"	f	typeref:typename:int	file:
sqlite3MemSetDefault	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemSetDefault(void){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3MemShutdown	sqlite/sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){ return; }$/;"	f	typeref:typename:void	file:
sqlite3MemShutdown	sqlite/sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){$/;"	f	typeref:typename:void	file:
sqlite3MemSize	sqlite/sqlite3.c	/^static int sqlite3MemSize(void *p){$/;"	f	typeref:typename:int	file:
sqlite3MemSize	sqlite/sqlite3.c	/^static int sqlite3MemSize(void *pPrior){ return 0; }$/;"	f	typeref:typename:int	file:
sqlite3MemSize	sqlite/sqlite3.c	/^static int sqlite3MemSize(void *pPrior){$/;"	f	typeref:typename:int	file:
sqlite3MemdebugBacktrace	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktrace(int depth){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3MemdebugBacktraceCallback	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3MemdebugDump	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugDump(const char *zFilename){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3MemdebugHasType	sqlite/sqlite3.c	/^# define sqlite3MemdebugHasType(/;"	d	file:
sqlite3MemdebugHasType	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugHasType(void *p, u8 eType){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3MemdebugMallocCount	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugMallocCount(){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3MemdebugNoType	sqlite/sqlite3.c	/^# define sqlite3MemdebugNoType(/;"	d	file:
sqlite3MemdebugNoType	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugNoType(void *p, u8 eType){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3MemdebugSetType	sqlite/sqlite3.c	/^# define sqlite3MemdebugSetType(/;"	d	file:
sqlite3MemdebugSetType	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSetType(void *p, u8 eType){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3MemdebugSettitle	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSettitle(const char *zTitle){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3MemdebugSync	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSync(){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3MemoryBarrier	sqlite/sqlite3.c	/^# define sqlite3MemoryBarrier(/;"	d	file:
sqlite3MemoryBarrier	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemoryBarrier(void){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3Memsys3Dump	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys3Dump(const char *zFilename){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3Memsys5Dump	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys5Dump(const char *zFilename){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3MemsysGetHeader	sqlite/sqlite3.c	/^static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){$/;"	f	typeref:struct:MemBlockHdr *	file:
sqlite3MutexAlloc	sqlite/sqlite3.c	/^#define sqlite3MutexAlloc(/;"	d	file:
sqlite3MutexAlloc	sqlite/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(int id){$/;"	f	typeref:typename:SQLITE_PRIVATE sqlite3_mutex *
sqlite3MutexEnd	sqlite/sqlite3.c	/^#define sqlite3MutexEnd(/;"	d	file:
sqlite3MutexEnd	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexEnd(void){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3MutexInit	sqlite/sqlite3.c	/^#define sqlite3MutexInit(/;"	d	file:
sqlite3MutexInit	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexInit(void){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3NoopMutex	sqlite/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){$/;"	f	typeref:typename:SQLITE_PRIVATE sqlite3_mutex_methods const *
sqlite3OpcodeProperty	sqlite/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;$/;"	v	typeref:typename:SQLITE_PRIVATE const unsigned char[]
sqlite3OpcodeProperty	sqlite/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[];$/;"	v	typeref:typename:SQLITE_PRIVATE const unsigned char[]
sqlite3OsAccess	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsAccess($/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsCheckReservedLock	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsClose	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsClose(sqlite3_file *pId){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3OsCloseFree	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsCloseFree(sqlite3_file *pFile){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3OsCurrentTimeInt64	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsDelete	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsDeviceCharacteristics	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsDlClose	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3OsDlError	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3OsDlOpen	sqlite/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f	typeref:typename:SQLITE_PRIVATE void *
sqlite3OsDlSym	sqlite/sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){$/;"	f	typeref:typename:SQLITE_PRIVATE void (*)(void)
sqlite3OsFetch	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsFileControl	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsFileControlHint	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsFileControlHint(sqlite3_file *id, int op, void *pArg){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3OsFileSize	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsFullPathname	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFullPathname($/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsGetLastError	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsGetLastError(sqlite3_vfs *pVfs){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsInit	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsInit(void){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsLock	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file *id, int lockType){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsOpen	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpen($/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsOpenMalloc	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpenMalloc($/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsRandomness	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsRead	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsSectorSize	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsShmBarrier	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsShmBarrier(sqlite3_file *id){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3OsShmLock	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsShmMap	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmMap($/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsShmUnmap	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsSleep	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsSync	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file *id, int flags){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsTruncate	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file *id, i64 size){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsUnfetch	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsUnlock	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file *id, int lockType){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3OsWrite	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){$/;"	f	typeref:typename:SQLITE_PRIVATE int
sqlite3PagerUseWal	sqlite/sqlite3.c	/^# define sqlite3PagerUseWal(/;"	d	file:
sqlite3ParseToplevel	sqlite/sqlite3.c	/^# define sqlite3ParseToplevel(/;"	d	file:
sqlite3PendingByte	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte = 0x40000000;$/;"	v	typeref:typename:SQLITE_PRIVATE int
sqlite3PendingByte	sqlite/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte;$/;"	v	typeref:typename:SQLITE_PRIVATE int
sqlite3RegisterDateTimeFunctions	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3SchemaMutexHeld	sqlite/sqlite3.c	/^# define sqlite3SchemaMutexHeld(/;"	d	file:
sqlite3SelectExprHeight	sqlite/sqlite3.c	/^  #define sqlite3SelectExprHeight(/;"	d	file:
sqlite3SelectSetName	sqlite/sqlite3.c	/^# define sqlite3SelectSetName(/;"	d	file:
sqlite3SetMakeRecordP5	sqlite/sqlite3.c	/^# define sqlite3SetMakeRecordP5(/;"	d	file:
sqlite3StackAllocRaw	sqlite/sqlite3.c	/^# define sqlite3StackAllocRaw(/;"	d	file:
sqlite3StackAllocZero	sqlite/sqlite3.c	/^# define sqlite3StackAllocZero(/;"	d	file:
sqlite3StackFree	sqlite/sqlite3.c	/^# define sqlite3StackFree(/;"	d	file:
sqlite3Stat	sqlite/sqlite3.c	/^} sqlite3Stat = { {0,}, {0,} };$/;"	v	typeref:struct:sqlite3StatType
sqlite3StatType	sqlite/sqlite3.c	/^static SQLITE_WSD struct sqlite3StatType {$/;"	s	file:
sqlite3StatType	sqlite/sqlite3.c	/^typedef struct sqlite3StatType sqlite3StatType;$/;"	t	typeref:struct:sqlite3StatType	file:
sqlite3StatValueType	sqlite/sqlite3.c	/^typedef sqlite3_int64 sqlite3StatValueType;$/;"	t	typeref:typename:sqlite3_int64	file:
sqlite3StatValueType	sqlite/sqlite3.c	/^typedef u32 sqlite3StatValueType;$/;"	t	typeref:typename:u32	file:
sqlite3StatusDown	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusDown(int op, int N){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3StatusHighwater	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusHighwater(int op, int X){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3StatusUp	sqlite/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusUp(int op, int N){$/;"	f	typeref:typename:SQLITE_PRIVATE void
sqlite3StatusValue	sqlite/sqlite3.c	/^SQLITE_PRIVATE sqlite3_int64 sqlite3StatusValue(int op){$/;"	f	typeref:typename:SQLITE_PRIVATE sqlite3_int64
sqlite3StrBINARY	sqlite/sqlite3.c	/^SQLITE_PRIVATE const char sqlite3StrBINARY[] = "BINARY";$/;"	v	typeref:typename:SQLITE_PRIVATE const char[]
sqlite3StrBINARY	sqlite/sqlite3.c	/^SQLITE_PRIVATE const char sqlite3StrBINARY[];$/;"	v	typeref:typename:SQLITE_PRIVATE const char[]
sqlite3StrNICmp	sqlite/sqlite3.c	/^#define sqlite3StrNICmp /;"	d	file:
sqlite3TableLock	sqlite/sqlite3.c	/^  #define sqlite3TableLock(/;"	d	file:
sqlite3Tolower	sqlite/sqlite3.c	/^# define sqlite3Tolower(/;"	d	file:
sqlite3Toupper	sqlite/sqlite3.c	/^# define sqlite3Toupper(/;"	d	file:
sqlite3TriggerColmask	sqlite/sqlite3.c	/^# define sqlite3TriggerColmask(/;"	d	file:
sqlite3TriggerList	sqlite/sqlite3.c	/^# define sqlite3TriggerList(/;"	d	file:
sqlite3TriggersExist	sqlite/sqlite3.c	/^# define sqlite3TriggersExist(/;"	d	file:
sqlite3UnlinkAndDeleteTrigger	sqlite/sqlite3.c	/^# define sqlite3UnlinkAndDeleteTrigger(/;"	d	file:
sqlite3UpperToLower	sqlite/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[] = {$/;"	v	typeref:typename:SQLITE_PRIVATE const unsigned char[]
sqlite3UpperToLower	sqlite/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[];$/;"	v	typeref:typename:SQLITE_PRIVATE const unsigned char[]
sqlite3VdbeCheckFk	sqlite/sqlite3.c	/^# define sqlite3VdbeCheckFk(/;"	d	file:
sqlite3VdbeEnter	sqlite/sqlite3.c	/^# define sqlite3VdbeEnter(/;"	d	file:
sqlite3VdbeIOTraceSql	sqlite/sqlite3.c	/^# define sqlite3VdbeIOTraceSql(/;"	d	file:
sqlite3VdbeLeave	sqlite/sqlite3.c	/^# define sqlite3VdbeLeave(/;"	d	file:
sqlite3VdbeMemExpandBlob	sqlite/sqlite3.c	/^  #define sqlite3VdbeMemExpandBlob(/;"	d	file:
sqlite3VdbeMemSetDouble	sqlite/sqlite3.c	/^# define sqlite3VdbeMemSetDouble /;"	d	file:
sqlite3VdbeScanStatus	sqlite/sqlite3.c	/^# define sqlite3VdbeScanStatus(/;"	d	file:
sqlite3VdbeVerifyNoMallocRequired	sqlite/sqlite3.c	/^# define sqlite3VdbeVerifyNoMallocRequired(/;"	d	file:
sqlite3VdbeVerifyNoResultRow	sqlite/sqlite3.c	/^# define sqlite3VdbeVerifyNoResultRow(/;"	d	file:
sqlite3ViewGetColumnNames	sqlite/sqlite3.c	/^# define sqlite3ViewGetColumnNames(/;"	d	file:
sqlite3VtabClear	sqlite/sqlite3.c	/^#  define sqlite3VtabClear(/;"	d	file:
sqlite3VtabCommit	sqlite/sqlite3.c	/^#  define sqlite3VtabCommit(/;"	d	file:
sqlite3VtabInSync	sqlite/sqlite3.c	/^#  define sqlite3VtabInSync(/;"	d	file:
sqlite3VtabLock	sqlite/sqlite3.c	/^#  define sqlite3VtabLock(/;"	d	file:
sqlite3VtabRollback	sqlite/sqlite3.c	/^#  define sqlite3VtabRollback(/;"	d	file:
sqlite3VtabSavepoint	sqlite/sqlite3.c	/^#  define sqlite3VtabSavepoint(/;"	d	file:
sqlite3VtabSync	sqlite/sqlite3.c	/^#  define sqlite3VtabSync(/;"	d	file:
sqlite3VtabUnlock	sqlite/sqlite3.c	/^#  define sqlite3VtabUnlock(/;"	d	file:
sqlite3VtabUnlockList	sqlite/sqlite3.c	/^#  define sqlite3VtabUnlockList(/;"	d	file:
sqlite3WithDelete	sqlite/sqlite3.c	/^#define sqlite3WithDelete(/;"	d	file:
sqlite3WithPush	sqlite/sqlite3.c	/^#define sqlite3WithPush(/;"	d	file:
sqlite3_aggregate_context	include/sqlite/sqlite3ext.h	/^#define sqlite3_aggregate_context /;"	d
sqlite3_aggregate_count	include/sqlite/sqlite3ext.h	/^#define sqlite3_aggregate_count /;"	d
sqlite3_api_routines	include/sqlite/sqlite3.h	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	typeref:struct:sqlite3_api_routines
sqlite3_api_routines	include/sqlite/sqlite3ext.h	/^struct sqlite3_api_routines {$/;"	s
sqlite3_api_routines	sqlite/sqlite3.c	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	typeref:struct:sqlite3_api_routines	file:
sqlite3_auto_extension	include/sqlite/sqlite3ext.h	/^#define sqlite3_auto_extension /;"	d
sqlite3_backup	include/sqlite/sqlite3.h	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup
sqlite3_backup	sqlite/sqlite3.c	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup	file:
sqlite3_backup_finish	include/sqlite/sqlite3ext.h	/^#define sqlite3_backup_finish /;"	d
sqlite3_backup_init	include/sqlite/sqlite3ext.h	/^#define sqlite3_backup_init /;"	d
sqlite3_backup_pagecount	include/sqlite/sqlite3ext.h	/^#define sqlite3_backup_pagecount /;"	d
sqlite3_backup_remaining	include/sqlite/sqlite3ext.h	/^#define sqlite3_backup_remaining /;"	d
sqlite3_backup_step	include/sqlite/sqlite3ext.h	/^#define sqlite3_backup_step /;"	d
sqlite3_bind_blob	include/sqlite/sqlite3ext.h	/^#define sqlite3_bind_blob /;"	d
sqlite3_bind_blob64	include/sqlite/sqlite3ext.h	/^#define sqlite3_bind_blob64 /;"	d
sqlite3_bind_double	include/sqlite/sqlite3ext.h	/^#define sqlite3_bind_double /;"	d
sqlite3_bind_int	include/sqlite/sqlite3ext.h	/^#define sqlite3_bind_int /;"	d
sqlite3_bind_int64	include/sqlite/sqlite3ext.h	/^#define sqlite3_bind_int64 /;"	d
sqlite3_bind_null	include/sqlite/sqlite3ext.h	/^#define sqlite3_bind_null /;"	d
sqlite3_bind_parameter_count	include/sqlite/sqlite3ext.h	/^#define sqlite3_bind_parameter_count /;"	d
sqlite3_bind_parameter_index	include/sqlite/sqlite3ext.h	/^#define sqlite3_bind_parameter_index /;"	d
sqlite3_bind_parameter_name	include/sqlite/sqlite3ext.h	/^#define sqlite3_bind_parameter_name /;"	d
sqlite3_bind_text	include/sqlite/sqlite3ext.h	/^#define sqlite3_bind_text /;"	d
sqlite3_bind_text16	include/sqlite/sqlite3ext.h	/^#define sqlite3_bind_text16 /;"	d
sqlite3_bind_text64	include/sqlite/sqlite3ext.h	/^#define sqlite3_bind_text64 /;"	d
sqlite3_bind_value	include/sqlite/sqlite3ext.h	/^#define sqlite3_bind_value /;"	d
sqlite3_bind_zeroblob	include/sqlite/sqlite3ext.h	/^#define sqlite3_bind_zeroblob /;"	d
sqlite3_bind_zeroblob64	include/sqlite/sqlite3ext.h	/^#define sqlite3_bind_zeroblob64 /;"	d
sqlite3_blob	include/sqlite/sqlite3.h	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob
sqlite3_blob	sqlite/sqlite3.c	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob	file:
sqlite3_blob_bytes	include/sqlite/sqlite3ext.h	/^#define sqlite3_blob_bytes /;"	d
sqlite3_blob_close	include/sqlite/sqlite3ext.h	/^#define sqlite3_blob_close /;"	d
sqlite3_blob_open	include/sqlite/sqlite3ext.h	/^#define sqlite3_blob_open /;"	d
sqlite3_blob_read	include/sqlite/sqlite3ext.h	/^#define sqlite3_blob_read /;"	d
sqlite3_blob_reopen	include/sqlite/sqlite3ext.h	/^#define sqlite3_blob_reopen /;"	d
sqlite3_blob_write	include/sqlite/sqlite3ext.h	/^#define sqlite3_blob_write /;"	d
sqlite3_busy_handler	include/sqlite/sqlite3ext.h	/^#define sqlite3_busy_handler /;"	d
sqlite3_busy_timeout	include/sqlite/sqlite3ext.h	/^#define sqlite3_busy_timeout /;"	d
sqlite3_callback	include/sqlite/sqlite3.h	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t	typeref:typename:int (*)(void *,int,char **,char **)
sqlite3_callback	sqlite/sqlite3.c	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t	typeref:typename:int (*)(void *,int,char **,char **)	file:
sqlite3_cancel_auto_extension	include/sqlite/sqlite3ext.h	/^#define sqlite3_cancel_auto_extension /;"	d
sqlite3_changegroup	include/sqlite/sqlite3.h	/^typedef struct sqlite3_changegroup sqlite3_changegroup;$/;"	t	typeref:struct:sqlite3_changegroup
sqlite3_changegroup	sqlite/sqlite3.c	/^typedef struct sqlite3_changegroup sqlite3_changegroup;$/;"	t	typeref:struct:sqlite3_changegroup	file:
sqlite3_changes	include/sqlite/sqlite3ext.h	/^#define sqlite3_changes /;"	d
sqlite3_changeset_iter	include/sqlite/sqlite3.h	/^typedef struct sqlite3_changeset_iter sqlite3_changeset_iter;$/;"	t	typeref:struct:sqlite3_changeset_iter
sqlite3_changeset_iter	sqlite/sqlite3.c	/^typedef struct sqlite3_changeset_iter sqlite3_changeset_iter;$/;"	t	typeref:struct:sqlite3_changeset_iter	file:
sqlite3_clear_bindings	include/sqlite/sqlite3ext.h	/^#define sqlite3_clear_bindings /;"	d
sqlite3_close	include/sqlite/sqlite3ext.h	/^#define sqlite3_close /;"	d
sqlite3_close_v2	include/sqlite/sqlite3ext.h	/^#define sqlite3_close_v2 /;"	d
sqlite3_collation_needed	include/sqlite/sqlite3ext.h	/^#define sqlite3_collation_needed /;"	d
sqlite3_collation_needed16	include/sqlite/sqlite3ext.h	/^#define sqlite3_collation_needed16 /;"	d
sqlite3_column_blob	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_blob /;"	d
sqlite3_column_bytes	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_bytes /;"	d
sqlite3_column_bytes16	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_bytes16 /;"	d
sqlite3_column_count	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_count /;"	d
sqlite3_column_database_name	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_database_name /;"	d
sqlite3_column_database_name16	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_database_name16 /;"	d
sqlite3_column_decltype	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_decltype /;"	d
sqlite3_column_decltype16	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_decltype16 /;"	d
sqlite3_column_double	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_double /;"	d
sqlite3_column_int	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_int /;"	d
sqlite3_column_int64	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_int64 /;"	d
sqlite3_column_name	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_name /;"	d
sqlite3_column_name16	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_name16 /;"	d
sqlite3_column_origin_name	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_origin_name /;"	d
sqlite3_column_origin_name16	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_origin_name16 /;"	d
sqlite3_column_table_name	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_table_name /;"	d
sqlite3_column_table_name16	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_table_name16 /;"	d
sqlite3_column_text	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_text /;"	d
sqlite3_column_text16	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_text16 /;"	d
sqlite3_column_type	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_type /;"	d
sqlite3_column_value	include/sqlite/sqlite3ext.h	/^#define sqlite3_column_value /;"	d
sqlite3_commit_hook	include/sqlite/sqlite3ext.h	/^#define sqlite3_commit_hook /;"	d
sqlite3_compileoption_get	include/sqlite/sqlite3ext.h	/^#define sqlite3_compileoption_get /;"	d
sqlite3_compileoption_used	include/sqlite/sqlite3ext.h	/^#define sqlite3_compileoption_used /;"	d
sqlite3_complete	include/sqlite/sqlite3ext.h	/^#define sqlite3_complete /;"	d
sqlite3_complete16	include/sqlite/sqlite3ext.h	/^#define sqlite3_complete16 /;"	d
sqlite3_context	include/sqlite/sqlite3.h	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context
sqlite3_context	sqlite/sqlite3.c	/^struct sqlite3_context {$/;"	s	file:
sqlite3_context	sqlite/sqlite3.c	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context	file:
sqlite3_context_db_handle	include/sqlite/sqlite3ext.h	/^#define sqlite3_context_db_handle /;"	d
sqlite3_create_collation	include/sqlite/sqlite3ext.h	/^#define sqlite3_create_collation /;"	d
sqlite3_create_collation16	include/sqlite/sqlite3ext.h	/^#define sqlite3_create_collation16 /;"	d
sqlite3_create_collation_v2	include/sqlite/sqlite3ext.h	/^#define sqlite3_create_collation_v2 /;"	d
sqlite3_create_function	include/sqlite/sqlite3ext.h	/^#define sqlite3_create_function /;"	d
sqlite3_create_function16	include/sqlite/sqlite3ext.h	/^#define sqlite3_create_function16 /;"	d
sqlite3_create_function_v2	include/sqlite/sqlite3ext.h	/^#define sqlite3_create_function_v2 /;"	d
sqlite3_create_module	include/sqlite/sqlite3ext.h	/^#define sqlite3_create_module /;"	d
sqlite3_create_module_v2	include/sqlite/sqlite3ext.h	/^#define sqlite3_create_module_v2 /;"	d
sqlite3_data_count	include/sqlite/sqlite3ext.h	/^#define sqlite3_data_count /;"	d
sqlite3_data_directory	include/sqlite/sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_data_directory;$/;"	v	typeref:typename:SQLITE_API SQLITE_EXTERN char *
sqlite3_data_directory	sqlite/sqlite3.c	/^SQLITE_API char *sqlite3_data_directory;$/;"	v	typeref:typename:SQLITE_API char *
sqlite3_db_cacheflush	include/sqlite/sqlite3ext.h	/^#define sqlite3_db_cacheflush /;"	d
sqlite3_db_config	include/sqlite/sqlite3ext.h	/^#define sqlite3_db_config /;"	d
sqlite3_db_filename	include/sqlite/sqlite3ext.h	/^#define sqlite3_db_filename /;"	d
sqlite3_db_handle	include/sqlite/sqlite3ext.h	/^#define sqlite3_db_handle /;"	d
sqlite3_db_mutex	include/sqlite/sqlite3ext.h	/^#define sqlite3_db_mutex /;"	d
sqlite3_db_readonly	include/sqlite/sqlite3ext.h	/^#define sqlite3_db_readonly /;"	d
sqlite3_db_release_memory	include/sqlite/sqlite3ext.h	/^#define sqlite3_db_release_memory /;"	d
sqlite3_db_status	include/sqlite/sqlite3ext.h	/^#define sqlite3_db_status /;"	d
sqlite3_db_status	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_db_status($/;"	f	typeref:typename:SQLITE_API int
sqlite3_debug_mutex	sqlite/sqlite3.c	/^typedef struct sqlite3_debug_mutex {$/;"	s	file:
sqlite3_debug_mutex	sqlite/sqlite3.c	/^} sqlite3_debug_mutex;$/;"	t	typeref:struct:sqlite3_debug_mutex	file:
sqlite3_declare_vtab	include/sqlite/sqlite3ext.h	/^#define sqlite3_declare_vtab /;"	d
sqlite3_destructor_type	include/sqlite/sqlite3.h	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t	typeref:typename:void (*)(void *)
sqlite3_destructor_type	sqlite/sqlite3.c	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t	typeref:typename:void (*)(void *)	file:
sqlite3_diskfull	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_diskfull = 0;$/;"	v	typeref:typename:SQLITE_API int
sqlite3_diskfull_pending	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_diskfull_pending = 0;$/;"	v	typeref:typename:SQLITE_API int
sqlite3_enable_shared_cache	include/sqlite/sqlite3ext.h	/^#define sqlite3_enable_shared_cache /;"	d
sqlite3_errcode	include/sqlite/sqlite3ext.h	/^#define sqlite3_errcode /;"	d
sqlite3_errmsg	include/sqlite/sqlite3ext.h	/^#define sqlite3_errmsg /;"	d
sqlite3_errmsg16	include/sqlite/sqlite3ext.h	/^#define sqlite3_errmsg16 /;"	d
sqlite3_errstr	include/sqlite/sqlite3ext.h	/^#define sqlite3_errstr /;"	d
sqlite3_exec	include/sqlite/sqlite3ext.h	/^#define sqlite3_exec /;"	d
sqlite3_expanded_sql	include/sqlite/sqlite3ext.h	/^#define sqlite3_expanded_sql /;"	d
sqlite3_expired	include/sqlite/sqlite3ext.h	/^#define sqlite3_expired /;"	d
sqlite3_extended_errcode	include/sqlite/sqlite3ext.h	/^#define sqlite3_extended_errcode /;"	d
sqlite3_extended_result_codes	include/sqlite/sqlite3ext.h	/^#define sqlite3_extended_result_codes /;"	d
sqlite3_file	include/sqlite/sqlite3.h	/^struct sqlite3_file {$/;"	s
sqlite3_file	include/sqlite/sqlite3.h	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file
sqlite3_file	sqlite/sqlite3.c	/^struct sqlite3_file {$/;"	s	file:
sqlite3_file	sqlite/sqlite3.c	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file	file:
sqlite3_file_control	include/sqlite/sqlite3ext.h	/^#define sqlite3_file_control /;"	d
sqlite3_finalize	include/sqlite/sqlite3ext.h	/^#define sqlite3_finalize /;"	d
sqlite3_free	include/sqlite/sqlite3ext.h	/^#define sqlite3_free /;"	d
sqlite3_free_table	include/sqlite/sqlite3ext.h	/^#define sqlite3_free_table /;"	d
sqlite3_get_autocommit	include/sqlite/sqlite3ext.h	/^#define sqlite3_get_autocommit /;"	d
sqlite3_get_auxdata	include/sqlite/sqlite3ext.h	/^#define sqlite3_get_auxdata /;"	d
sqlite3_get_table	include/sqlite/sqlite3ext.h	/^#define sqlite3_get_table /;"	d
sqlite3_global_recover	include/sqlite/sqlite3ext.h	/^#define sqlite3_global_recover /;"	d
sqlite3_index_constraint	include/sqlite/sqlite3.h	/^struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info
sqlite3_index_constraint	sqlite/sqlite3.c	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_constraint_usage	include/sqlite/sqlite3.h	/^struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info
sqlite3_index_constraint_usage	sqlite/sqlite3.c	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_info	include/sqlite/sqlite3.h	/^struct sqlite3_index_info {$/;"	s
sqlite3_index_info	include/sqlite/sqlite3.h	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info
sqlite3_index_info	sqlite/sqlite3.c	/^struct sqlite3_index_info {$/;"	s	file:
sqlite3_index_info	sqlite/sqlite3.c	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info	file:
sqlite3_index_orderby	include/sqlite/sqlite3.h	/^struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info
sqlite3_index_orderby	sqlite/sqlite3.c	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_int64	include/sqlite/sqlite3.h	/^typedef sqlite_int64 sqlite3_int64;$/;"	t	typeref:typename:sqlite_int64
sqlite3_int64	sqlite/sqlite3.c	/^typedef sqlite_int64 sqlite3_int64;$/;"	t	typeref:typename:sqlite_int64	file:
sqlite3_interrupt	include/sqlite/sqlite3ext.h	/^#define sqlite3_interrupt /;"	d
sqlite3_io_error_benign	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_io_error_benign = 0;         \/* True if errors are benign *\/$/;"	v	typeref:typename:SQLITE_API int
sqlite3_io_error_hardhit	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_io_error_hardhit = 0;        \/* Number of non-benign errors *\/$/;"	v	typeref:typename:SQLITE_API int
sqlite3_io_error_hit	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_io_error_hit = 0;            \/* Total number of I\/O Errors *\/$/;"	v	typeref:typename:SQLITE_API int
sqlite3_io_error_pending	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_io_error_pending = 0;        \/* Count down to first I\/O error *\/$/;"	v	typeref:typename:SQLITE_API int
sqlite3_io_error_persist	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_io_error_persist = 0;        \/* True if I\/O errors persist *\/$/;"	v	typeref:typename:SQLITE_API int
sqlite3_io_methods	include/sqlite/sqlite3.h	/^struct sqlite3_io_methods {$/;"	s
sqlite3_io_methods	include/sqlite/sqlite3.h	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods
sqlite3_io_methods	sqlite/sqlite3.c	/^struct sqlite3_io_methods {$/;"	s	file:
sqlite3_io_methods	sqlite/sqlite3.c	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods	file:
sqlite3_last_insert_rowid	include/sqlite/sqlite3ext.h	/^#define sqlite3_last_insert_rowid /;"	d
sqlite3_libversion	include/sqlite/sqlite3ext.h	/^#define sqlite3_libversion /;"	d
sqlite3_libversion_number	include/sqlite/sqlite3ext.h	/^#define sqlite3_libversion_number /;"	d
sqlite3_limit	include/sqlite/sqlite3ext.h	/^#define sqlite3_limit /;"	d
sqlite3_load_extension	include/sqlite/sqlite3ext.h	/^#define sqlite3_load_extension /;"	d
sqlite3_loadext_entry	include/sqlite/sqlite3ext.h	/^typedef int (*sqlite3_loadext_entry)($/;"	t	typeref:typename:int (*)(sqlite3 * db,char ** pzErrMsg,const sqlite3_api_routines * pThunk)
sqlite3_log	include/sqlite/sqlite3ext.h	/^#define sqlite3_log /;"	d
sqlite3_malloc	include/sqlite/sqlite3ext.h	/^#define sqlite3_malloc /;"	d
sqlite3_malloc64	include/sqlite/sqlite3ext.h	/^#define sqlite3_malloc64 /;"	d
sqlite3_mem_methods	include/sqlite/sqlite3.h	/^struct sqlite3_mem_methods {$/;"	s
sqlite3_mem_methods	include/sqlite/sqlite3.h	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods
sqlite3_mem_methods	sqlite/sqlite3.c	/^struct sqlite3_mem_methods {$/;"	s	file:
sqlite3_mem_methods	sqlite/sqlite3.c	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods	file:
sqlite3_memdebug_vfs_oom_test	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_memdebug_vfs_oom_test = 1;$/;"	v	typeref:typename:SQLITE_API int
sqlite3_memory_highwater	include/sqlite/sqlite3ext.h	/^#define sqlite3_memory_highwater /;"	d
sqlite3_memory_used	include/sqlite/sqlite3ext.h	/^#define sqlite3_memory_used /;"	d
sqlite3_module	include/sqlite/sqlite3.h	/^struct sqlite3_module {$/;"	s
sqlite3_module	include/sqlite/sqlite3.h	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module
sqlite3_module	sqlite/sqlite3.c	/^struct sqlite3_module {$/;"	s	file:
sqlite3_module	sqlite/sqlite3.c	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module	file:
sqlite3_mprintf	include/sqlite/sqlite3ext.h	/^#define sqlite3_mprintf /;"	d
sqlite3_msize	include/sqlite/sqlite3ext.h	/^#define sqlite3_msize /;"	d
sqlite3_mutex	include/sqlite/sqlite3.h	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex
sqlite3_mutex	sqlite/sqlite3.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	sqlite/sqlite3.c	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex	file:
sqlite3_mutex_alloc	include/sqlite/sqlite3ext.h	/^#define sqlite3_mutex_alloc /;"	d
sqlite3_mutex_alloc	sqlite/sqlite3.c	/^#define sqlite3_mutex_alloc(/;"	d	file:
sqlite3_mutex_alloc	sqlite/sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int id){$/;"	f	typeref:typename:SQLITE_API sqlite3_mutex *
sqlite3_mutex_enter	include/sqlite/sqlite3ext.h	/^#define sqlite3_mutex_enter /;"	d
sqlite3_mutex_enter	sqlite/sqlite3.c	/^#define sqlite3_mutex_enter(/;"	d	file:
sqlite3_mutex_enter	sqlite/sqlite3.c	/^SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex *p){$/;"	f	typeref:typename:SQLITE_API void
sqlite3_mutex_free	include/sqlite/sqlite3ext.h	/^#define sqlite3_mutex_free /;"	d
sqlite3_mutex_free	sqlite/sqlite3.c	/^#define sqlite3_mutex_free(/;"	d	file:
sqlite3_mutex_free	sqlite/sqlite3.c	/^SQLITE_API void sqlite3_mutex_free(sqlite3_mutex *p){$/;"	f	typeref:typename:SQLITE_API void
sqlite3_mutex_held	sqlite/sqlite3.c	/^#define sqlite3_mutex_held(/;"	d	file:
sqlite3_mutex_held	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_mutex_held(sqlite3_mutex *p){$/;"	f	typeref:typename:SQLITE_API int
sqlite3_mutex_leave	include/sqlite/sqlite3ext.h	/^#define sqlite3_mutex_leave /;"	d
sqlite3_mutex_leave	sqlite/sqlite3.c	/^#define sqlite3_mutex_leave(/;"	d	file:
sqlite3_mutex_leave	sqlite/sqlite3.c	/^SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex *p){$/;"	f	typeref:typename:SQLITE_API void
sqlite3_mutex_methods	include/sqlite/sqlite3.h	/^struct sqlite3_mutex_methods {$/;"	s
sqlite3_mutex_methods	include/sqlite/sqlite3.h	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods
sqlite3_mutex_methods	sqlite/sqlite3.c	/^struct sqlite3_mutex_methods {$/;"	s	file:
sqlite3_mutex_methods	sqlite/sqlite3.c	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods	file:
sqlite3_mutex_notheld	sqlite/sqlite3.c	/^#define sqlite3_mutex_notheld(/;"	d	file:
sqlite3_mutex_notheld	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex *p){$/;"	f	typeref:typename:SQLITE_API int
sqlite3_mutex_try	include/sqlite/sqlite3ext.h	/^#define sqlite3_mutex_try /;"	d
sqlite3_mutex_try	sqlite/sqlite3.c	/^#define sqlite3_mutex_try(/;"	d	file:
sqlite3_mutex_try	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_mutex_try(sqlite3_mutex *p){$/;"	f	typeref:typename:SQLITE_API int
sqlite3_next_stmt	include/sqlite/sqlite3ext.h	/^#define sqlite3_next_stmt /;"	d
sqlite3_open	include/sqlite/sqlite3ext.h	/^#define sqlite3_open /;"	d
sqlite3_open16	include/sqlite/sqlite3ext.h	/^#define sqlite3_open16 /;"	d
sqlite3_open_file_count	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_open_file_count = 0;$/;"	v	typeref:typename:SQLITE_API int
sqlite3_open_v2	include/sqlite/sqlite3ext.h	/^#define sqlite3_open_v2 /;"	d
sqlite3_overload_function	include/sqlite/sqlite3ext.h	/^#define sqlite3_overload_function /;"	d
sqlite3_pcache	include/sqlite/sqlite3.h	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache
sqlite3_pcache	sqlite/sqlite3.c	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache	file:
sqlite3_pcache_methods	include/sqlite/sqlite3.h	/^struct sqlite3_pcache_methods {$/;"	s
sqlite3_pcache_methods	include/sqlite/sqlite3.h	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods
sqlite3_pcache_methods	sqlite/sqlite3.c	/^struct sqlite3_pcache_methods {$/;"	s	file:
sqlite3_pcache_methods	sqlite/sqlite3.c	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods	file:
sqlite3_pcache_methods2	include/sqlite/sqlite3.h	/^struct sqlite3_pcache_methods2 {$/;"	s
sqlite3_pcache_methods2	include/sqlite/sqlite3.h	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2
sqlite3_pcache_methods2	sqlite/sqlite3.c	/^struct sqlite3_pcache_methods2 {$/;"	s	file:
sqlite3_pcache_methods2	sqlite/sqlite3.c	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2	file:
sqlite3_pcache_page	include/sqlite/sqlite3.h	/^struct sqlite3_pcache_page {$/;"	s
sqlite3_pcache_page	include/sqlite/sqlite3.h	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page
sqlite3_pcache_page	sqlite/sqlite3.c	/^struct sqlite3_pcache_page {$/;"	s	file:
sqlite3_pcache_page	sqlite/sqlite3.c	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page	file:
sqlite3_prepare	include/sqlite/sqlite3ext.h	/^#define sqlite3_prepare /;"	d
sqlite3_prepare16	include/sqlite/sqlite3ext.h	/^#define sqlite3_prepare16 /;"	d
sqlite3_prepare16_v2	include/sqlite/sqlite3ext.h	/^#define sqlite3_prepare16_v2 /;"	d
sqlite3_prepare_v2	include/sqlite/sqlite3ext.h	/^#define sqlite3_prepare_v2 /;"	d
sqlite3_profile	include/sqlite/sqlite3ext.h	/^#define sqlite3_profile /;"	d
sqlite3_progress_handler	include/sqlite/sqlite3ext.h	/^#define sqlite3_progress_handler /;"	d
sqlite3_randomness	include/sqlite/sqlite3ext.h	/^#define sqlite3_randomness /;"	d
sqlite3_realloc	include/sqlite/sqlite3ext.h	/^#define sqlite3_realloc /;"	d
sqlite3_realloc64	include/sqlite/sqlite3ext.h	/^#define sqlite3_realloc64 /;"	d
sqlite3_release_memory	include/sqlite/sqlite3ext.h	/^#define sqlite3_release_memory /;"	d
sqlite3_reset	include/sqlite/sqlite3ext.h	/^#define sqlite3_reset /;"	d
sqlite3_reset_auto_extension	include/sqlite/sqlite3ext.h	/^#define sqlite3_reset_auto_extension /;"	d
sqlite3_result_blob	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_blob /;"	d
sqlite3_result_blob64	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_blob64 /;"	d
sqlite3_result_double	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_double /;"	d
sqlite3_result_error	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_error /;"	d
sqlite3_result_error16	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_error16 /;"	d
sqlite3_result_error_code	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_error_code /;"	d
sqlite3_result_error_nomem	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_error_nomem /;"	d
sqlite3_result_error_toobig	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_error_toobig /;"	d
sqlite3_result_int	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_int /;"	d
sqlite3_result_int64	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_int64 /;"	d
sqlite3_result_null	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_null /;"	d
sqlite3_result_subtype	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_subtype /;"	d
sqlite3_result_text	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_text /;"	d
sqlite3_result_text16	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_text16 /;"	d
sqlite3_result_text16be	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_text16be /;"	d
sqlite3_result_text16le	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_text16le /;"	d
sqlite3_result_text64	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_text64 /;"	d
sqlite3_result_value	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_value /;"	d
sqlite3_result_zeroblob	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_zeroblob /;"	d
sqlite3_result_zeroblob64	include/sqlite/sqlite3ext.h	/^#define sqlite3_result_zeroblob64 /;"	d
sqlite3_rollback_hook	include/sqlite/sqlite3ext.h	/^#define sqlite3_rollback_hook /;"	d
sqlite3_rtree_dbl	include/sqlite/sqlite3.h	/^typedef double sqlite3_rtree_dbl;$/;"	t	typeref:typename:double
sqlite3_rtree_dbl	include/sqlite/sqlite3.h	/^typedef sqlite3_int64 sqlite3_rtree_dbl;$/;"	t	typeref:typename:sqlite3_int64
sqlite3_rtree_dbl	sqlite/sqlite3.c	/^  typedef double sqlite3_rtree_dbl;$/;"	t	typeref:typename:double	file:
sqlite3_rtree_dbl	sqlite/sqlite3.c	/^  typedef sqlite3_int64 sqlite3_rtree_dbl;$/;"	t	typeref:typename:sqlite3_int64	file:
sqlite3_rtree_geometry	include/sqlite/sqlite3.h	/^struct sqlite3_rtree_geometry {$/;"	s
sqlite3_rtree_geometry	include/sqlite/sqlite3.h	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry
sqlite3_rtree_geometry	sqlite/sqlite3.c	/^struct sqlite3_rtree_geometry {$/;"	s	file:
sqlite3_rtree_geometry	sqlite/sqlite3.c	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry	file:
sqlite3_rtree_query_info	include/sqlite/sqlite3.h	/^struct sqlite3_rtree_query_info {$/;"	s
sqlite3_rtree_query_info	include/sqlite/sqlite3.h	/^typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;$/;"	t	typeref:struct:sqlite3_rtree_query_info
sqlite3_rtree_query_info	sqlite/sqlite3.c	/^struct sqlite3_rtree_query_info {$/;"	s	file:
sqlite3_rtree_query_info	sqlite/sqlite3.c	/^typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;$/;"	t	typeref:struct:sqlite3_rtree_query_info	file:
sqlite3_session	include/sqlite/sqlite3.h	/^typedef struct sqlite3_session sqlite3_session;$/;"	t	typeref:struct:sqlite3_session
sqlite3_session	sqlite/sqlite3.c	/^typedef struct sqlite3_session sqlite3_session;$/;"	t	typeref:struct:sqlite3_session	file:
sqlite3_set_authorizer	include/sqlite/sqlite3ext.h	/^#define sqlite3_set_authorizer /;"	d
sqlite3_set_auxdata	include/sqlite/sqlite3ext.h	/^#define sqlite3_set_auxdata /;"	d
sqlite3_set_last_insert_rowid	include/sqlite/sqlite3ext.h	/^#define sqlite3_set_last_insert_rowid /;"	d
sqlite3_shell	CMakeLists.txt	/^    add_executable(sqlite3_shell sqlite\/shell.c)$/;"	t
sqlite3_sleep	include/sqlite/sqlite3ext.h	/^#define sqlite3_sleep /;"	d
sqlite3_snapshot	include/sqlite/sqlite3.h	/^typedef struct sqlite3_snapshot {$/;"	s
sqlite3_snapshot	include/sqlite/sqlite3.h	/^} sqlite3_snapshot;$/;"	t	typeref:struct:sqlite3_snapshot
sqlite3_snapshot	sqlite/sqlite3.c	/^typedef struct sqlite3_snapshot {$/;"	s	file:
sqlite3_snapshot	sqlite/sqlite3.c	/^} sqlite3_snapshot;$/;"	t	typeref:struct:sqlite3_snapshot	file:
sqlite3_snprintf	include/sqlite/sqlite3ext.h	/^#define sqlite3_snprintf /;"	d
sqlite3_soft_heap_limit	include/sqlite/sqlite3ext.h	/^#define sqlite3_soft_heap_limit /;"	d
sqlite3_soft_heap_limit64	include/sqlite/sqlite3ext.h	/^#define sqlite3_soft_heap_limit64 /;"	d
sqlite3_sourceid	include/sqlite/sqlite3ext.h	/^#define sqlite3_sourceid /;"	d
sqlite3_sql	include/sqlite/sqlite3ext.h	/^#define sqlite3_sql /;"	d
sqlite3_status	include/sqlite/sqlite3ext.h	/^#define sqlite3_status /;"	d
sqlite3_status	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){$/;"	f	typeref:typename:SQLITE_API int
sqlite3_status64	include/sqlite/sqlite3ext.h	/^#define sqlite3_status64 /;"	d
sqlite3_status64	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_status64($/;"	f	typeref:typename:SQLITE_API int
sqlite3_step	include/sqlite/sqlite3ext.h	/^#define sqlite3_step /;"	d
sqlite3_stmt	include/sqlite/sqlite3.h	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt
sqlite3_stmt	sqlite/sqlite3.c	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt	file:
sqlite3_stmt_busy	include/sqlite/sqlite3ext.h	/^#define sqlite3_stmt_busy /;"	d
sqlite3_stmt_readonly	include/sqlite/sqlite3ext.h	/^#define sqlite3_stmt_readonly /;"	d
sqlite3_stmt_status	include/sqlite/sqlite3ext.h	/^#define sqlite3_stmt_status /;"	d
sqlite3_strglob	include/sqlite/sqlite3ext.h	/^#define sqlite3_strglob /;"	d
sqlite3_stricmp	include/sqlite/sqlite3ext.h	/^#define sqlite3_stricmp /;"	d
sqlite3_strlike	include/sqlite/sqlite3ext.h	/^#define sqlite3_strlike /;"	d
sqlite3_strnicmp	include/sqlite/sqlite3ext.h	/^#define sqlite3_strnicmp /;"	d
sqlite3_syscall_ptr	include/sqlite/sqlite3.h	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t	typeref:typename:void (*)(void)
sqlite3_syscall_ptr	sqlite/sqlite3.c	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t	typeref:typename:void (*)(void)	file:
sqlite3_system_errno	include/sqlite/sqlite3ext.h	/^#define sqlite3_system_errno /;"	d
sqlite3_table_column_metadata	include/sqlite/sqlite3ext.h	/^#define sqlite3_table_column_metadata /;"	d
sqlite3_temp_directory	include/sqlite/sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;$/;"	v	typeref:typename:SQLITE_API SQLITE_EXTERN char *
sqlite3_temp_directory	sqlite/sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory;$/;"	v	typeref:typename:SQLITE_API char *
sqlite3_test_control	include/sqlite/sqlite3ext.h	/^#define sqlite3_test_control /;"	d
sqlite3_thread_cleanup	include/sqlite/sqlite3ext.h	/^#define sqlite3_thread_cleanup /;"	d
sqlite3_threadsafe	include/sqlite/sqlite3ext.h	/^#define sqlite3_threadsafe /;"	d
sqlite3_total_changes	include/sqlite/sqlite3ext.h	/^#define sqlite3_total_changes /;"	d
sqlite3_trace	include/sqlite/sqlite3ext.h	/^#define sqlite3_trace /;"	d
sqlite3_trace_v2	include/sqlite/sqlite3ext.h	/^#define sqlite3_trace_v2 /;"	d
sqlite3_transfer_bindings	include/sqlite/sqlite3ext.h	/^#define sqlite3_transfer_bindings /;"	d
sqlite3_uint64	include/sqlite/sqlite3.h	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t	typeref:typename:sqlite_uint64
sqlite3_uint64	sqlite/sqlite3.c	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t	typeref:typename:sqlite_uint64	file:
sqlite3_unlock_notify	include/sqlite/sqlite3ext.h	/^#define sqlite3_unlock_notify /;"	d
sqlite3_update_hook	include/sqlite/sqlite3ext.h	/^#define sqlite3_update_hook /;"	d
sqlite3_uri_boolean	include/sqlite/sqlite3ext.h	/^#define sqlite3_uri_boolean /;"	d
sqlite3_uri_int64	include/sqlite/sqlite3ext.h	/^#define sqlite3_uri_int64 /;"	d
sqlite3_uri_parameter	include/sqlite/sqlite3ext.h	/^#define sqlite3_uri_parameter /;"	d
sqlite3_uri_vsnprintf	include/sqlite/sqlite3ext.h	/^#define sqlite3_uri_vsnprintf /;"	d
sqlite3_user_data	include/sqlite/sqlite3ext.h	/^#define sqlite3_user_data /;"	d
sqlite3_userauth	sqlite/sqlite3.c	/^struct sqlite3_userauth {$/;"	s	file:
sqlite3_userauth	sqlite/sqlite3.c	/^typedef struct sqlite3_userauth sqlite3_userauth;$/;"	t	typeref:struct:sqlite3_userauth	file:
sqlite3_value	include/sqlite/sqlite3.h	/^typedef struct sqlite3_value sqlite3_value;$/;"	t	typeref:struct:sqlite3_value
sqlite3_value	sqlite/sqlite3.c	/^struct sqlite3_value {$/;"	s	file:
sqlite3_value	sqlite/sqlite3.c	/^typedef struct sqlite3_value sqlite3_value;$/;"	t	typeref:struct:sqlite3_value	file:
sqlite3_value_blob	include/sqlite/sqlite3ext.h	/^#define sqlite3_value_blob /;"	d
sqlite3_value_bytes	include/sqlite/sqlite3ext.h	/^#define sqlite3_value_bytes /;"	d
sqlite3_value_bytes16	include/sqlite/sqlite3ext.h	/^#define sqlite3_value_bytes16 /;"	d
sqlite3_value_double	include/sqlite/sqlite3ext.h	/^#define sqlite3_value_double /;"	d
sqlite3_value_dup	include/sqlite/sqlite3ext.h	/^#define sqlite3_value_dup /;"	d
sqlite3_value_free	include/sqlite/sqlite3ext.h	/^#define sqlite3_value_free /;"	d
sqlite3_value_int	include/sqlite/sqlite3ext.h	/^#define sqlite3_value_int /;"	d
sqlite3_value_int64	include/sqlite/sqlite3ext.h	/^#define sqlite3_value_int64 /;"	d
sqlite3_value_numeric_type	include/sqlite/sqlite3ext.h	/^#define sqlite3_value_numeric_type /;"	d
sqlite3_value_subtype	include/sqlite/sqlite3ext.h	/^#define sqlite3_value_subtype /;"	d
sqlite3_value_text	include/sqlite/sqlite3ext.h	/^#define sqlite3_value_text /;"	d
sqlite3_value_text16	include/sqlite/sqlite3ext.h	/^#define sqlite3_value_text16 /;"	d
sqlite3_value_text16be	include/sqlite/sqlite3ext.h	/^#define sqlite3_value_text16be /;"	d
sqlite3_value_text16le	include/sqlite/sqlite3ext.h	/^#define sqlite3_value_text16le /;"	d
sqlite3_value_type	include/sqlite/sqlite3ext.h	/^#define sqlite3_value_type /;"	d
sqlite3_version	include/sqlite/sqlite3.h	/^SQLITE_API SQLITE_EXTERN const char sqlite3_version[];$/;"	v	typeref:typename:SQLITE_API SQLITE_EXTERN const char[]
sqlite3_version	sqlite/sqlite3.c	/^SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;$/;"	v	typeref:typename:SQLITE_API const char[]
sqlite3_vfs	include/sqlite/sqlite3.h	/^struct sqlite3_vfs {$/;"	s
sqlite3_vfs	include/sqlite/sqlite3.h	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs
sqlite3_vfs	sqlite/sqlite3.c	/^struct sqlite3_vfs {$/;"	s	file:
sqlite3_vfs	sqlite/sqlite3.c	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs	file:
sqlite3_vfs_find	include/sqlite/sqlite3ext.h	/^#define sqlite3_vfs_find /;"	d
sqlite3_vfs_find	sqlite/sqlite3.c	/^SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){$/;"	f	typeref:typename:SQLITE_API sqlite3_vfs *
sqlite3_vfs_register	include/sqlite/sqlite3ext.h	/^#define sqlite3_vfs_register /;"	d
sqlite3_vfs_register	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){$/;"	f	typeref:typename:SQLITE_API int
sqlite3_vfs_unregister	include/sqlite/sqlite3ext.h	/^#define sqlite3_vfs_unregister /;"	d
sqlite3_vfs_unregister	sqlite/sqlite3.c	/^SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){$/;"	f	typeref:typename:SQLITE_API int
sqlite3_vmprintf	include/sqlite/sqlite3ext.h	/^#define sqlite3_vmprintf /;"	d
sqlite3_vsnprintf	include/sqlite/sqlite3ext.h	/^#define sqlite3_vsnprintf /;"	d
sqlite3_vtab	include/sqlite/sqlite3.h	/^struct sqlite3_vtab {$/;"	s
sqlite3_vtab	include/sqlite/sqlite3.h	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab
sqlite3_vtab	sqlite/sqlite3.c	/^struct sqlite3_vtab {$/;"	s	file:
sqlite3_vtab	sqlite/sqlite3.c	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab	file:
sqlite3_vtab_config	include/sqlite/sqlite3ext.h	/^#define sqlite3_vtab_config /;"	d
sqlite3_vtab_cursor	include/sqlite/sqlite3.h	/^struct sqlite3_vtab_cursor {$/;"	s
sqlite3_vtab_cursor	include/sqlite/sqlite3.h	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor
sqlite3_vtab_cursor	sqlite/sqlite3.c	/^struct sqlite3_vtab_cursor {$/;"	s	file:
sqlite3_vtab_cursor	sqlite/sqlite3.c	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor	file:
sqlite3_vtab_on_conflict	include/sqlite/sqlite3ext.h	/^#define sqlite3_vtab_on_conflict /;"	d
sqlite3_wal_autocheckpoint	include/sqlite/sqlite3ext.h	/^#define sqlite3_wal_autocheckpoint /;"	d
sqlite3_wal_checkpoint	include/sqlite/sqlite3ext.h	/^#define sqlite3_wal_checkpoint /;"	d
sqlite3_wal_checkpoint_v2	include/sqlite/sqlite3ext.h	/^#define sqlite3_wal_checkpoint_v2 /;"	d
sqlite3_wal_hook	include/sqlite/sqlite3ext.h	/^#define sqlite3_wal_hook /;"	d
sqlite3_xauth	sqlite/sqlite3.c	/^  typedef int (*sqlite3_xauth)(void*,int,const char*,const char*,const char*,$/;"	t	typeref:typename:int (*)(void *,int,const char *,const char *,const char *,const char *)	file:
sqlite3_xauth	sqlite/sqlite3.c	/^  typedef int (*sqlite3_xauth)(void*,int,const char*,const char*,const char*,$/;"	t	typeref:typename:int (*)(void *,int,const char *,const char *,const char *,const char *,const char *)	file:
sqlite3azCompileOpt	sqlite/sqlite3.c	/^static const char * const sqlite3azCompileOpt[] = {$/;"	v	typeref:typename:const char * const[]	file:
sqlite3one	sqlite/sqlite3.c	/^  const int sqlite3one = 1;$/;"	v	typeref:typename:const int
sqliteHashData	sqlite/sqlite3.c	/^#define sqliteHashData(/;"	d	file:
sqliteHashFirst	sqlite/sqlite3.c	/^#define sqliteHashFirst(/;"	d	file:
sqliteHashNext	sqlite/sqlite3.c	/^#define sqliteHashNext(/;"	d	file:
sqlite_int64	include/sqlite/sqlite3.h	/^typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t	typeref:typename:SQLITE_INT64_TYPE
sqlite_int64	include/sqlite/sqlite3.h	/^typedef __int64 sqlite_int64;$/;"	t	typeref:typename:__int64
sqlite_int64	include/sqlite/sqlite3.h	/^typedef long long int sqlite_int64;$/;"	t	typeref:typename:long long int
sqlite_int64	sqlite/sqlite3.c	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t	typeref:typename:SQLITE_INT64_TYPE	file:
sqlite_int64	sqlite/sqlite3.c	/^  typedef __int64 sqlite_int64;$/;"	t	typeref:typename:__int64	file:
sqlite_int64	sqlite/sqlite3.c	/^  typedef long long int sqlite_int64;$/;"	t	typeref:typename:long long int	file:
sqlite_uint64	include/sqlite/sqlite3.h	/^typedef SQLITE_UINT64_TYPE sqlite_uint64;$/;"	t	typeref:typename:SQLITE_UINT64_TYPE
sqlite_uint64	include/sqlite/sqlite3.h	/^typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t	typeref:typename:unsigned SQLITE_INT64_TYPE
sqlite_uint64	include/sqlite/sqlite3.h	/^typedef unsigned __int64 sqlite_uint64;$/;"	t	typeref:typename:unsigned __int64
sqlite_uint64	include/sqlite/sqlite3.h	/^typedef unsigned long long int sqlite_uint64;$/;"	t	typeref:typename:unsigned long long int
sqlite_uint64	sqlite/sqlite3.c	/^    typedef SQLITE_UINT64_TYPE sqlite_uint64;$/;"	t	typeref:typename:SQLITE_UINT64_TYPE	file:
sqlite_uint64	sqlite/sqlite3.c	/^    typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t	typeref:typename:unsigned SQLITE_INT64_TYPE	file:
sqlite_uint64	sqlite/sqlite3.c	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t	typeref:typename:unsigned __int64	file:
sqlite_uint64	sqlite/sqlite3.c	/^  typedef unsigned long long int sqlite_uint64;$/;"	t	typeref:typename:unsigned long long int	file:
startTime	sqlite/sqlite3.c	/^  i64 startTime;          \/* Time when query started - used for profiling *\/$/;"	m	struct:Vdbe	typeref:typename:i64	file:
statMutex	sqlite/sqlite3.c	/^static const char statMutex[] = {$/;"	v	typeref:typename:const char[]	file:
state_	include/concurrency/transaction.h	/^  TransactionState state_;$/;"	m	class:cmudb::Transaction	typeref:typename:TransactionState
statsOn	sqlite/shell.c	/^  int statsOn;           \/* True to display memory stats before each finalize *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
status	include/sqlite/sqlite3ext.h	/^  int (*status)(int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(int,int *,int *,int)
status64	include/sqlite/sqlite3ext.h	/^  int (*status64)(int,sqlite3_int64*,sqlite3_int64*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(int,sqlite3_int64 *,sqlite3_int64 *,int)
std	include/common/rid.h	/^namespace std {$/;"	n
stdin_is_interactive	sqlite/shell.c	/^static int stdin_is_interactive = 1;$/;"	v	typeref:typename:int	file:
stdout_is_console	sqlite/shell.c	/^static int stdout_is_console = 1;$/;"	v	typeref:typename:int	file:
step	include/sqlite/sqlite3ext.h	/^  int  (*step)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *)
step_list	sqlite/sqlite3.c	/^  TriggerStep *step_list; \/* Link list of trigger program steps             *\/$/;"	m	struct:Trigger	typeref:typename:TriggerStep *	file:
stmt_busy	include/sqlite/sqlite3ext.h	/^  int (*stmt_busy)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *)
stmt_readonly	include/sqlite/sqlite3ext.h	/^  int (*stmt_readonly)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *)
stmt_status	include/sqlite/sqlite3ext.h	/^  int (*stmt_status)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,int,int)
storage_engine_	include/vtable/virtual_table.h	/^StorageEngine *storage_engine_;$/;"	v	namespace:cmudb	typeref:typename:StorageEngine *
str_in_array	sqlite/shell.c	/^static int str_in_array(const char *zStr, const char **azArray){$/;"	f	typeref:typename:int	file:
strftimeFunc	sqlite/sqlite3.c	/^static void strftimeFunc($/;"	f	typeref:typename:void	file:
strglob	include/sqlite/sqlite3ext.h	/^  int (*strglob)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(const char *,const char *)
stricmp	include/sqlite/sqlite3ext.h	/^  int (*stricmp)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(const char *,const char *)
strict_2PL_	include/concurrency/lock_manager.h	/^  bool strict_2PL_;$/;"	m	class:cmudb::LockManager	typeref:typename:bool
strlen30	sqlite/shell.c	/^static int strlen30(const char *z){$/;"	f	typeref:typename:int	file:
strlenChar	sqlite/shell.c	/^static int strlenChar(const char *z){$/;"	f	typeref:typename:int	file:
strlike	include/sqlite/sqlite3ext.h	/^  int (*strlike)(const char*,const char*,unsigned int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(const char *,const char *,unsigned int)
strnicmp	include/sqlite/sqlite3ext.h	/^  int (*strnicmp)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(const char *,const char *,int)
suppressErr	sqlite/sqlite3.c	/^  u8 suppressErr;               \/* Do not issue error messages if true *\/$/;"	m	struct:sqlite3	typeref:typename:u8	file:
swap	include/type/value.h	/^  friend void swap(Value &first, Value &second) {$/;"	f	namespace:cmudb	typeref:typename:void
system_errno	include/sqlite/sqlite3ext.h	/^  int (*system_errno)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *)
sz	sqlite/sqlite3.c	/^  u16 sz;                 \/* Size of each buffer in bytes *\/$/;"	m	struct:Lookaside	typeref:typename:u16	file:
szAtom	sqlite/sqlite3.c	/^  int szAtom;      \/* Smallest possible allocation in bytes *\/$/;"	m	struct:Mem5Global	typeref:typename:int	file:
szEst	sqlite/sqlite3.c	/^  u8 szEst;        \/* Estimated size of value in this column. sizeof(INT)==1 *\/$/;"	m	struct:Column	typeref:typename:u8	file:
szIdxRow	sqlite/sqlite3.c	/^  LogEst szIdxRow;         \/* Estimated average row size in bytes *\/$/;"	m	struct:Index	typeref:typename:LogEst	file:
szLookaside	sqlite/sqlite3.c	/^  int szLookaside;                  \/* Default lookaside buffer size *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
szMalloc	sqlite/sqlite3.c	/^  int szMalloc;       \/* Size of the zMalloc allocation *\/$/;"	m	struct:sqlite3_value	typeref:typename:int	file:
szMaster	sqlite/sqlite3.c	/^  u32 szMaster;$/;"	m	struct:Mem3Global	typeref:typename:u32	file:
szMmap	sqlite/sqlite3.c	/^  i64 szMmap;                   \/* Default mmap_size setting *\/$/;"	m	struct:sqlite3	typeref:typename:i64	file:
szMmap	sqlite/sqlite3.c	/^  sqlite3_int64 szMmap;             \/* mmap() space per open file *\/$/;"	m	struct:Sqlite3Config	typeref:typename:sqlite3_int64	file:
szOpAlloc	sqlite/sqlite3.c	/^  int szOpAlloc;       \/* Bytes of memory space allocated for Vdbe.aOp[] *\/$/;"	m	struct:Parse	typeref:typename:int	file:
szOsFile	include/sqlite/sqlite3.h	/^int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:int
szOsFile	sqlite/sqlite3.c	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:int	file:
szPage	sqlite/sqlite3.c	/^  int szPage;                       \/* Size of each page in pPage[] *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
szPma	sqlite/sqlite3.c	/^  u32 szPma;                        \/* Maximum Sorter PMA size *\/$/;"	m	struct:Sqlite3Config	typeref:typename:u32	file:
szRow	sqlite/sqlite3.c	/^  u32 szRow;              \/* Byte available in aRow *\/$/;"	m	struct:VdbeCursor	typeref:typename:u32	file:
szScratch	sqlite/sqlite3.c	/^  int szScratch;                    \/* Size of each scratch buffer *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int	file:
szTabRow	sqlite/sqlite3.c	/^  LogEst szTabRow;     \/* Estimated size of each table row in bytes *\/$/;"	m	struct:Table	typeref:typename:LogEst	file:
tRowcnt	sqlite/sqlite3.c	/^ typedef u32 tRowcnt;    \/* 32-bit is the default *\/$/;"	t	typeref:typename:u32	file:
tRowcnt	sqlite/sqlite3.c	/^ typedef u64 tRowcnt;    \/* 64-bit only if requested at compile-time *\/$/;"	t	typeref:typename:u64	file:
tabFlags	sqlite/sqlite3.c	/^  u32 tabFlags;        \/* Mask of TF_* values *\/$/;"	m	struct:Table	typeref:typename:u32	file:
table	sqlite/sqlite3.c	/^  char *table;            \/* The table or view to which the trigger applies *\/$/;"	m	struct:Trigger	typeref:typename:char *	file:
tableColumnList	sqlite/shell.c	/^static char **tableColumnList(ShellState *p, const char *zTab){$/;"	f	typeref:typename:char **	file:
table_	include/concurrency/transaction.h	/^  TableHeap *table_;$/;"	m	class:cmudb::WriteRecord	typeref:typename:TableHeap *
table_column_metadata	include/sqlite/sqlite3ext.h	/^  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *,const char *,const char *,char const **,char const **,int *,int *,int *)
table_heap_	include/table/table_iterator.h	/^  TableHeap *table_heap_;$/;"	m	class:cmudb::TableIterator	typeref:typename:TableHeap *
table_heap_	include/vtable/virtual_table.h	/^  TableHeap *table_heap_;$/;"	m	class:cmudb::VirtualTable	typeref:typename:TableHeap *
table_iterator_	include/vtable/virtual_table.h	/^  TableIterator table_iterator_;$/;"	m	class:cmudb::Cursor	typeref:typename:TableIterator
table_name_	include/index/index.h	/^  std::string table_name_;$/;"	m	class:cmudb::IndexMetadata	typeref:typename:std::string
tail_	include/buffer/lru_replacer.h	/^  shared_ptr<Node> tail_;$/;"	m	class:cmudb::LRUReplacer	typeref:typename:shared_ptr<Node>
tblHash	sqlite/sqlite3.c	/^  Hash tblHash;        \/* All tables indexed by name *\/$/;"	m	struct:Schema	typeref:typename:Hash	file:
tempReg	sqlite/sqlite3.c	/^    u8 tempReg;           \/* iReg is a temp register that needs to be freed *\/$/;"	m	struct:Parse::yColCache	typeref:typename:u8	file:
temp_store	sqlite/sqlite3.c	/^  u8 temp_store;                \/* 1: file 2: memory 0: default *\/$/;"	m	struct:sqlite3	typeref:typename:u8	file:
test_breakpoint	sqlite/shell.c	/^static void test_breakpoint(void){$/;"	f	typeref:typename:void	file:
test_control	include/sqlite/sqlite3ext.h	/^  int (*test_control)(int, ...);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(int,...)
testcase	sqlite/sqlite3.c	/^# define testcase(/;"	d	file:
testcase_glob	sqlite/shell.c	/^static int testcase_glob(const char *zGlob, const char *z){$/;"	f	typeref:typename:int	file:
thread_cleanup	include/sqlite/sqlite3ext.h	/^  void  (*thread_cleanup)(void);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(void)
thread_id_	include/concurrency/transaction.h	/^  std::thread::id thread_id_;$/;"	m	class:cmudb::Transaction	typeref:typename:std::thread::id
timeDiff	sqlite/shell.c	/^static double timeDiff(FILETIME *pStart, FILETIME *pEnd){$/;"	f	typeref:typename:double	file:
timeDiff	sqlite/shell.c	/^static double timeDiff(struct timeval *pStart, struct timeval *pEnd){$/;"	f	typeref:typename:double	file:
timeFunc	sqlite/sqlite3.c	/^static void timeFunc($/;"	f	typeref:typename:void	file:
timeOfDay	sqlite/shell.c	/^static sqlite3_int64 timeOfDay(void){$/;"	f	typeref:typename:sqlite3_int64	file:
timestamp	include/type/value.h	/^    uint64_t timestamp;$/;"	m	union:cmudb::Value::Val	typeref:typename:uint64_t
tinyint	include/type/value.h	/^    int8_t tinyint;$/;"	m	union:cmudb::Value::Val	typeref:typename:int8_t
tnum	sqlite/sqlite3.c	/^  int tnum;                \/* DB Page containing root of this index *\/$/;"	m	struct:Index	typeref:typename:int	file:
tnum	sqlite/sqlite3.c	/^  int tnum;            \/* Root BTree page for this table *\/$/;"	m	struct:Table	typeref:typename:int	file:
toggleSelectOrder	sqlite/shell.c	/^static void toggleSelectOrder(sqlite3 *db){$/;"	f	typeref:typename:void	file:
token	sqlite/sqlite3.c	/^  void *token;                  \/* id that may be used to recursive triggers *\/$/;"	m	struct:SubProgram	typeref:typename:void *	file:
token	sqlite/sqlite3.c	/^  void *token;            \/* Copy of SubProgram.token *\/$/;"	m	struct:VdbeFrame	typeref:typename:void *	file:
totalAlloc	sqlite/sqlite3.c	/^  u64 totalAlloc;     \/* Total of all malloc calls - includes internal frag *\/$/;"	m	struct:Mem5Global	typeref:typename:u64	file:
totalExcess	sqlite/sqlite3.c	/^  u64 totalExcess;    \/* Total internal fragmentation *\/$/;"	m	struct:Mem5Global	typeref:typename:u64	file:
total_changes	include/sqlite/sqlite3ext.h	/^  int  (*total_changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *)
tr_tm	sqlite/sqlite3.c	/^  u8 tr_tm;               \/* One of TRIGGER_BEFORE, TRIGGER_AFTER *\/$/;"	m	struct:Trigger	typeref:typename:u8	file:
trace	include/sqlite/sqlite3ext.h	/^  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void * (*)(sqlite3 *,void (* xTrace)(void *,const char *),void *)
trace	sqlite/sqlite3.c	/^  int trace;                 \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	typeref:typename:int	file:
traceOut	sqlite/shell.c	/^  FILE *traceOut;        \/* Output for sqlite3_trace() *\/$/;"	m	struct:ShellState	typeref:typename:FILE *	file:
trace_v2	include/sqlite/sqlite3ext.h	/^  int (*trace_v2)(sqlite3*,unsigned,int(*)(unsigned,void*,void*,void*),void*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,unsigned,int (*)(unsigned,void *,void *,void *),void *)
transaction_manager_	include/vtable/virtual_table.h	/^  TransactionManager *transaction_manager_;$/;"	m	class:cmudb::StorageEngine	typeref:typename:TransactionManager *
transfer_bindings	include/sqlite/sqlite3ext.h	/^  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_stmt *,sqlite3_stmt *)
trigHash	sqlite/sqlite3.c	/^  Hash trigHash;       \/* All triggers indexed by name *\/$/;"	m	struct:Schema	typeref:typename:Hash	file:
tryToClone	sqlite/shell.c	/^static void tryToClone(ShellState *p, const char *zNewDb){$/;"	f	typeref:typename:void	file:
tryToCloneData	sqlite/shell.c	/^static void tryToCloneData($/;"	f	typeref:typename:void	file:
tryToCloneSchema	sqlite/shell.c	/^static void tryToCloneSchema($/;"	f	typeref:typename:void	file:
tuple_	include/concurrency/transaction.h	/^  Tuple tuple_;$/;"	m	class:cmudb::WriteRecord	typeref:typename:Tuple
tuple_	include/table/table_iterator.h	/^  Tuple *tuple_;$/;"	m	class:cmudb::TableIterator	typeref:typename:Tuple *
tuple_is_inlined	include/catalog/schema.h	/^  bool tuple_is_inlined;$/;"	m	class:cmudb::Schema	typeref:typename:bool
txn_	include/table/table_iterator.h	/^  Transaction *txn_;$/;"	m	class:cmudb::TableIterator	typeref:typename:Transaction *
txn_id_	include/concurrency/transaction.h	/^  txn_id_t txn_id_;$/;"	m	class:cmudb::Transaction	typeref:typename:txn_id_t
txn_id_	include/logging/log_record.h	/^  txn_id_t txn_id_ = INVALID_TXN_ID;$/;"	m	class:cmudb::LogRecord	typeref:typename:txn_id_t
txn_id_t	include/common/config.h	/^typedef int32_t txn_id_t;  \/\/ transaction id type$/;"	t	namespace:cmudb	typeref:typename:int32_t
type	include/common/exception.h	/^  ExceptionType type;$/;"	m	class:cmudb::Exception	typeref:typename:ExceptionType
type_id_	include/type/type.h	/^  TypeId type_id_;$/;"	m	class:cmudb::Type	typeref:typename:TypeId
type_id_	include/type/value.h	/^  TypeId type_id_;$/;"	m	class:cmudb::Value	typeref:typename:TypeId
tz	sqlite/sqlite3.c	/^  int tz;             \/* Timezone offset in minutes *\/$/;"	m	struct:DateTime	typeref:typename:int	file:
tzSet	sqlite/sqlite3.c	/^  char tzSet;         \/* Timezone was set explicitly *\/$/;"	m	struct:DateTime	typeref:typename:char	file:
u	sqlite/shell.c	/^  } u;$/;"	m	struct:SHA3Context	typeref:union:SHA3Context::__anonc53fbaef010a	file:
u	sqlite/sqlite3.c	/^    } u;$/;"	m	struct:ExprList::ExprList_item	typeref:union:ExprList::ExprList_item::__anon76f104fc150a	file:
u	sqlite/sqlite3.c	/^  } u;$/;"	m	struct:Expr	typeref:union:Expr::__anon76f104fc130a	file:
u	sqlite/sqlite3.c	/^  } u;$/;"	m	struct:FuncDef	typeref:union:FuncDef::__anon76f104fc120a	file:
u	sqlite/sqlite3.c	/^  } u;$/;"	m	struct:Mem3Block	typeref:union:Mem3Block::__anon76f104fc1e0a	file:
u	sqlite/sqlite3.c	/^  } u;$/;"	m	struct:Walker	typeref:union:Walker::__anon76f104fc1a0a	file:
u	sqlite/sqlite3.c	/^  } u;$/;"	m	struct:sqlite3_value	typeref:union:sqlite3_value::MemValue	file:
u1	sqlite/sqlite3.c	/^    } u1;$/;"	m	struct:SrcList::SrcList_item	typeref:union:SrcList::SrcList_item::__anon76f104fc180a	file:
u1	sqlite/sqlite3.c	/^  } u1;$/;"	m	struct:sqlite3	typeref:union:sqlite3::__anon76f104fc110a	file:
u16	sqlite/sqlite3.c	/^typedef UINT16_TYPE u16;           \/* 2-byte unsigned integer *\/$/;"	t	typeref:typename:UINT16_TYPE	file:
u32	sqlite/sqlite3.c	/^typedef UINT32_TYPE u32;           \/* 4-byte unsigned integer *\/$/;"	t	typeref:typename:UINT32_TYPE	file:
u64	sqlite/shell.c	/^typedef sqlite3_uint64 u64;$/;"	t	typeref:typename:sqlite3_uint64	file:
u64	sqlite/sqlite3.c	/^typedef sqlite_uint64 u64;         \/* 8-byte unsigned integer *\/$/;"	t	typeref:typename:sqlite_uint64	file:
u8	sqlite/sqlite3.c	/^typedef UINT8_TYPE u8;             \/* 1-byte unsigned integer *\/$/;"	t	typeref:typename:UINT8_TYPE	file:
uTemp	sqlite/sqlite3.c	/^  u32 uTemp;          \/* Transient storage for serial_type in OP_MakeRecord *\/$/;"	m	struct:sqlite3_value	typeref:typename:u32	file:
uc	sqlite/sqlite3.c	/^  } uc;$/;"	m	struct:VdbeCursor	typeref:union:VdbeCursor::__anon76f104fc1b0a	file:
uninlined_columns	include/catalog/schema.h	/^  std::vector<int> uninlined_columns;$/;"	m	class:cmudb::Schema	typeref:typename:std::vector<int>
uniqNotNull	sqlite/sqlite3.c	/^  unsigned uniqNotNull:1;  \/* True if UNIQUE and NOT NULL for all columns *\/$/;"	m	struct:Index	typeref:typename:unsigned:1	file:
unlikely	sqlite/sqlite3.c	/^#define unlikely(/;"	d	file:
unlock_notify	include/sqlite/sqlite3ext.h	/^  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,void (*)(void **,int),void *)
unused_string	sqlite/shell.c	/^static const char *unused_string($/;"	f	typeref:typename:const char *	file:
update_hook	include/sqlite/sqlite3ext.h	/^  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,$/;"	m	struct:sqlite3_api_routines	typeref:typename:void * (*)(sqlite3 *,void (*)(void *,int,char const *,char const *,sqlite_int64),void *)
update_rid_	include/logging/log_record.h	/^  RID update_rid_;$/;"	m	class:cmudb::LogRecord	typeref:typename:RID
uptr	sqlite/sqlite3.c	/^  typedef u32 uptr;$/;"	t	typeref:typename:u32	file:
uptr	sqlite/sqlite3.c	/^  typedef u64 uptr;$/;"	t	typeref:typename:u64	file:
uptr	sqlite/sqlite3.c	/^  typedef uintptr_t uptr;$/;"	t	typeref:typename:uintptr_t	file:
uri_boolean	include/sqlite/sqlite3ext.h	/^  int (*uri_boolean)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(const char *,const char *,int)
uri_int64	include/sqlite/sqlite3ext.h	/^  sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite3_int64 (*)(const char *,const char *,sqlite3_int64)
uri_parameter	include/sqlite/sqlite3ext.h	/^  const char *(*uri_parameter)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const char * (*)(const char *,const char *)
usable	include/sqlite/sqlite3.h	/^unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	typeref:typename:unsigned char
usable	sqlite/sqlite3.c	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	typeref:typename:unsigned char	file:
usage	sqlite/shell.c	/^static void usage(int showDetail){$/;"	f	typeref:typename:void	file:
useRandomRowid	sqlite/sqlite3.c	/^  Bool useRandomRowid:1;  \/* Generate new record numbers semi-randomly *\/$/;"	m	struct:VdbeCursor	typeref:typename:Bool:1	file:
useSortingIdx	sqlite/sqlite3.c	/^  u8 useSortingIdx;       \/* In direct mode, reference the sorting index rather$/;"	m	struct:AggInfo	typeref:typename:u8	file:
user_data	include/sqlite/sqlite3ext.h	/^  void * (*user_data)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void * (*)(sqlite3_context *)
usesStmtJournal	sqlite/sqlite3.c	/^  bft usesStmtJournal:1;  \/* True if uses a statement journal *\/$/;"	m	struct:Vdbe	typeref:typename:bft:1	file:
utf8_printf	sqlite/shell.c	/^# define utf8_printf /;"	d	file:
utf8_printf	sqlite/shell.c	/^void utf8_printf(FILE *out, const char *zFormat, ...){$/;"	f	typeref:typename:void
utf8_width_print	sqlite/shell.c	/^static void utf8_width_print(FILE *pOut, int w, const char *zUtf){$/;"	f	typeref:typename:void	file:
v	sqlite/sqlite3.c	/^  Vdbe *v;                \/* VM this frame belongs to *\/$/;"	m	struct:VdbeFrame	typeref:typename:Vdbe *	file:
v	sqlite/sqlite3.c	/^  Vdbe *v;$/;"	m	struct:PreUpdate	typeref:typename:Vdbe *	file:
valid	sqlite/shell.c	/^  int valid;          \/* Is there legit data in here? *\/$/;"	m	struct:SavedModeInfo	typeref:typename:int	file:
validHMS	sqlite/sqlite3.c	/^  char validHMS;      \/* True (1) if h,m,s are valid *\/$/;"	m	struct:DateTime	typeref:typename:char	file:
validJD	sqlite/sqlite3.c	/^  char validJD;       \/* True (1) if iJD is valid *\/$/;"	m	struct:DateTime	typeref:typename:char	file:
validJulianDay	sqlite/sqlite3.c	/^static int validJulianDay(sqlite3_int64 iJD){$/;"	f	typeref:typename:int	file:
validTZ	sqlite/sqlite3.c	/^  char validTZ;       \/* True (1) if tz is valid *\/$/;"	m	struct:DateTime	typeref:typename:char	file:
validYMD	sqlite/sqlite3.c	/^  char validYMD;      \/* True (1) if Y,M,D are valid *\/$/;"	m	struct:DateTime	typeref:typename:char	file:
value	include/buffer/lru_replacer.h	/^    T    value; $/;"	m	struct:cmudb::LRUReplacer::Node	typeref:typename:T
value_	include/type/value.h	/^  } value_;$/;"	m	class:cmudb::Value	typeref:union:cmudb::Value::Val
value_blob	include/sqlite/sqlite3ext.h	/^  const void * (*value_blob)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const void * (*)(sqlite3_value *)
value_bytes	include/sqlite/sqlite3ext.h	/^  int  (*value_bytes)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_value *)
value_bytes16	include/sqlite/sqlite3ext.h	/^  int  (*value_bytes16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_value *)
value_double	include/sqlite/sqlite3ext.h	/^  double  (*value_double)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:double (*)(sqlite3_value *)
value_dup	include/sqlite/sqlite3ext.h	/^  sqlite3_value *(*value_dup)(const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite3_value * (*)(const sqlite3_value *)
value_free	include/sqlite/sqlite3ext.h	/^  void (*value_free)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void (*)(sqlite3_value *)
value_int	include/sqlite/sqlite3ext.h	/^  int  (*value_int)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_value *)
value_int64	include/sqlite/sqlite3ext.h	/^  sqlite_int64  (*value_int64)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite_int64 (*)(sqlite3_value *)
value_numeric_type	include/sqlite/sqlite3ext.h	/^  int  (*value_numeric_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_value *)
value_subtype	include/sqlite/sqlite3ext.h	/^  unsigned int (*value_subtype)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:unsigned int (*)(sqlite3_value *)
value_text	include/sqlite/sqlite3ext.h	/^  const unsigned char * (*value_text)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const unsigned char * (*)(sqlite3_value *)
value_text16	include/sqlite/sqlite3ext.h	/^  const void * (*value_text16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const void * (*)(sqlite3_value *)
value_text16be	include/sqlite/sqlite3ext.h	/^  const void * (*value_text16be)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const void * (*)(sqlite3_value *)
value_text16le	include/sqlite/sqlite3ext.h	/^  const void * (*value_text16le)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:const void * (*)(sqlite3_value *)
value_type	include/sqlite/sqlite3ext.h	/^  int  (*value_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_value *)
variable_length	include/catalog/column.h	/^  int32_t variable_length = -1;$/;"	m	class:cmudb::Column	typeref:typename:int32_t
varlen	include/type/value.h	/^    char *varlen;$/;"	m	union:cmudb::Value::Val	typeref:typename:char *
vfsList	sqlite/sqlite3.c	/^#define vfsList /;"	d	file:
vfsList	sqlite/sqlite3.c	/^static sqlite3_vfs * SQLITE_WSD vfsList = 0;$/;"	v	typeref:typename:sqlite3_vfs * SQLITE_WSD	file:
vfsUnlink	sqlite/sqlite3.c	/^static void vfsUnlink(sqlite3_vfs *pVfs){$/;"	f	typeref:typename:void	file:
vfs_find	include/sqlite/sqlite3ext.h	/^  sqlite3_vfs *(*vfs_find)(const char*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:sqlite3_vfs * (*)(const char *)
vfs_register	include/sqlite/sqlite3ext.h	/^  int (*vfs_register)(sqlite3_vfs*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_vfs *,int)
vfs_unregister	include/sqlite/sqlite3ext.h	/^  int (*vfs_unregister)(sqlite3_vfs*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3_vfs *)
viaCoroutine	sqlite/sqlite3.c	/^      unsigned viaCoroutine :1;  \/* Implemented as a co-routine *\/$/;"	m	struct:SrcList::SrcList_item::__anon76f104fc1708	typeref:typename:unsigned:1	file:
virtual_table_	include/vtable/virtual_table.h	/^  VirtualTable *virtual_table_;$/;"	m	class:cmudb::Cursor	typeref:typename:VirtualTable *
vmprintf	include/sqlite/sqlite3ext.h	/^  char *(*vmprintf)(const char*,va_list);$/;"	m	struct:sqlite3_api_routines	typeref:typename:char * (*)(const char *,va_list)
vsnprintf	include/sqlite/sqlite3ext.h	/^  char *(*vsnprintf)(int,char*,const char*,va_list);$/;"	m	struct:sqlite3_api_routines	typeref:typename:char * (*)(int,char *,const char *,va_list)
vtabOnConflict	sqlite/sqlite3.c	/^  u8 vtabOnConflict;            \/* Value to return for s3_vtab_on_conflict() *\/$/;"	m	struct:sqlite3	typeref:typename:u8	file:
vtab_config	include/sqlite/sqlite3ext.h	/^  int (*vtab_config)(sqlite3*,int op,...);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,int op,...)
vtab_on_conflict	include/sqlite/sqlite3ext.h	/^  int (*vtab_on_conflict)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *)
vtable	CMakeLists.txt	/^add_library(vtable SHARED ${srcs})$/;"	t
wal_autocheckpoint	include/sqlite/sqlite3ext.h	/^  int (*wal_autocheckpoint)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,int)
wal_checkpoint	include/sqlite/sqlite3ext.h	/^  int (*wal_checkpoint)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *)
wal_checkpoint_v2	include/sqlite/sqlite3ext.h	/^  int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(sqlite3 *,const char *,int,int *,int *)
wal_hook	include/sqlite/sqlite3ext.h	/^  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);$/;"	m	struct:sqlite3_api_routines	typeref:typename:void * (*)(sqlite3 *,int (*)(void *,sqlite3 *,const char *,int),void *)
walkerDepth	sqlite/sqlite3.c	/^  int walkerDepth;                          \/* Number of subqueries *\/$/;"	m	struct:Walker	typeref:typename:int	file:
wrFlag	sqlite/sqlite3.c	/^  u8 wrFlag;              \/* The wrFlag argument to sqlite3BtreeCursor() *\/$/;"	m	struct:VdbeCursor	typeref:typename:u8	file:
writableSchema	sqlite/shell.c	/^  int writableSchema;    \/* True if PRAGMA writable_schema=ON *\/$/;"	m	struct:ShellState	typeref:typename:int	file:
writeMask	sqlite/sqlite3.c	/^  yDbMask writeMask;   \/* Start a write transaction on these databases *\/$/;"	m	struct:Parse	typeref:typename:yDbMask	file:
write_set_	include/concurrency/transaction.h	/^  std::shared_ptr<std::deque<WriteRecord>> write_set_;$/;"	m	class:cmudb::Transaction	typeref:typename:std::shared_ptr<std::deque<WriteRecord>>
writefileFunc	sqlite/shell.c	/^static void writefileFunc($/;"	f	typeref:typename:void	file:
writer_	include/common/rwmutex.h	/^  cond_t writer_;$/;"	m	class:cmudb::RWMutex	typeref:typename:cond_t
writer_entered_	include/common/rwmutex.h	/^  bool writer_entered_;$/;"	m	class:cmudb::RWMutex	typeref:typename:bool
wsdHooks	sqlite/sqlite3.c	/^# define wsdHooks /;"	d	file:
wsdHooksInit	sqlite/sqlite3.c	/^# define wsdHooksInit /;"	d	file:
wsdHooksInit	sqlite/sqlite3.c	/^# define wsdHooksInit$/;"	d	file:
wsdStat	sqlite/sqlite3.c	/^# define wsdStat /;"	d	file:
wsdStatInit	sqlite/sqlite3.c	/^# define wsdStatInit /;"	d	file:
wsdStatInit	sqlite/sqlite3.c	/^# define wsdStatInit$/;"	d	file:
wtype_	include/concurrency/transaction.h	/^  WType wtype_;$/;"	m	class:cmudb::WriteRecord	typeref:typename:WType
x	sqlite/shell.c	/^    unsigned char x[1600];    \/* ... or 1600 bytes *\/$/;"	m	union:SHA3Context::__anonc53fbaef010a	typeref:typename:unsigned char[1600]	file:
x	sqlite/sqlite3.c	/^      } x;$/;"	m	union:ExprList::ExprList_item::__anon76f104fc150a	typeref:struct:ExprList::ExprList_item::__anon76f104fc150a::__anon76f104fc1608	file:
x	sqlite/sqlite3.c	/^  } x;$/;"	m	struct:Expr	typeref:union:Expr::__anon76f104fc140a	file:
xAccess	include/sqlite/sqlite3.h	/^int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,const char * zName,int flags,int * pResOut)
xAccess	sqlite/sqlite3.c	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,const char * zName,int flags,int * pResOut)	file:
xAdvance	sqlite/sqlite3.c	/^    int (*xAdvance)(BtCursor *, int);$/;"	m	union:VdbeOp::p4union	typeref:typename:int (*)(BtCursor *,int)	file:
xAuth	sqlite/sqlite3.c	/^  sqlite3_xauth xAuth;          \/* Access authorization function *\/$/;"	m	struct:sqlite3	typeref:typename:sqlite3_xauth	file:
xBacktrace	sqlite/sqlite3.c	/^  void (*xBacktrace)(int, int, void **);$/;"	m	struct:__anon76f104fc1d08	typeref:typename:void (*)(int,int,void **)	file:
xBegin	include/sqlite/sqlite3.h	/^int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)
xBegin	sqlite/sqlite3.c	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)	file:
xBenignBegin	sqlite/sqlite3.c	/^  void (*xBenignBegin)(void);$/;"	m	struct:BenignMallocHooks	typeref:typename:void (*)(void)	file:
xBenignEnd	sqlite/sqlite3.c	/^  void (*xBenignEnd)(void);$/;"	m	struct:BenignMallocHooks	typeref:typename:void (*)(void)	file:
xBestIndex	include/sqlite/sqlite3.h	/^int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab,sqlite3_index_info *)
xBestIndex	sqlite/sqlite3.c	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab,sqlite3_index_info *)	file:
xCachesize	include/sqlite/sqlite3.h	/^void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(sqlite3_pcache *,int nCachesize)
xCachesize	include/sqlite/sqlite3.h	/^void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *,int nCachesize)
xCachesize	sqlite/sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(sqlite3_pcache *,int nCachesize)	file:
xCachesize	sqlite/sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *,int nCachesize)	file:
xCheckReservedLock	include/sqlite/sqlite3.h	/^int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int * pResOut)
xCheckReservedLock	sqlite/sqlite3.c	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int * pResOut)	file:
xClose	include/sqlite/sqlite3.h	/^int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *)
xClose	include/sqlite/sqlite3.h	/^int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *)
xClose	sqlite/sqlite3.c	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *)	file:
xClose	sqlite/sqlite3.c	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *)	file:
xCmp	sqlite/sqlite3.c	/^  int (*xCmp)(void*,int, const void*, int, const void*);$/;"	m	struct:CollSeq	typeref:typename:int (*)(void *,int,const void *,int,const void *)	file:
xCollNeeded	sqlite/sqlite3.c	/^  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);$/;"	m	struct:sqlite3	typeref:typename:void (*)(void *,sqlite3 *,int eTextRep,const char *)	file:
xCollNeeded16	sqlite/sqlite3.c	/^  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);$/;"	m	struct:sqlite3	typeref:typename:void (*)(void *,sqlite3 *,int eTextRep,const void *)	file:
xColumn	include/sqlite/sqlite3.h	/^int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *,sqlite3_context *,int)
xColumn	sqlite/sqlite3.c	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *,sqlite3_context *,int)	file:
xColumnCount	include/sqlite/sqlite3.h	/^int (*xColumnCount)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *)
xColumnCount	sqlite/sqlite3.c	/^  int (*xColumnCount)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *)	file:
xColumnSize	include/sqlite/sqlite3.h	/^int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iCol,int * pnToken)
xColumnSize	sqlite/sqlite3.c	/^  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iCol,int * pnToken)	file:
xColumnText	include/sqlite/sqlite3.h	/^int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iCol,const char ** pz,int * pn)
xColumnText	sqlite/sqlite3.c	/^  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iCol,const char ** pz,int * pn)	file:
xColumnTotalSize	include/sqlite/sqlite3.h	/^int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iCol,sqlite3_int64 * pnToken)
xColumnTotalSize	sqlite/sqlite3.c	/^  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iCol,sqlite3_int64 * pnToken)	file:
xCommit	include/sqlite/sqlite3.h	/^int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)
xCommit	sqlite/sqlite3.c	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)	file:
xCommitCallback	sqlite/sqlite3.c	/^  int (*xCommitCallback)(void*);    \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	typeref:typename:int (*)(void *)	file:
xConnect	include/sqlite/sqlite3.h	/^int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3 *,void * pAux,int argc,const char * const * argv,sqlite3_vtab ** ppVTab,char **)
xConnect	sqlite/sqlite3.c	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3 *,void * pAux,int argc,const char * const * argv,sqlite3_vtab ** ppVTab,char **)	file:
xCreate	include/sqlite/sqlite3.h	/^int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3 *,void * pAux,int argc,const char * const * argv,sqlite3_vtab ** ppVTab,char **)
xCreate	include/sqlite/sqlite3.h	/^int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);$/;"	m	struct:fts5_tokenizer	typeref:typename:int (*)(void *,const char ** azArg,int nArg,Fts5Tokenizer ** ppOut)
xCreate	include/sqlite/sqlite3.h	/^sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:sqlite3_pcache * (*)(int szPage,int bPurgeable)
xCreate	include/sqlite/sqlite3.h	/^sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:sqlite3_pcache * (*)(int szPage,int szExtra,int bPurgeable)
xCreate	sqlite/sqlite3.c	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3 *,void * pAux,int argc,const char * const * argv,sqlite3_vtab ** ppVTab,char **)	file:
xCreate	sqlite/sqlite3.c	/^  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);$/;"	m	struct:fts5_tokenizer	typeref:typename:int (*)(void *,const char ** azArg,int nArg,Fts5Tokenizer ** ppOut)	file:
xCreate	sqlite/sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:sqlite3_pcache * (*)(int szPage,int bPurgeable)	file:
xCreate	sqlite/sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:sqlite3_pcache * (*)(int szPage,int szExtra,int bPurgeable)	file:
xCreateFunction	include/sqlite/sqlite3.h	/^int (*xCreateFunction)($/;"	m	struct:fts5_api	typeref:typename:int (*)(fts5_api * pApi,const char * zName,void * pContext,fts5_extension_function xFunction,void (* xDestroy)(void *))
xCreateFunction	sqlite/sqlite3.c	/^  int (*xCreateFunction)($/;"	m	struct:fts5_api	typeref:typename:int (*)(fts5_api * pApi,const char * zName,void * pContext,fts5_extension_function xFunction,void (* xDestroy)(void *))	file:
xCreateTokenizer	include/sqlite/sqlite3.h	/^int (*xCreateTokenizer)($/;"	m	struct:fts5_api	typeref:typename:int (*)(fts5_api * pApi,const char * zName,void * pContext,fts5_tokenizer * pTokenizer,void (* xDestroy)(void *))
xCreateTokenizer	sqlite/sqlite3.c	/^  int (*xCreateTokenizer)($/;"	m	struct:fts5_api	typeref:typename:int (*)(fts5_api * pApi,const char * zName,void * pContext,fts5_tokenizer * pTokenizer,void (* xDestroy)(void *))	file:
xCurrentTime	include/sqlite/sqlite3.h	/^int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,double *)
xCurrentTime	sqlite/sqlite3.c	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,double *)	file:
xCurrentTimeInt64	include/sqlite/sqlite3.h	/^int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,sqlite3_int64 *)
xCurrentTimeInt64	sqlite/sqlite3.c	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,sqlite3_int64 *)	file:
xDel	sqlite/sqlite3.c	/^  void (*xDel)(void*);  \/* Destructor for pUser *\/$/;"	m	struct:CollSeq	typeref:typename:void (*)(void *)	file:
xDel	sqlite/sqlite3.c	/^  void (*xDel)(void*);\/* Destructor for Mem.z - only valid if MEM_Dyn *\/$/;"	m	struct:sqlite3_value	typeref:typename:void (*)(void *)	file:
xDelUser	include/sqlite/sqlite3.h	/^void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	typeref:typename:void (*)(void *)
xDelUser	include/sqlite/sqlite3.h	/^void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:void (*)(void *)
xDelUser	sqlite/sqlite3.c	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	typeref:typename:void (*)(void *)	file:
xDelUser	sqlite/sqlite3.c	/^  void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info	typeref:typename:void (*)(void *)	file:
xDelete	include/sqlite/sqlite3.h	/^int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,const char * zName,int syncDir)
xDelete	include/sqlite/sqlite3.h	/^void (*xDelete)(Fts5Tokenizer*);$/;"	m	struct:fts5_tokenizer	typeref:typename:void (*)(Fts5Tokenizer *)
xDelete	sqlite/sqlite3.c	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,const char * zName,int syncDir)	file:
xDelete	sqlite/sqlite3.c	/^  void (*xDelete)(Fts5Tokenizer*);$/;"	m	struct:fts5_tokenizer	typeref:typename:void (*)(Fts5Tokenizer *)	file:
xDeleteAux	sqlite/sqlite3.c	/^  void (*xDeleteAux)(void*);      \/* Destructor for the aux data *\/$/;"	m	struct:AuxData	typeref:typename:void (*)(void *)	file:
xDestroy	include/sqlite/sqlite3.h	/^int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)
xDestroy	include/sqlite/sqlite3.h	/^void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(sqlite3_pcache *)
xDestroy	include/sqlite/sqlite3.h	/^void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *)
xDestroy	sqlite/sqlite3.c	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)	file:
xDestroy	sqlite/sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(sqlite3_pcache *)	file:
xDestroy	sqlite/sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *)	file:
xDestroy	sqlite/sqlite3.c	/^  void (*xDestroy)(void *);            \/* Module destructor function *\/$/;"	m	struct:Module	typeref:typename:void (*)(void *)	file:
xDestroy	sqlite/sqlite3.c	/^  void (*xDestroy)(void *);$/;"	m	struct:FuncDestructor	typeref:typename:void (*)(void *)	file:
xDeviceCharacteristics	include/sqlite/sqlite3.h	/^int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *)
xDeviceCharacteristics	sqlite/sqlite3.c	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *)	file:
xDisconnect	include/sqlite/sqlite3.h	/^int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)
xDisconnect	sqlite/sqlite3.c	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)	file:
xDlClose	include/sqlite/sqlite3.h	/^void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	typeref:typename:void (*)(sqlite3_vfs *,void *)
xDlClose	sqlite/sqlite3.c	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	typeref:typename:void (*)(sqlite3_vfs *,void *)	file:
xDlError	include/sqlite/sqlite3.h	/^void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	typeref:typename:void (*)(sqlite3_vfs *,int nByte,char * zErrMsg)
xDlError	sqlite/sqlite3.c	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	typeref:typename:void (*)(sqlite3_vfs *,int nByte,char * zErrMsg)	file:
xDlOpen	include/sqlite/sqlite3.h	/^void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	typeref:typename:void * (*)(sqlite3_vfs *,const char * zFilename)
xDlOpen	sqlite/sqlite3.c	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	typeref:typename:void * (*)(sqlite3_vfs *,const char * zFilename)	file:
xDlSym	include/sqlite/sqlite3.h	/^void (*(*xDlSym)(sqlite3_vfs*,void*, const char *zSymbol))(void);$/;"	m	struct:sqlite3_vfs	typeref:typename:void (* (*)(sqlite3_vfs *,void *,const char * zSymbol))(void)
xDlSym	sqlite/sqlite3.c	/^  void (*(*xDlSym)(sqlite3_vfs*,void*, const char *zSymbol))(void);$/;"	m	struct:sqlite3_vfs	typeref:typename:void (* (*)(sqlite3_vfs *,void *,const char * zSymbol))(void)	file:
xEof	include/sqlite/sqlite3.h	/^int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *)
xEof	sqlite/sqlite3.c	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *)	file:
xExprCallback	sqlite/sqlite3.c	/^  int (*xExprCallback)(Walker*, Expr*);     \/* Callback for expressions *\/$/;"	m	struct:Walker	typeref:typename:int (*)(Walker *,Expr *)	file:
xFetch	include/sqlite/sqlite3.h	/^int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,sqlite3_int64 iOfst,int iAmt,void ** pp)
xFetch	include/sqlite/sqlite3.h	/^sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:sqlite3_pcache_page * (*)(sqlite3_pcache *,unsigned key,int createFlag)
xFetch	include/sqlite/sqlite3.h	/^void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void * (*)(sqlite3_pcache *,unsigned key,int createFlag)
xFetch	sqlite/sqlite3.c	/^  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,sqlite3_int64 iOfst,int iAmt,void ** pp)	file:
xFetch	sqlite/sqlite3.c	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:sqlite3_pcache_page * (*)(sqlite3_pcache *,unsigned key,int createFlag)	file:
xFetch	sqlite/sqlite3.c	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void * (*)(sqlite3_pcache *,unsigned key,int createFlag)	file:
xFileControl	include/sqlite/sqlite3.h	/^int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int op,void * pArg)
xFileControl	sqlite/sqlite3.c	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int op,void * pArg)	file:
xFileSize	include/sqlite/sqlite3.h	/^int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,sqlite3_int64 * pSize)
xFileSize	sqlite/sqlite3.c	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,sqlite3_int64 * pSize)	file:
xFilter	include/sqlite/sqlite3.h	/^int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *,int idxNum,const char * idxStr,int argc,sqlite3_value ** argv)
xFilter	sqlite/sqlite3.c	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *,int idxNum,const char * idxStr,int argc,sqlite3_value ** argv)	file:
xFinalize	sqlite/sqlite3.c	/^  void (*xFinalize)(sqlite3_context*);                  \/* Agg finalizer *\/$/;"	m	struct:FuncDef	typeref:typename:void (*)(sqlite3_context *)	file:
xFindFunction	include/sqlite/sqlite3.h	/^int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVtab,int nArg,const char * zName,void (** pxFunc)(sqlite3_context *,int,sqlite3_value **),void ** ppArg)
xFindFunction	sqlite/sqlite3.c	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVtab,int nArg,const char * zName,void (** pxFunc)(sqlite3_context *,int,sqlite3_value **),void ** ppArg)	file:
xFindTokenizer	include/sqlite/sqlite3.h	/^int (*xFindTokenizer)($/;"	m	struct:fts5_api	typeref:typename:int (*)(fts5_api * pApi,const char * zName,void ** ppContext,fts5_tokenizer * pTokenizer)
xFindTokenizer	sqlite/sqlite3.c	/^  int (*xFindTokenizer)($/;"	m	struct:fts5_api	typeref:typename:int (*)(fts5_api * pApi,const char * zName,void ** ppContext,fts5_tokenizer * pTokenizer)	file:
xFree	include/sqlite/sqlite3.h	/^void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:void (*)(void *)
xFree	sqlite/sqlite3.c	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:void (*)(void *)	file:
xFullPathname	include/sqlite/sqlite3.h	/^int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,const char * zName,int nOut,char * zOut)
xFullPathname	sqlite/sqlite3.c	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,const char * zName,int nOut,char * zOut)	file:
xFunc	sqlite/sqlite3.c	/^  int (*xFunc)(void *,int);  \/* The busy callback *\/$/;"	m	struct:BusyHandler	typeref:typename:int (*)(void *,int)	file:
xGetAuxdata	include/sqlite/sqlite3.h	/^void *(*xGetAuxdata)(Fts5Context*, int bClear);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:void * (*)(Fts5Context *,int bClear)
xGetAuxdata	sqlite/sqlite3.c	/^  void *(*xGetAuxdata)(Fts5Context*, int bClear);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:void * (*)(Fts5Context *,int bClear)	file:
xGetLastError	include/sqlite/sqlite3.h	/^int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,int,char *)
xGetLastError	sqlite/sqlite3.c	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,int,char *)	file:
xGetSystemCall	include/sqlite/sqlite3.h	/^sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	typeref:typename:sqlite3_syscall_ptr (*)(sqlite3_vfs *,const char * zName)
xGetSystemCall	sqlite/sqlite3.c	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	typeref:typename:sqlite3_syscall_ptr (*)(sqlite3_vfs *,const char * zName)	file:
xInit	include/sqlite/sqlite3.h	/^int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:int (*)(void *)
xInit	include/sqlite/sqlite3.h	/^int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:int (*)(void *)
xInit	include/sqlite/sqlite3.h	/^int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:int (*)(void *)
xInit	sqlite/sqlite3.c	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:int (*)(void *)	file:
xInit	sqlite/sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:int (*)(void *)	file:
xInit	sqlite/sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:int (*)(void *)	file:
xInst	include/sqlite/sqlite3.h	/^int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iIdx,int * piPhrase,int * piCol,int * piOff)
xInst	sqlite/sqlite3.c	/^  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iIdx,int * piPhrase,int * piCol,int * piOff)	file:
xInstCount	include/sqlite/sqlite3.h	/^int (*xInstCount)(Fts5Context*, int *pnInst);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int * pnInst)
xInstCount	sqlite/sqlite3.c	/^  int (*xInstCount)(Fts5Context*, int *pnInst);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int * pnInst)	file:
xLock	include/sqlite/sqlite3.h	/^int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int)
xLock	sqlite/sqlite3.c	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int)	file:
xLog	sqlite/sqlite3.c	/^  void (*xLog)(void*,int,const char*); \/* Function for logging *\/$/;"	m	struct:Sqlite3Config	typeref:typename:void (*)(void *,int,const char *)	file:
xMalloc	include/sqlite/sqlite3.h	/^void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:void * (*)(int)
xMalloc	sqlite/sqlite3.c	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:void * (*)(int)	file:
xMutexAlloc	include/sqlite/sqlite3.h	/^sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:sqlite3_mutex * (*)(int)
xMutexAlloc	sqlite/sqlite3.c	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:sqlite3_mutex * (*)(int)	file:
xMutexEnd	include/sqlite/sqlite3.h	/^int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:int (*)(void)
xMutexEnd	sqlite/sqlite3.c	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:int (*)(void)	file:
xMutexEnter	include/sqlite/sqlite3.h	/^void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:void (*)(sqlite3_mutex *)
xMutexEnter	sqlite/sqlite3.c	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:void (*)(sqlite3_mutex *)	file:
xMutexFree	include/sqlite/sqlite3.h	/^void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:void (*)(sqlite3_mutex *)
xMutexFree	sqlite/sqlite3.c	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:void (*)(sqlite3_mutex *)	file:
xMutexHeld	include/sqlite/sqlite3.h	/^int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:int (*)(sqlite3_mutex *)
xMutexHeld	sqlite/sqlite3.c	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:int (*)(sqlite3_mutex *)	file:
xMutexInit	include/sqlite/sqlite3.h	/^int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:int (*)(void)
xMutexInit	sqlite/sqlite3.c	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:int (*)(void)	file:
xMutexLeave	include/sqlite/sqlite3.h	/^void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:void (*)(sqlite3_mutex *)
xMutexLeave	sqlite/sqlite3.c	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:void (*)(sqlite3_mutex *)	file:
xMutexNotheld	include/sqlite/sqlite3.h	/^int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:int (*)(sqlite3_mutex *)
xMutexNotheld	sqlite/sqlite3.c	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:int (*)(sqlite3_mutex *)	file:
xMutexTry	include/sqlite/sqlite3.h	/^int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:int (*)(sqlite3_mutex *)
xMutexTry	sqlite/sqlite3.c	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	typeref:typename:int (*)(sqlite3_mutex *)	file:
xNext	include/sqlite/sqlite3.h	/^int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *)
xNext	sqlite/sqlite3.c	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *)	file:
xNextSystemCall	include/sqlite/sqlite3.h	/^const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	typeref:typename:const char * (*)(sqlite3_vfs *,const char * zName)
xNextSystemCall	sqlite/sqlite3.c	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	typeref:typename:const char * (*)(sqlite3_vfs *,const char * zName)	file:
xOpen	include/sqlite/sqlite3.h	/^int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,const char * zName,sqlite3_file *,int flags,int * pOutFlags)
xOpen	include/sqlite/sqlite3.h	/^int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab,sqlite3_vtab_cursor ** ppCursor)
xOpen	sqlite/sqlite3.c	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,const char * zName,sqlite3_file *,int flags,int * pOutFlags)	file:
xOpen	sqlite/sqlite3.c	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab,sqlite3_vtab_cursor ** ppCursor)	file:
xPagecount	include/sqlite/sqlite3.h	/^int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:int (*)(sqlite3_pcache *)
xPagecount	include/sqlite/sqlite3.h	/^int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:int (*)(sqlite3_pcache *)
xPagecount	sqlite/sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:int (*)(sqlite3_pcache *)	file:
xPagecount	sqlite/sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:int (*)(sqlite3_pcache *)	file:
xPhraseCount	include/sqlite/sqlite3.h	/^int (*xPhraseCount)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *)
xPhraseCount	sqlite/sqlite3.c	/^  int (*xPhraseCount)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *)	file:
xPhraseFirst	include/sqlite/sqlite3.h	/^int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iPhrase,Fts5PhraseIter *,int *,int *)
xPhraseFirst	sqlite/sqlite3.c	/^  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iPhrase,Fts5PhraseIter *,int *,int *)	file:
xPhraseFirstColumn	include/sqlite/sqlite3.h	/^int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iPhrase,Fts5PhraseIter *,int *)
xPhraseFirstColumn	sqlite/sqlite3.c	/^  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iPhrase,Fts5PhraseIter *,int *)	file:
xPhraseNext	include/sqlite/sqlite3.h	/^void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:void (*)(Fts5Context *,Fts5PhraseIter *,int * piCol,int * piOff)
xPhraseNext	sqlite/sqlite3.c	/^  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:void (*)(Fts5Context *,Fts5PhraseIter *,int * piCol,int * piOff)	file:
xPhraseNextColumn	include/sqlite/sqlite3.h	/^void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:void (*)(Fts5Context *,Fts5PhraseIter *,int * piCol)
xPhraseNextColumn	sqlite/sqlite3.c	/^  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:void (*)(Fts5Context *,Fts5PhraseIter *,int * piCol)	file:
xPhraseSize	include/sqlite/sqlite3.h	/^int (*xPhraseSize)(Fts5Context*, int iPhrase);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iPhrase)
xPhraseSize	sqlite/sqlite3.c	/^  int (*xPhraseSize)(Fts5Context*, int iPhrase);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iPhrase)	file:
xPreUpdateCallback	sqlite/sqlite3.c	/^  void (*xPreUpdateCallback)(   \/* Registered using sqlite3_preupdate_hook() *\/$/;"	m	struct:sqlite3	typeref:typename:void (*)(void *,sqlite3 *,int,char const *,char const *,sqlite3_int64,sqlite3_int64)	file:
xProfile	sqlite/sqlite3.c	/^  void (*xProfile)(void*,const char*,u64);  \/* Profiling function *\/$/;"	m	struct:sqlite3	typeref:typename:void (*)(void *,const char *,u64)	file:
xProgress	sqlite/sqlite3.c	/^  int (*xProgress)(void *);     \/* The progress callback *\/$/;"	m	struct:sqlite3	typeref:typename:int (*)(void *)	file:
xQueryPhrase	include/sqlite/sqlite3.h	/^int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iPhrase,void * pUserData,int (*)(const Fts5ExtensionApi *,Fts5Context *,void *))
xQueryPhrase	sqlite/sqlite3.c	/^  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,int iPhrase,void * pUserData,int (*)(const Fts5ExtensionApi *,Fts5Context *,void *))	file:
xRandomness	include/sqlite/sqlite3.h	/^int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,int nByte,char * zOut)
xRandomness	sqlite/sqlite3.c	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,int nByte,char * zOut)	file:
xRead	include/sqlite/sqlite3.h	/^int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,void *,int iAmt,sqlite3_int64 iOfst)
xRead	sqlite/sqlite3.c	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,void *,int iAmt,sqlite3_int64 iOfst)	file:
xRealloc	include/sqlite/sqlite3.h	/^void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:void * (*)(void *,int)
xRealloc	sqlite/sqlite3.c	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:void * (*)(void *,int)	file:
xRekey	include/sqlite/sqlite3.h	/^void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*,$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *,sqlite3_pcache_page *,unsigned oldKey,unsigned newKey)
xRekey	include/sqlite/sqlite3.h	/^void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(sqlite3_pcache *,void *,unsigned oldKey,unsigned newKey)
xRekey	sqlite/sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*,$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *,sqlite3_pcache_page *,unsigned oldKey,unsigned newKey)	file:
xRekey	sqlite/sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(sqlite3_pcache *,void *,unsigned oldKey,unsigned newKey)	file:
xRelease	include/sqlite/sqlite3.h	/^int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab,int)
xRelease	sqlite/sqlite3.c	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab,int)	file:
xRename	include/sqlite/sqlite3.h	/^int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVtab,const char * zNew)
xRename	sqlite/sqlite3.c	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVtab,const char * zNew)	file:
xRollback	include/sqlite/sqlite3.h	/^int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)
xRollback	sqlite/sqlite3.c	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)	file:
xRollbackCallback	sqlite/sqlite3.c	/^  void (*xRollbackCallback)(void*); \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	typeref:typename:void (*)(void *)	file:
xRollbackTo	include/sqlite/sqlite3.h	/^int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab,int)
xRollbackTo	sqlite/sqlite3.c	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab,int)	file:
xRoundup	include/sqlite/sqlite3.h	/^int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:int (*)(int)
xRoundup	sqlite/sqlite3.c	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:int (*)(int)	file:
xRowCount	include/sqlite/sqlite3.h	/^int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,sqlite3_int64 * pnRow)
xRowCount	sqlite/sqlite3.c	/^  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,sqlite3_int64 * pnRow)	file:
xRowid	include/sqlite/sqlite3.h	/^int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *,sqlite3_int64 * pRowid)
xRowid	include/sqlite/sqlite3.h	/^sqlite3_int64 (*xRowid)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:sqlite3_int64 (*)(Fts5Context *)
xRowid	sqlite/sqlite3.c	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab_cursor *,sqlite3_int64 * pRowid)	file:
xRowid	sqlite/sqlite3.c	/^  sqlite3_int64 (*xRowid)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:sqlite3_int64 (*)(Fts5Context *)	file:
xSFunc	sqlite/sqlite3.c	/^  void (*xSFunc)(sqlite3_context*,int,sqlite3_value**); \/* func or agg-step *\/$/;"	m	struct:FuncDef	typeref:typename:void (*)(sqlite3_context *,int,sqlite3_value **)	file:
xSavepoint	include/sqlite/sqlite3.h	/^int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab,int)
xSavepoint	sqlite/sqlite3.c	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab,int)	file:
xSectorSize	include/sqlite/sqlite3.h	/^int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *)
xSectorSize	sqlite/sqlite3.c	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *)	file:
xSelectCallback	sqlite/sqlite3.c	/^  int (*xSelectCallback)(Walker*,Select*);  \/* Callback for SELECTs *\/$/;"	m	struct:Walker	typeref:typename:int (*)(Walker *,Select *)	file:
xSelectCallback2	sqlite/sqlite3.c	/^  void (*xSelectCallback2)(Walker*,Select*);\/* Second callback for SELECTs *\/$/;"	m	struct:Walker	typeref:typename:void (*)(Walker *,Select *)	file:
xSetAuxdata	include/sqlite/sqlite3.h	/^int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,void * pAux,void (* xDelete)(void *))
xSetAuxdata	sqlite/sqlite3.c	/^  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,void * pAux,void (* xDelete)(void *))	file:
xSetSystemCall	include/sqlite/sqlite3.h	/^int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,const char * zName,sqlite3_syscall_ptr)
xSetSystemCall	sqlite/sqlite3.c	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,const char * zName,sqlite3_syscall_ptr)	file:
xShmBarrier	include/sqlite/sqlite3.h	/^void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	typeref:typename:void (*)(sqlite3_file *)
xShmBarrier	sqlite/sqlite3.c	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	typeref:typename:void (*)(sqlite3_file *)	file:
xShmLock	include/sqlite/sqlite3.h	/^int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int offset,int n,int flags)
xShmLock	sqlite/sqlite3.c	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int offset,int n,int flags)	file:
xShmMap	include/sqlite/sqlite3.h	/^int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int iPg,int pgsz,int,void volatile **)
xShmMap	sqlite/sqlite3.c	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int iPg,int pgsz,int,void volatile **)	file:
xShmUnmap	include/sqlite/sqlite3.h	/^int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int deleteFlag)
xShmUnmap	sqlite/sqlite3.c	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int deleteFlag)	file:
xShrink	include/sqlite/sqlite3.h	/^void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *)
xShrink	sqlite/sqlite3.c	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *)	file:
xShutdown	include/sqlite/sqlite3.h	/^void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:void (*)(void *)
xShutdown	include/sqlite/sqlite3.h	/^void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(void *)
xShutdown	include/sqlite/sqlite3.h	/^void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(void *)
xShutdown	sqlite/sqlite3.c	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:void (*)(void *)	file:
xShutdown	sqlite/sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(void *)	file:
xShutdown	sqlite/sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(void *)	file:
xSize	include/sqlite/sqlite3.h	/^int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:int (*)(void *)
xSize	sqlite/sqlite3.c	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	typeref:typename:int (*)(void *)	file:
xSleep	include/sqlite/sqlite3.h	/^int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,int microseconds)
xSleep	sqlite/sqlite3.c	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	typeref:typename:int (*)(sqlite3_vfs *,int microseconds)	file:
xSqllog	sqlite/sqlite3.c	/^  void(*xSqllog)(void*,sqlite3*,const char*, int);$/;"	m	struct:Sqlite3Config	typeref:typename:void (*)(void *,sqlite3 *,const char *,int)	file:
xSync	include/sqlite/sqlite3.h	/^int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int flags)
xSync	include/sqlite/sqlite3.h	/^int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)
xSync	sqlite/sqlite3.c	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int flags)	file:
xSync	sqlite/sqlite3.c	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab * pVTab)	file:
xTestCallback	sqlite/sqlite3.c	/^  int (*xTestCallback)(int);        \/* Invoked by sqlite3FaultSim() *\/$/;"	m	struct:Sqlite3Config	typeref:typename:int (*)(int)	file:
xTokenize	include/sqlite/sqlite3.h	/^int (*xTokenize)(Fts5Context*,$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,const char * pText,int nText,void * pCtx,int (* xToken)(void *,int,const char *,int,int,int))
xTokenize	include/sqlite/sqlite3.h	/^int (*xTokenize)(Fts5Tokenizer*,$/;"	m	struct:fts5_tokenizer	typeref:typename:int (*)(Fts5Tokenizer *,void * pCtx,int flags,const char * pText,int nText,int (* xToken)(void * pCtx,int tflags,const char * pToken,int nToken,int iStart,int iEnd))
xTokenize	sqlite/sqlite3.c	/^  int (*xTokenize)(Fts5Context*,$/;"	m	struct:Fts5ExtensionApi	typeref:typename:int (*)(Fts5Context *,const char * pText,int nText,void * pCtx,int (* xToken)(void *,int,const char *,int,int,int))	file:
xTokenize	sqlite/sqlite3.c	/^  int (*xTokenize)(Fts5Tokenizer*,$/;"	m	struct:fts5_tokenizer	typeref:typename:int (*)(Fts5Tokenizer *,void * pCtx,int flags,const char * pText,int nText,int (* xToken)(void * pCtx,int tflags,const char * pToken,int nToken,int iStart,int iEnd))	file:
xTrace	sqlite/sqlite3.c	/^  int (*xTrace)(u32,void*,void*,void*);     \/* Trace function *\/$/;"	m	struct:sqlite3	typeref:typename:int (*)(u32,void *,void *,void *)	file:
xTruncate	include/sqlite/sqlite3.h	/^int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,sqlite3_int64 size)
xTruncate	include/sqlite/sqlite3.h	/^void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(sqlite3_pcache *,unsigned iLimit)
xTruncate	include/sqlite/sqlite3.h	/^void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *,unsigned iLimit)
xTruncate	sqlite/sqlite3.c	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,sqlite3_int64 size)	file:
xTruncate	sqlite/sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(sqlite3_pcache *,unsigned iLimit)	file:
xTruncate	sqlite/sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *,unsigned iLimit)	file:
xUnfetch	include/sqlite/sqlite3.h	/^int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,sqlite3_int64 iOfst,void * p)
xUnfetch	sqlite/sqlite3.c	/^  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,sqlite3_int64 iOfst,void * p)	file:
xUnlock	include/sqlite/sqlite3.h	/^int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int)
xUnlock	sqlite/sqlite3.c	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,int)	file:
xUnlockNotify	sqlite/sqlite3.c	/^  void (*xUnlockNotify)(void **, int);  \/* Unlock notify callback *\/$/;"	m	struct:sqlite3	typeref:typename:void (*)(void **,int)	file:
xUnpin	include/sqlite/sqlite3.h	/^void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *,sqlite3_pcache_page *,int discard)
xUnpin	include/sqlite/sqlite3.h	/^void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(sqlite3_pcache *,void *,int discard)
xUnpin	sqlite/sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2	typeref:typename:void (*)(sqlite3_pcache *,sqlite3_pcache_page *,int discard)	file:
xUnpin	sqlite/sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	typeref:typename:void (*)(sqlite3_pcache *,void *,int discard)	file:
xUpdate	include/sqlite/sqlite3.h	/^int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab *,int,sqlite3_value **,sqlite3_int64 *)
xUpdate	sqlite/sqlite3.c	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	typeref:typename:int (*)(sqlite3_vtab *,int,sqlite3_value **,sqlite3_int64 *)	file:
xUpdateCallback	sqlite/sqlite3.c	/^  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);$/;"	m	struct:sqlite3	typeref:typename:void (*)(void *,int,const char *,const char *,sqlite_int64)	file:
xUserData	include/sqlite/sqlite3.h	/^void *(*xUserData)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:void * (*)(Fts5Context *)
xUserData	sqlite/sqlite3.c	/^  void *(*xUserData)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	typeref:typename:void * (*)(Fts5Context *)	file:
xVdbeBranch	sqlite/sqlite3.c	/^  void (*xVdbeBranch)(void*,int iSrcLine,u8 eThis,u8 eMx);  \/* Callback *\/$/;"	m	struct:Sqlite3Config	typeref:typename:void (*)(void *,int iSrcLine,u8 eThis,u8 eMx)	file:
xWalCallback	sqlite/sqlite3.c	/^  int (*xWalCallback)(void *, sqlite3 *, const char *, int);$/;"	m	struct:sqlite3	typeref:typename:int (*)(void *,sqlite3 *,const char *,int)	file:
xWrite	include/sqlite/sqlite3.h	/^int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,const void *,int iAmt,sqlite3_int64 iOfst)
xWrite	sqlite/sqlite3.c	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	typeref:typename:int (*)(sqlite3_file *,const void *,int iAmt,sqlite3_int64 iOfst)	file:
xthreadsafe	include/sqlite/sqlite3ext.h	/^  int (*xthreadsafe)(void);$/;"	m	struct:sqlite3_api_routines	typeref:typename:int (*)(void)
yColCache	sqlite/sqlite3.c	/^  struct yColCache {$/;"	s	struct:Parse	file:
yDbMask	sqlite/sqlite3.c	/^  typedef unsigned char yDbMask[(SQLITE_MAX_ATTACHED+9)\/8];$/;"	t	typeref:typename:unsigned char[(SQLITE_MAX_ATTACHED+9)/8]	file:
yDbMask	sqlite/sqlite3.c	/^  typedef unsigned int yDbMask;$/;"	t	typeref:typename:unsigned int	file:
ynVar	sqlite/sqlite3.c	/^typedef i16 ynVar;$/;"	t	typeref:typename:i16	file:
ynVar	sqlite/sqlite3.c	/^typedef int ynVar;$/;"	t	typeref:typename:int	file:
z	sqlite/shell.c	/^  char *z;            \/* Accumulated text for a field *\/$/;"	m	struct:ImportCtx	typeref:typename:char *	file:
z	sqlite/shell.c	/^  char *z;$/;"	m	struct:ShellText	typeref:typename:char *	file:
z	sqlite/sqlite3.c	/^    char *z;               \/* Pointer to data for string (char array) types *\/$/;"	m	union:VdbeOp::p4union	typeref:typename:char *	file:
z	sqlite/sqlite3.c	/^  char *z;            \/* String or BLOB value *\/$/;"	m	struct:sqlite3_value	typeref:typename:char *	file:
z	sqlite/sqlite3.c	/^  const char *z;     \/* Text of the token.  Not NULL-terminated! *\/$/;"	m	struct:Token	typeref:typename:const char *	file:
zAffSdst	sqlite/sqlite3.c	/^  char *zAffSdst;      \/* Affinity used when eDest==SRT_Set *\/$/;"	m	struct:SelectDest	typeref:typename:char *	file:
zAlias	sqlite/sqlite3.c	/^    char *zAlias;     \/* The "B" part of a "A AS B" phrase.  zName is the "A" *\/$/;"	m	struct:SrcList::SrcList_item	typeref:typename:char *	file:
zAuthContext	sqlite/sqlite3.c	/^  const char *zAuthContext;   \/* Put saved Parse.zAuthContext here *\/$/;"	m	struct:AuthContext	typeref:typename:const char *	file:
zAuthContext	sqlite/sqlite3.c	/^  const char *zAuthContext; \/* The 6th parameter to db->xAuth callbacks *\/$/;"	m	struct:Parse	typeref:typename:const char *	file:
zAuthPW	sqlite/sqlite3.c	/^  char *zAuthPW;                \/* Password used to authenticate *\/$/;"	m	struct:sqlite3_userauth	typeref:typename:char *	file:
zAuthUser	sqlite/sqlite3.c	/^  char *zAuthUser;              \/* User name used to authenticate *\/$/;"	m	struct:sqlite3_userauth	typeref:typename:char *	file:
zBase	sqlite/sqlite3.c	/^  char *zBase;         \/* A base allocation.  Not from malloc. *\/$/;"	m	struct:StrAccum	typeref:typename:char *	file:
zCol	sqlite/sqlite3.c	/^    char *zCol;           \/* Name of column in zTo.  If NULL use PRIMARY KEY *\/$/;"	m	struct:FKey::sColMap	typeref:typename:char *	file:
zColAff	sqlite/sqlite3.c	/^  char *zColAff;           \/* String defining the affinity of each column *\/$/;"	m	struct:Index	typeref:typename:char *	file:
zColAff	sqlite/sqlite3.c	/^  char *zColAff;       \/* String defining the affinity of each column *\/$/;"	m	struct:Table	typeref:typename:char *	file:
zColl	sqlite/sqlite3.c	/^  char *zColl;     \/* Collating sequence.  If NULL, use the default *\/$/;"	m	struct:Column	typeref:typename:char *	file:
zComment	sqlite/sqlite3.c	/^  char *zComment;          \/* Comment to improve readability *\/$/;"	m	struct:VdbeOp	typeref:typename:char *	file:
zCteErr	sqlite/sqlite3.c	/^    const char *zCteErr;            \/* Error message for circular references *\/$/;"	m	struct:With::Cte	typeref:typename:const char *	file:
zCtrlName	sqlite/shell.c	/^      const char *zCtrlName;   \/* Name of a test-control option *\/$/;"	m	struct:do_meta_command::__anonc53fbaef0708	typeref:typename:const char *	file:
zDatabase	sqlite/sqlite3.c	/^    char *zDatabase;  \/* Name of database holding this table *\/$/;"	m	struct:SrcList::SrcList_item	typeref:typename:char *	file:
zDb	sqlite/sqlite3.c	/^  const char *zDb;    \/* Make sure all objects are contained in this database *\/$/;"	m	struct:DbFixer	typeref:typename:const char *	file:
zDbFilename	sqlite/shell.c	/^  const char *zDbFilename;    \/* name of the database file *\/$/;"	m	struct:ShellState	typeref:typename:const char *	file:
zDbSName	sqlite/sqlite3.c	/^  char *zDbSName;      \/* Name of this database. (schema name, not filename) *\/$/;"	m	struct:Db	typeref:typename:char *	file:
zDesc	sqlite/shell.c	/^      const char *zDesc;$/;"	m	struct:displayLinuxIoStats::__anonc53fbaef0208	typeref:typename:const char *	file:
zDestTable	sqlite/shell.c	/^  char *zDestTable;      \/* Name of destination table when MODE_Insert *\/$/;"	m	struct:ShellState	typeref:typename:char *	file:
zEnd	sqlite/sqlite3.c	/^  const char *zEnd;     \/* One character past the end of input text *\/$/;"	m	struct:ExprSpan	typeref:typename:const char *	file:
zErrMsg	include/sqlite/sqlite3.h	/^char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	typeref:typename:char *
zErrMsg	sqlite/sqlite3.c	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	typeref:typename:char *	file:
zErrMsg	sqlite/sqlite3.c	/^  char *zErrMsg;          \/* Error message written here *\/$/;"	m	struct:Vdbe	typeref:typename:char *	file:
zErrMsg	sqlite/sqlite3.c	/^  char *zErrMsg;       \/* An error message *\/$/;"	m	struct:Parse	typeref:typename:char *	file:
zFile	sqlite/shell.c	/^  const char *zFile;  \/* Name of the input file *\/$/;"	m	struct:ImportCtx	typeref:typename:const char *	file:
zFreeOnClose	sqlite/shell.c	/^  char *zFreeOnClose;         \/* Filename to free when closing *\/$/;"	m	struct:ShellState	typeref:typename:char *	file:
zHelp	sqlite/shell.c	/^static char zHelp[] =$/;"	v	typeref:typename:char[]	file:
zIndexedBy	sqlite/sqlite3.c	/^      char *zIndexedBy;    \/* Identifier from "INDEXED BY <zIndex>" clause *\/$/;"	m	union:SrcList::SrcList_item::__anon76f104fc180a	typeref:typename:char *	file:
zLimitName	sqlite/shell.c	/^      const char *zLimitName;   \/* Name of a limit *\/$/;"	m	struct:do_meta_command::__anonc53fbaef0608	typeref:typename:const char *	file:
zMalloc	sqlite/sqlite3.c	/^  char *zMalloc;      \/* Space to hold MEM_Str or MEM_Blob if szMalloc>0 *\/$/;"	m	struct:sqlite3_value	typeref:typename:char *	file:
zName	include/sqlite/sqlite3.h	/^const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:const char *
zName	sqlite/shell.c	/^  char *zName;             \/* Symbolic name for this session *\/$/;"	m	struct:OpenSession	typeref:typename:char *	file:
zName	sqlite/shell.c	/^  static const struct { const char *zName; const char *zSql; } aQuery[] = {$/;"	m	struct:shell_dbinfo_command::__anonc53fbaef0508	typeref:typename:const char *	file:
zName	sqlite/shell.c	/^  static const struct { const char *zName; int ofst; } aField[] = {$/;"	m	struct:shell_dbinfo_command::__anonc53fbaef0408	typeref:typename:const char *	file:
zName	sqlite/sqlite3.c	/^    char *zName;                    \/* Name of this CTE *\/$/;"	m	struct:With::Cte	typeref:typename:char *	file:
zName	sqlite/sqlite3.c	/^    char *zName;            \/* Token associated with this expression *\/$/;"	m	struct:ExprList::ExprList_item	typeref:typename:char *	file:
zName	sqlite/sqlite3.c	/^    char *zName;      \/* Name of the identifier *\/$/;"	m	struct:IdList::IdList_item	typeref:typename:char *	file:
zName	sqlite/sqlite3.c	/^    char *zName;      \/* Name of the table *\/$/;"	m	struct:SrcList::SrcList_item	typeref:typename:char *	file:
zName	sqlite/sqlite3.c	/^  char *zName;                        \/* Savepoint name (nul-terminated) *\/$/;"	m	struct:Savepoint	typeref:typename:char *	file:
zName	sqlite/sqlite3.c	/^  char *zName;                    \/* Name of table or index *\/$/;"	m	struct:ScanStatus	typeref:typename:char *	file:
zName	sqlite/sqlite3.c	/^  char *zName;             \/* Name of this index *\/$/;"	m	struct:Index	typeref:typename:char *	file:
zName	sqlite/sqlite3.c	/^  char *zName;            \/* The name of the trigger                        *\/$/;"	m	struct:Trigger	typeref:typename:char *	file:
zName	sqlite/sqlite3.c	/^  char *zName;          \/* Name of the collating sequence, UTF-8 encoded *\/$/;"	m	struct:CollSeq	typeref:typename:char *	file:
zName	sqlite/sqlite3.c	/^  char *zName;         \/* Name of the table or view *\/$/;"	m	struct:Table	typeref:typename:char *	file:
zName	sqlite/sqlite3.c	/^  char *zName;        \/* Name of the transformation *\/$/;"	m	struct:__anon76f104fc1c08	typeref:typename:char *	file:
zName	sqlite/sqlite3.c	/^  char *zName;     \/* Name of this column, \\000, then the type *\/$/;"	m	struct:Column	typeref:typename:char *	file:
zName	sqlite/sqlite3.c	/^  const char *zName;                   \/* Name passed to create_module() *\/$/;"	m	struct:Module	typeref:typename:const char *	file:
zName	sqlite/sqlite3.c	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	typeref:typename:const char *	file:
zName	sqlite/sqlite3.c	/^  const char *zName;   \/* SQL name of the function. *\/$/;"	m	struct:FuncDef	typeref:typename:const char *	file:
zOptions	sqlite/shell.c	/^static const char zOptions[] =$/;"	v	typeref:typename:const char[]	file:
zPattern	sqlite/shell.c	/^      const char *zPattern;$/;"	m	struct:displayLinuxIoStats::__anonc53fbaef0208	typeref:typename:const char *	file:
zPool	sqlite/sqlite3.c	/^  u8 *zPool;       \/* Memory available to be allocated *\/$/;"	m	struct:Mem5Global	typeref:typename:u8 *	file:
zSelName	sqlite/sqlite3.c	/^  char zSelName[12];     \/* Symbolic name of this SELECT use for debugging *\/$/;"	m	struct:Select	typeref:typename:char[12]	file:
zSpan	sqlite/sqlite3.c	/^    char *zSpan;            \/* Original text of the expression *\/$/;"	m	struct:ExprList::ExprList_item	typeref:typename:char *	file:
zSql	sqlite/shell.c	/^  static const struct { const char *zName; const char *zSql; } aQuery[] = {$/;"	m	struct:shell_dbinfo_command::__anonc53fbaef0508	typeref:typename:const char *	file:
zSql	sqlite/sqlite3.c	/^  char *zSql;             \/* Text of the SQL statement that generated this *\/$/;"	m	struct:Vdbe	typeref:typename:char *	file:
zStart	sqlite/sqlite3.c	/^  const char *zStart;   \/* First character of input text *\/$/;"	m	struct:ExprSpan	typeref:typename:const char *	file:
zSuffix	sqlite/shell.c	/^  static const struct { char *zSuffix; int iMult; } aMult[] = {$/;"	m	struct:integerValue::__anonc53fbaef0308	typeref:typename:char *	file:
zTail	sqlite/sqlite3.c	/^  const char *zTail;        \/* All SQL text past the last semicolon parsed *\/$/;"	m	struct:Parse	typeref:typename:const char *	file:
zTarget	sqlite/sqlite3.c	/^  char *zTarget;       \/* Target table for DELETE, UPDATE, INSERT *\/$/;"	m	struct:TriggerStep	typeref:typename:char *	file:
zTestcase	sqlite/shell.c	/^  char zTestcase[30];    \/* Name of current test case *\/$/;"	m	struct:ShellState	typeref:typename:char[30]	file:
zText	sqlite/sqlite3.c	/^  char *zText;         \/* The string collected so far *\/$/;"	m	struct:StrAccum	typeref:typename:char *	file:
zTitle	sqlite/sqlite3.c	/^  char zTitle[100];  \/* The title text *\/$/;"	m	struct:__anon76f104fc1d08	typeref:typename:char[100]	file:
zTo	sqlite/sqlite3.c	/^  char *zTo;        \/* Name of table that the key points to (aka: Parent) *\/$/;"	m	struct:FKey	typeref:typename:char *	file:
zToken	sqlite/sqlite3.c	/^    char *zToken;          \/* Token value. Zero terminated and dequoted *\/$/;"	m	union:Expr::__anon76f104fc130a	typeref:typename:char *	file:
zType	sqlite/sqlite3.c	/^  const char *zType;  \/* Type of the container - used for error messages *\/$/;"	m	struct:DbFixer	typeref:typename:const char *	file:
zVfs	sqlite/shell.c	/^  const char *zVfs;           \/* Name of VFS to use *\/$/;"	m	struct:ShellState	typeref:typename:const char *	file:
~BPlusTreeIndex	include/index/b_plus_tree_index.h	/^  ~BPlusTreeIndex() {}$/;"	f	class:cmudb::BPlusTreeIndex
~BigintType	include/type/bigint_type.h	/^  ~BigintType() {}$/;"	f	class:cmudb::BigintType
~BooleanType	include/type/boolean_type.h	/^  ~BooleanType() {}$/;"	f	class:cmudb::BooleanType
~BufferPoolManager	buffer/buffer_pool_manager.cpp	/^BufferPoolManager::~BufferPoolManager() {$/;"	f	class:cmudb::BufferPoolManager
~DiskManager	disk/disk_manager.cpp	/^DiskManager::~DiskManager() {$/;"	f	class:cmudb::DiskManager
~HashTable	include/hash/hash_table.h	/^  virtual ~HashTable() {}$/;"	f	class:cmudb::HashTable
~Index	include/index/index.h	/^  virtual ~Index() { delete metadata_; }$/;"	f	class:cmudb::Index
~IndexIterator	index/index_iterator.cpp	/^INDEXITERATOR_TYPE::~IndexIterator() {}$/;"	f	class:cmudb::INDEXITERATOR_TYPE	typeref:typename:INDEX_TEMPLATE_ARGUMENTS
~IndexMetadata	include/index/index.h	/^  ~IndexMetadata() { delete key_schema_; };$/;"	f	class:cmudb::IndexMetadata
~IntegerParentType	include/type/integer_parent_type.h	/^  ~IntegerParentType() {}$/;"	f	class:cmudb::IntegerParentType
~IntegerType	include/type/integer_type.h	/^  ~IntegerType() {}$/;"	f	class:cmudb::IntegerType
~LRUReplacer	buffer/lru_replacer.cpp	/^template <typename T> LRUReplacer<T>::~LRUReplacer() {}$/;"	f	class:cmudb::LRUReplacer
~LogManager	include/logging/log_manager.h	/^  ~LogManager() {$/;"	f	class:cmudb::LogManager
~LogRecord	include/logging/log_record.h	/^  ~LogRecord() {}$/;"	f	class:cmudb::LogRecord
~LogRecovery	include/logging/log_recovery.h	/^  ~LogRecovery() {$/;"	f	class:cmudb::LogRecovery
~NumericType	include/type/numeric_type.h	/^  ~NumericType() {}$/;"	f	class:cmudb::NumericType
~Page	include/page/page.h	/^  ~Page(){};$/;"	f	class:cmudb::Page
~RWMutex	include/common/rwmutex.h	/^  ~RWMutex() { std::lock_guard<mutex_t> guard(mutex_); }$/;"	f	class:cmudb::RWMutex
~Replacer	include/buffer/replacer.h	/^  virtual ~Replacer() {}$/;"	f	class:cmudb::Replacer
~SmallintType	include/type/smallint_type.h	/^  ~SmallintType() {}$/;"	f	class:cmudb::SmallintType
~StorageEngine	include/vtable/virtual_table.h	/^  ~StorageEngine() {$/;"	f	class:cmudb::StorageEngine
~TableHeap	include/table/table_heap.h	/^  ~TableHeap() {}$/;"	f	class:cmudb::TableHeap
~TableIterator	include/table/table_iterator.h	/^  ~TableIterator() { delete tuple_; }$/;"	f	class:cmudb::TableIterator
~TinyintType	include/type/tinyint_type.h	/^  ~TinyintType() {}$/;"	f	class:cmudb::TinyintType
~Transaction	include/concurrency/transaction.h	/^  ~Transaction() {}$/;"	f	class:cmudb::Transaction
~Tuple	include/table/tuple.h	/^  ~Tuple() {$/;"	f	class:cmudb::Tuple
~Type	include/type/type.h	/^  virtual ~Type() {}$/;"	f	class:cmudb::Type
~Value	type/value.cpp	/^Value::~Value() {$/;"	f	class:cmudb::Value
~VarlenType	type/varlen_type.cpp	/^VarlenType::~VarlenType() {}$/;"	f	class:cmudb::VarlenType
~VirtualTable	include/vtable/virtual_table.h	/^  ~VirtualTable() {$/;"	f	class:cmudb::VirtualTable
